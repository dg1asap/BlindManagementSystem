#include "Servo.h"

Servo servo = {3, 3, 3};

void steer(Servo servo) {
	if (canRollDownBlind()) {
		rollDownBlind();
	} else if (canRollUpBlind()) {
		rollUpBlind();
	} else if (canStopRollingBlind()) {
		stopRollingBlind();
	}
}

void increasePositionByLength(Servo servo, uint16_t length) {
	uint16_t newBlindPosition_ = length + newBlindPosition;
	if (canSetBlindPosition(newBlindPosition_)) {
		setBlindPosition(newBlindPosition_);
	}
}

bool canSetPosition(Servo servo, uint16_t newBlindPosition_) {
	return !isLongerThanBlind(newBlindPosition_) && isPositiveLength(newBlindPosition_);
}

void setPosition(Servo servo, uint16_t newBlindPosition_) {
	if (canSetBlindPosition(newBlindPosition_)) {
		newBlindPosition = newBlindPosition_;
	}
}

void setPositionToMax(Servo servo) {
	newBlindPosition = blind_height;
}

void setPositionToMin(Servo servo) {
	newBlindPosition = 0;
}

bool canRollUp(Servo servo) {
	return isBelowNewBlindPosition() && isRolledMaxUp();
}

bool canRollDown(Servo servo) {
	return isAboveNewBlindPosition() && isRolledMaxDown();
}

bool canStopRolling(Servo servo) {
	return current_blind_positon == newBlindPosition;
}

bool isRolledMaxUp(Servo servo) {
	return current_blind_positon < blind_height;
}

bool isRolledMaxDown(Servo servo) {
	return current_blind_positon > 0;
}

bool isBelowNewPosition(Servo servo) {
	return current_blind_positon < newBlindPosition;
}

bool isAboveNewPosition(Servo servo) {
	return current_blind_positon > newBlindPosition;
}

bool isLongerThan(Servo servo, uint16_t blindLength) {
	return blindLength > blind_height;
}

bool isPositiveLength(Servo servo, uint16_t blindLength) {
	return blindLength >= 0;
}

void rollDown(Servo servo) {
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1394);
	current_blind_positon--;
}

void rollUp(Servo servo) {
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1568);
	current_blind_positon++;
}

void stopRolling(Servo servo) {
//	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1474);
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1460);
}
