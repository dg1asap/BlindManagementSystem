#include "ServoScheduler.h"

ServoScheduler servoScheduler = {false, false, 0, 0, 0};

bool isServoUpOn(ServoScheduler* servoScheduler) {
	return servoScheduler->isServoUpOn;
}

bool isServoDownOn(ServoScheduler* servoScheduler) {
	return servoScheduler->isServoDownOn;
}

void turnOnServoUp(ServoScheduler* servoScheduler) {
	return servoScheduler->isServoUpOn = true;
}

void turnOnServoDown(ServoScheduler* servoScheduler) {
	return servoScheduler->isServoDownOn = true;
}

void turnOffServoUp(ServoScheduler* servoScheduler) {
	return servoScheduler->isServoUpOn = false;
}

void turnOffServoDown(ServoScheduler* servoScheduler) {
	return servoScheduler->isServoDownOn = false;
}

void count(ServoScheduler* servoScheduler) {
	servoScheduler->timer++;
	if (isTimerOutOfScope(servoScheduler))
		resetTimer(servoScheduler);
}

bool isTimerOutOfScope(ServoScheduler* servoScheduler) {
	servoScheduler->timer == 86400; // 86400s == 24h
}

void resetTimer(ServoScheduler* servoScheduler) {
	servoScheduler->timer = 0;
}

uint16_t canSteerServoUp(ServoScheduler* servoScheduler) {
	if (isServoUpOn(servoScheduler))
		return isServoUpTime(servoScheduler);
	return false;
}

uint16_t canSteerServoDown(ServoScheduler* servoScheduler) {
	if (isServoDownOn(servoScheduler))
		return isServoDownTime(servoScheduler);
	return false;
}

bool isServoUpTime(ServoScheduler* servoScheduler) {
	return servoScheduler->servoUpTime == servoScheduler->timer;
}

bool isServoDownTime(ServoScheduler* servoScheduler) {
	return servoScheduler->servoDownTime == servoScheduler->timer;
}

void setServoUpTime(ServoScheduler* servoSchedule, uint16_t newServoUpTime) {
	servoSchedule->servoUpTime = newServoUpTime;
}

void setServoDownTime(ServoScheduler* servoSchedule, uint16_t newServoDownTime) {
	servoSchedule->servoDownTime = newServoDownTime;
}
