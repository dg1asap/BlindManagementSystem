#include "LDR.h"

LDR ldr = {{0}, 0, 1, 1, 3000, 2000, 500};

uint16_t getLightIntensity(LDR ldr) {
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);

	uint16_t lightIntensity;
	/* Check if the continous conversion of regular channel is finished */
	if ((HAL_ADC_GetState(&hadc) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
	{
		/*##-6- Get the converted value of regular channel  ########################*/
		lightIntensity = HAL_ADC_GetValue(&hadc);
	}

	return lightIntensity;
}

void measure(LDR ldr) {
	ldr.messures[ldr.measureNumber - 1] = ldr.getLightIntensity();
	ldr.measureNumber++;

	if (ldr.measureIsAutoOfRange()) {
		ldr.measureNumber = 1;
	}
}

bool measureIsAutoOfRange(_LDR ldr) {
	return ldr.ldrMeasureNumber > NUMBER_OF_LDR_MEASURE;
}

bool areNewMeassures(_LDR ldr) {
	return ldr.ldrMeasureNumber >= NUMBER_OF_LDR_MEASURE;
}

uint16_t getAverageMeassure(LDR ldr) {
	ldr.averageMeasureFromLdr = 0;
	for (int i = 0; i < NUMBER_OF_LDR_MEASURE; i++) {
		ldr.averageMeasureFromLdr += ldr.messureFromLdr[i];
	}

	return (ldr.averageMeasureFromLdr/NUMBER_OF_LDR_MEASURE);
}

uint16_t convertPercentToValue(_LDR LDR, uint16_t percent) {
	uint16_t range = LDR.maxLDRreading - LDR.minLDRreading;
	return (LDR.minLDRreading + (range * percent / 100));
}

uint16_t convertLDRvalueToPercent(_LDR LDR, uint16_t ldrValue) {
	return ((ldrValue / LDR.maxLDRreading)*100);
}

bool isAboveUpperLimit(_LDR LDR) {
	return LDR.getAverageMeassure() > LDR.upperLDRControlLimit;
}

bool isBelowLowerLimit(_LDR LDR) {
	return LDR.getAverageMeassure() < LDR.lowerLDRControlLimit;
}

void setMinReading(_LDR LDR, uint16_t minLDRreading_) {
	LDR.minLDRreading = minLDRreading_;
}

void setMaxReading(_LDR LDR, uint16_t maxLDRreading_) {
	LDR.maxLDRreading = maxLDRreading_;
}

void setUpperControlLimit(_LDR LDR, uint16_t upperLDRContolLimit_) {
	LDR.upperLDRControlLimit = upperLDRContolLimit_;
}

void setLowerControlLimit(_LDR LDR, uint16_t lowerLDRControlLimit_) {
	LDR.lowerLDRControlLimit = lowerLDRControlLimit_;
}

uint16_t getMinReading(_LDR LDR) {
	return LDR.minLDRreading;
}

uint16_t getMaxReading(_LDR LDR) {
	return LDR.maxLDRreading;
}

uint16_t getUpperControlLimit(_LDR LDR) {
	return LDR.upperLDRControlLimit;
}

uint16_t getLowerControlLimit(_LDR LDR) {
	return LDR.lowerLDRControlLimit;
}

