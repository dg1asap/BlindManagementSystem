#include "bluetooth.h"

Bluetooth bluetooth = {{0}, 0, 0};

void msgHandler(Bluetooth* bluetooth) {
	if (strncmp(bluetooth->buffer, "SERWO MAX UP", strlen("SERWO MAX UP")) == 0)
		handleSerwoMaxUp(bluetooth);
	else if (strncmp(bluetooth->buffer, "SERWO MAX DOWN", strlen("SERWO MAX DOWN")) == 0)
		handleSerwoMaxDown(bluetooth);
	else if (strncmp(bluetooth->buffer, "SERWO UP", strlen("SERWO UP")) == 0)
		handleSerwoUp(bluetooth);
	else if (strncmp(bluetooth->buffer, "SERWO DOWN", strlen("SERWO DOWN")) == 0)
		handleSerwoDown(bluetooth);
	else if (strncmp(bluetooth->buffer, "SET MIN LDR READING xxxx", strlen("SET MIN LDR READING")) == 0)
		handleSetMinLDRreading(bluetooth);
	else if (strncmp(bluetooth->buffer, "SET MAX LDR READING xxxx", strlen("SET MAX LDR READING")) == 0)
		handleSetMaxLDRreading(bluetooth);
	else if (strncmp(bluetooth->buffer, "SET UPPER LDR CONTROL LIMIT xxxx", strlen("SET UPPER LDR CONTROL LIMIT")) == 0)
		handleSetUpperLDRcontrolLimit(bluetooth);
	else if (strncmp(bluetooth->buffer, "SET LOWER LDR CONTROL LIMIT xxxx", strlen("SET LOWER LDR CONTROL LIMIT")) == 0)
		handleSetLowerLDRcontrolLimit(bluetooth);
	else if (strncmp(bluetooth->buffer, "SET SERVO MAX POSITION xxx", strlen("PRINT SERVO MAX POSITON")) == 0)
		handleSetServoMaxPosition(bluetooth);
	else if (strncmp(bluetooth->buffer, "PRINT MIN LDR READING", strlen("PRINT MIN LDR READING")) == 0)
		handlePrintMinLDRreading(bluetooth);
	else if (strncmp(bluetooth->buffer, "PRINT MAX LDR READING", strlen("PRINT MAX LDR READING")) == 0)
		handlePrintMaxLDRreading(bluetooth);
	else if (strncmp(bluetooth->buffer, "PRINT UPPER LDR CONTROL LIMIT", strlen("PRINT UPPER LDR CONTROL LIMIT")) == 0)
		handlePrintUpperLDRcontrolLimit(bluetooth);
	else if (strncmp(bluetooth->buffer, "PRINT LOWER LDR CONTROL LIMIT", strlen("PRINT LOWER LDR CONTROL LIMIT")) == 0)
		handlePrintLowerLDRcontrolLimit(bluetooth);
	else if (strncmp(bluetooth->buffer, "PRINT SERVO MAX POSITION", strlen("PRINT SERVO MAX POSITON")) == 0)
		handlePrintServoMaxPosition(bluetooth);
	else if (strncmp(bluetooth->buffer, "TIMER UP xxxx", strlen("TIMER UP")) == 0) {
		uint16_t newServoUpTime_ = getLastWordAsInt(bluetooth->buffer);
		setServoUpTime(&servoScheduler, newServoUpTime_);
		turnOnServoUp(&servoScheduler);
		char info[50];
		sprintf(info, "timerUp=%d", newServoUpTime_);
		strcat(info, "\n");
		HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
	} else if(strncmp(bluetooth->buffer, "LDR TURN ON", strlen("LDR TURN ON")) == 0) {
		turn0n(&ldr);
		HAL_UART_Transmit(&huart1, (uint8_t*)"LDR is turn on\n", strlen("LDR is turn on\n"), 500);
	} else if(strncmp(bluetooth->buffer, "LDR TURN OFF", strlen("LDR TURN OFF")) == 0) {
		turnOff(&ldr);
		HAL_UART_Transmit(&huart1, (uint8_t*)"LDR is turn off\n", strlen("LDR is turn off\n"), 500);
	} else
		handleIncorrectCommand(bluetooth);

	memset(bluetooth->buffer, 0, sizeof(bluetooth->buffer));
	bluetooth->buffer_index = 0;
	bluetooth->timer_count = 0;
}

void handleSerwoMaxUp(Bluetooth* bluetooth) {
	setPositionToMax(&servo);
	HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going up to min.\n", strlen("Servo going up to min.\n"), 500);
}

void handleSerwoMaxDown(Bluetooth* bluetooth) {
	setPositionToMin(&servo);
	HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going down to max.\n", strlen("Servo going down to max.\n"), 500);
}

void handleSerwoUp(Bluetooth* bluetooth) {
	increasePositionBy(&servo, 1);
	HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going up by 1.\n", strlen("Servo going up by 1.\n"), 500);
}

void handleSerwoDown(Bluetooth* bluetooth) {
	increasePositionBy(&servo, -1);
	HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going down by 1.\n", strlen("Servo going down by 1.\n"), 500);
}

void handleSetMinLDRreading(Bluetooth* bluetooth) {
	uint16_t ldrValue = getLastWordAsInt(bluetooth->buffer);
	setMinReading(&ldr, ldrValue);
	HAL_UART_Transmit(&huart1, (uint8_t*)"Operation ended sucessful\n", strlen("Operation ended sucessful\n"), 500);
}

void handleSetMaxLDRreading(Bluetooth* bluetooth) {
	uint16_t ldrValue = getLastWordAsInt(bluetooth->buffer);
	setMaxReading(&ldr, ldrValue);
	HAL_UART_Transmit(&huart1, (uint8_t*)"Operation ended sucessful\n", strlen("Operation ended sucessful\n"), 500);
}

void handleSetUpperLDRcontrolLimit(Bluetooth* bluetooth) {
	uint16_t ldrValue = getLastWordAsInt(bluetooth->buffer);
	setUpperControlLimit(&ldr, ldrValue);
	HAL_UART_Transmit(&huart1, (uint8_t*)"Operation ended sucessful\n", strlen("Operation ended sucessful\n"), 500);
}

void handleSetLowerLDRcontrolLimit(Bluetooth* bluetooth) {
	uint16_t ldrValue = getLastWordAsInt(bluetooth->buffer);
	setLowerControlLimit(&ldr, ldrValue);
	HAL_UART_Transmit(&huart1, (uint8_t*)"Operation ended sucessful\n", strlen("Operation ended sucessful\n"), 500);
}

void handlePrintMinLDRreading(Bluetooth* bluetooth) {
	uint16_t ldrValue = getMinReading(&ldr);
	printMinLDRreading(bluetooth, ldrValue);
}

void handlePrintMaxLDRreading(Bluetooth* bluetooth) {
	uint16_t ldrValue = getMaxReading(&ldr);
	printMaxReading(bluetooth, ldrValue);
}

void handlePrintUpperLDRcontrolLimit(Bluetooth* bluetooth) {
	uint16_t ldrValue = getUpperControlLimit(&ldr);
	printUpperControlLimit(bluetooth, ldrValue);
}

void handlePrintLowerLDRcontrolLimit(Bluetooth* bluetooth) {
	uint16_t ldrValue = getLowerControlLimit(&ldr);
	printLowerControlLimit(bluetooth, ldrValue);
}

void handleSetServoMaxPosition(Bluetooth* bluetooth) {
	uint16_t newMaxPosition_ = getLastWordAsInt(bluetooth->buffer);
	setMaxPositon(&servo, newMaxPosition_);
	HAL_UART_Transmit(&huart1, (uint8_t*)"Operation ended sucessful\n", strlen("Operation ended sucessful\n"), 500);
}
void handlePrintServoMaxPosition(Bluetooth* bluetooth) {
	uint16_t maxPostion = getMaxPositon(&servo);
	printServoMaxPosition(bluetooth, maxPostion);
}

void handleIncorrectCommand(Bluetooth* bluetooth) {
	strcat(bluetooth->buffer, "\n");
	HAL_UART_Transmit(&huart1, (uint8_t*)bluetooth->buffer, strlen(bluetooth->buffer), 500);
}

void printMinLDRreading(Bluetooth* bluetooth, uint16_t ldrValue) {
	char info[50];
	sprintf(info, "minLdrReading=%d", ldrValue);
	strcat(info, "\n");
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
}

void printMaxReading(Bluetooth* bluetooth, uint16_t ldrValue) {
	char info[50];
	sprintf(info, "maxLdrReading=%d", ldrValue);
	strcat(info, "\n");
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
}

void printUpperControlLimit(Bluetooth* bluetooth, uint16_t ldrValue) {
	char info[50];
	sprintf(info, "upperLdrControlLimit=%d", ldrValue);
	strcat(info, "\n");
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
}

void printLowerControlLimit(Bluetooth* bluetooth, uint16_t ldrValue) {
	char info[50];
	sprintf(info, "lowerLdrControlLimit=%d", ldrValue);
	strcat(info, "\n");
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
}

void printServoMaxPosition(Bluetooth* bluetooth, uint16_t maxPostion_) {
	char info[50];
	sprintf(info, "servoMaxPosition=%d", maxPostion_);
	strcat(info, "\n");
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
}

