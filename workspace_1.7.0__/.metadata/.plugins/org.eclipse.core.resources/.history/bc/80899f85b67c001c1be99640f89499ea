#ifndef INC_MYLIBRARY_H_
#define INC_MYLIBRARY_H_

#include <string.h>

#include "main.h"
#include "tim.h"
#include "myutilities.h"

extern UART_HandleTypeDef huart1;

typedef struct Bluetooth {
	/** Ciąg znaków wysyłany do modułu bluetooth **/
	char buffer[50];

	/** Indeks aktualnie przesyłanego znaku **/
	uint8_t buffer_index;

	/** Licznik czasu odczytu z bufora u celu optymalnego przesyłu danych. **/
	uint8_t timer_count;
} Bluetooth;

extern Bluetooth bluetooth;

/**
 * @brief Funkcja obsługująca komendy wysłane do modułu bluetooth. Gdzie dla komendy:
 * SERWO MAX UP - następuje ustawienie rolety w najwyższym punkcie.
 * SERWO MAX DOWN - następuje ustawienie rolety w najniższym punkcie.
 * SERWO UP - zwiększenie pozycji rolety o 1.
 * SERWO DOWN - zmniejszenie pozycji rolety o 1.
 * SET MIN LDR READING xxxx - ustawia fabryczne natężenie światła, po przekroczeniu którego roleta się opuszcza.
 * SET MAX LDR READING xxxx - ustawia fabryczne natężenie światła, po przekroczeniu którego roleta się podnosi.
 * SET UPPER LDR CONTROL LIMIT xxxx - ustawia górną wartość odczytu z fotorezystora, dla którego następuje wysterowanie.
 * SET LOWER LDR CONTROL LIMIT xxxx - ustawia dolną wartość odczytu z fotorezystora, dla którego następuje wysterowanie.
 * PRINT MIN LDR READING - zwraca fabryczne natężenie światła, po przekroczeniu którego roleta się opuszcza.
 * PRINT MAX LDR READING - zwraca fabryczne natężenie światła, po przekroczeniu którego roleta się podnosi.
 * PRINT UPPER LDR CONTROL LIMIT - zwraca górną wartość odczytu z fotorezystora, dla którego następuje wysterowanie.
 * PRINT LOWER LDR CONTROL LIMIT - zwraca dolną wartość odczytu z fotorezystora, dla którego następuje wysterowanie.
 * Dla pozostałych przypadków zwraca echo.
**/
void msgHandler(Bluetooth* bluetooth);
void handleSerwoMaxUp(Bluetooth* bluetooth);
void handleSerwoMaxDown(Bluetooth* bluetooth);
void handleSerwoUp(Bluetooth* bluetooth);
void handleSerwoDown(Bluetooth* bluetooth);
void handleSetMinLDRreading(Bluetooth* bluetooth);
void handleSetMaxLDRreading(Bluetooth* bluetooth);
void handleSetUpperLDRcontrolLimit(Bluetooth* bluetooth);
void handleSetLowerLDRcontrolLimit(Bluetooth* bluetooth);
void handlePrintMinLDRreading(Bluetooth* bluetooth);
void handlePrintMaxLDRreading(Bluetooth* bluetooth);
void handlePrintUpperLDRcontrolLimit(Bluetooth* bluetooth);
void handlePrintLowerLDRcontrolLimit(Bluetooth* bluetooth);
void handleIncorrectCommand(Bluetooth* bluetooth);
void handleSetServoMaxPosition(Bluetooth* bluetooth);
void printMinLDRreading(Bluetooth* bluetooth, uint16_t ldrValue);
void printMaxReading(Bluetooth* bluetooth, uint16_t ldrValue);
void printUpperControlLimit(Bluetooth* bluetooth, uint16_t ldrValue);
void printLowerControlLimit(Bluetooth* bluetooth, uint16_t ldrValue);
void printServoMaxPosition(bluetooth, uint16_t maxPostion);

#endif /* INC_MYLIBRARY_H_ */
