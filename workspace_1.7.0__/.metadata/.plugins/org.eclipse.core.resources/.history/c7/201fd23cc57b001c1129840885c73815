#include "LDR.h"

struct _LDR {
	uint16_t messureFromLdr[NUMBER_OF_LDR_MEASURE] = {0};
	uint16_t averageMeasureFromLdr = 0;
	uint8_t ldrMeasureNumber = 1;

	uint16_t minLDRreading = 1;
	uint16_t maxLDRreading = 3000;
	uint16_t upperLDRControlLimit = 2000;
	uint16_t lowerLDRControlLimit = 500;
}LDR;
/*
uint16_t messureFromLdr[NUMBER_OF_LDR_MEASURE] = {0};
uint16_t averageMeasureFromLdr = 0;
uint8_t ldrMeasureNumber = 1;

uint16_t minLDRreading = 1;
uint16_t maxLDRreading = 3000;
uint16_t upperLDRControlLimit = 2000;
uint16_t lowerLDRControlLimit = 500;
*/

uint16_t getLightIntensity(_LDR LDR) {
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);

	uint16_t lightIntensity;
	/* Check if the continous conversion of regular channel is finished */
	if ((HAL_ADC_GetState(&hadc) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
	{
		/*##-6- Get the converted value of regular channel  ########################*/
		lightIntensity = HAL_ADC_GetValue(&hadc);
	}

	return lightIntensity;
}

void measure(_LDR LDR) {
	LDR.messureFromLdr[LDR.ldrMeasureNumber - 1] = LDR.getLightIntensity();
	LDR.ldrMeasureNumber++;

	if (LDR.measureIsAutoOfRange()) {
		LDR.ldrMeasureNumber = 1;
	}
}

bool measureIsAutoOfRange(_LDR LDR) {
	return LDR.ldrMeasureNumber > NUMBER_OF_LDR_MEASURE;
}

bool areNewMeassures(_LDR LDR) {
	return ldrMeasureNumber >= NUMBER_OF_LDR_MEASURE;
}

uint16_t getAverageMeassure(_LDR LDR) {
	LDR.averageMeasureFromLdr = 0;
	for (int i = 0; i < NUMBER_OF_LDR_MEASURE; i++) {
		LDR.averageMeasureFromLdr += LDR.messureFromLdr[i];
	}

	return (averageMeasureFromLdr/NUMBER_OF_LDR_MEASURE);
}

uint16_t convertPercentToValue(_LDR LDR, uint16_t percent) {
	uint16_t range = maxLDRreading - minLDRreading;
	return (minLDRreading + (range * percent / 100));
}

uint16_t convertLDRvalueToPercent(_LDR LDR, uint16_t ldrValue) {
	return ((ldrValue / maxLDRreading)*100);
}

bool isAboveUpperLimit(_LDR LDR) {
	return getAverageMeassure() > upperLDRControlLimit;
}

bool isBelowLowerLimit(_LDR LDR) {
	return getAverageMeassure() < lowerLDRControlLimit;
}

void setMinLDRreading(_LDR LDR, uint16_t minLDRreading_) {
	minLDRreading = minLDRreading_;
}

void setMaxLDRreading(_LDR LDR, uint16_t maxLDRreading_) {
	maxLDRreading = maxLDRreading_;
}

void setUpperLDRControlLimit(_LDR LDR, uint16_t upperLDRContolLimit_) {
	upperLDRControlLimit = upperLDRContolLimit_;
}

void setLowerLDRControlLimit(_LDR LDR, uint16_t lowerLDRControlLimit_) {
	lowerLDRControlLimit = lowerLDRControlLimit_;
}

uint16_t getMinLDRreading(_LDR LDR) {
	return minLDRreading;
}

uint16_t getMaxLDRreading(_LDR LDR) {
	return maxLDRreading;
}

uint16_t getUpperLDRControlLimit(_LDR LDR) {
	return upperLDRControlLimit;
}

uint16_t getLowerLDRControlLimit(_LDR LDR) {
	return lowerLDRControlLimit;
}

