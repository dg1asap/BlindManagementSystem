
curtain-manage-prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006720  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd0  08006bd0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bd8  08006bd8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bdc  08006bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000090  08006c70  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006c70  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f5fa  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f3  00000000  00000000  0003f6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00042fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00043fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b36  00000000  00000000  00044ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d0a  00000000  00000000  0005d9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089dcf  00000000  00000000  000736e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd4af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d64  00000000  00000000  000fd504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067c8 	.word	0x080067c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	080067c8 	.word	0x080067c8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <getLightIntensity>:
//	ldr->maxReading = 3000;
//	ldr->upperControlLimit = 2000;
//	ldr->lowerControlLimit = 500;
//}

uint16_t getLightIntensity(LDR* ldr) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80004c8:	2301      	movs	r3, #1
 80004ca:	425a      	negs	r2, r3
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <getLightIntensity+0x4c>)
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 feb5 	bl	8002240 <HAL_ADC_PollForConversion>

	uint16_t lightIntensity;
	/* Check if the continous conversion of regular channel is finished */
	if ((HAL_ADC_GetState(&hadc) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <getLightIntensity+0x4c>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fff9 	bl	80024d0 <HAL_ADC_GetState>
 80004de:	0002      	movs	r2, r0
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	401a      	ands	r2, r3
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d107      	bne.n	80004fe <getLightIntensity+0x3e>
		lightIntensity = HAL_ADC_GetValue(&hadc); /* Get the converted value of regular channel */
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <getLightIntensity+0x4c>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 ff41 	bl	8002378 <HAL_ADC_GetValue>
 80004f6:	0002      	movs	r2, r0
 80004f8:	230e      	movs	r3, #14
 80004fa:	18fb      	adds	r3, r7, r3
 80004fc:	801a      	strh	r2, [r3, #0]

	return lightIntensity;
 80004fe:	230e      	movs	r3, #14
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	881b      	ldrh	r3, [r3, #0]
}
 8000504:	0018      	movs	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	b004      	add	sp, #16
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200000ec 	.word	0x200000ec

08000510 <measure>:

void measure(LDR* ldr) {
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	ldr->messures[ldr->measureNumber - 1] = getLightIntensity(ldr);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	7b1b      	ldrb	r3, [r3, #12]
 800051c:	1e5c      	subs	r4, r3, #1
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0018      	movs	r0, r3
 8000522:	f7ff ffcd 	bl	80004c0 <getLightIntensity>
 8000526:	0003      	movs	r3, r0
 8000528:	0019      	movs	r1, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	0062      	lsls	r2, r4, #1
 800052e:	52d1      	strh	r1, [r2, r3]
	ldr->measureNumber++;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	7b1b      	ldrb	r3, [r3, #12]
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	731a      	strb	r2, [r3, #12]

	if (measureIsAutoOfRange(ldr))
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	0018      	movs	r0, r3
 8000540:	f000 f809 	bl	8000556 <measureIsAutoOfRange>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d002      	beq.n	800054e <measure+0x3e>
		ldr->measureNumber = 1;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2201      	movs	r2, #1
 800054c:	731a      	strb	r2, [r3, #12]
}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b003      	add	sp, #12
 8000554:	bd90      	pop	{r4, r7, pc}

08000556 <measureIsAutoOfRange>:

bool measureIsAutoOfRange(LDR* ldr) {
 8000556:	b580      	push	{r7, lr}
 8000558:	b082      	sub	sp, #8
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
	return ldr->measureNumber > NUMBER_OF_LDR_MEASURE;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7b1b      	ldrb	r3, [r3, #12]
 8000562:	2205      	movs	r2, #5
 8000564:	429a      	cmp	r2, r3
 8000566:	419b      	sbcs	r3, r3
 8000568:	425b      	negs	r3, r3
 800056a:	b2db      	uxtb	r3, r3
}
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bd80      	pop	{r7, pc}

08000574 <areNewMeassures>:

bool areNewMeassures(LDR* ldr) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	return ldr->measureNumber >= NUMBER_OF_LDR_MEASURE;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7b1b      	ldrb	r3, [r3, #12]
 8000580:	2204      	movs	r2, #4
 8000582:	429a      	cmp	r2, r3
 8000584:	419b      	sbcs	r3, r3
 8000586:	425b      	negs	r3, r3
 8000588:	b2db      	uxtb	r3, r3
}
 800058a:	0018      	movs	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}

08000592 <getAverageMeassure>:

uint16_t getAverageMeassure(LDR* ldr) {
 8000592:	b580      	push	{r7, lr}
 8000594:	b084      	sub	sp, #16
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
	ldr->averageMeasure = 0;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	815a      	strh	r2, [r3, #10]
	for (int i = 0; i < NUMBER_OF_LDR_MEASURE; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	e00c      	b.n	80005c0 <getAverageMeassure+0x2e>
		ldr->averageMeasure += ldr->messures[i];
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	895a      	ldrh	r2, [r3, #10]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	68f9      	ldr	r1, [r7, #12]
 80005ae:	0049      	lsls	r1, r1, #1
 80005b0:	5acb      	ldrh	r3, [r1, r3]
 80005b2:	18d3      	adds	r3, r2, r3
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	815a      	strh	r2, [r3, #10]
	for (int i = 0; i < NUMBER_OF_LDR_MEASURE; i++)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3301      	adds	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	ddef      	ble.n	80005a6 <getAverageMeassure+0x14>

	return (ldr->averageMeasure/NUMBER_OF_LDR_MEASURE);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	895b      	ldrh	r3, [r3, #10]
 80005ca:	2105      	movs	r1, #5
 80005cc:	0018      	movs	r0, r3
 80005ce:	f7ff fdad 	bl	800012c <__udivsi3>
 80005d2:	0003      	movs	r3, r0
 80005d4:	b29b      	uxth	r3, r3
}
 80005d6:	0018      	movs	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	b004      	add	sp, #16
 80005dc:	bd80      	pop	{r7, pc}

080005de <isAboveUpperLimit>:

uint16_t convertLDRvalueToPercent(LDR* ldr, uint16_t ldrValue) {
	return ((ldrValue / ldr->maxReading)*100);
}

bool isAboveUpperLimit(LDR* ldr) {
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
	return getAverageMeassure(ldr) > ldr->upperControlLimit;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff ffd2 	bl	8000592 <getAverageMeassure>
 80005ee:	0003      	movs	r3, r0
 80005f0:	001a      	movs	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	8a5b      	ldrh	r3, [r3, #18]
 80005f6:	4293      	cmp	r3, r2
 80005f8:	419b      	sbcs	r3, r3
 80005fa:	425b      	negs	r3, r3
 80005fc:	b2db      	uxtb	r3, r3
}
 80005fe:	0018      	movs	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	b002      	add	sp, #8
 8000604:	bd80      	pop	{r7, pc}

08000606 <isBelowLowerLimit>:

bool isBelowLowerLimit(LDR* ldr) {
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
	return getAverageMeassure(ldr) < ldr->lowerControlLimit;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	0018      	movs	r0, r3
 8000612:	f7ff ffbe 	bl	8000592 <getAverageMeassure>
 8000616:	0003      	movs	r3, r0
 8000618:	001a      	movs	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	8a9b      	ldrh	r3, [r3, #20]
 800061e:	429a      	cmp	r2, r3
 8000620:	419b      	sbcs	r3, r3
 8000622:	425b      	negs	r3, r3
 8000624:	b2db      	uxtb	r3, r3
}
 8000626:	0018      	movs	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}

0800062e <setMinReading>:

void setMinReading(LDR* ldr, uint16_t minReading_) {
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	000a      	movs	r2, r1
 8000638:	1cbb      	adds	r3, r7, #2
 800063a:	801a      	strh	r2, [r3, #0]
	ldr->minReading = minReading_;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1cba      	adds	r2, r7, #2
 8000640:	8812      	ldrh	r2, [r2, #0]
 8000642:	81da      	strh	r2, [r3, #14]
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b002      	add	sp, #8
 800064a:	bd80      	pop	{r7, pc}

0800064c <setMaxReading>:

void setMaxReading(LDR* ldr, uint16_t maxReading_) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	000a      	movs	r2, r1
 8000656:	1cbb      	adds	r3, r7, #2
 8000658:	801a      	strh	r2, [r3, #0]
	ldr->maxReading = maxReading_;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	1cba      	adds	r2, r7, #2
 800065e:	8812      	ldrh	r2, [r2, #0]
 8000660:	821a      	strh	r2, [r3, #16]
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}

0800066a <setUpperControlLimit>:

void setUpperControlLimit(LDR* ldr, uint16_t upperContolLimit_) {
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	000a      	movs	r2, r1
 8000674:	1cbb      	adds	r3, r7, #2
 8000676:	801a      	strh	r2, [r3, #0]
	ldr->upperControlLimit = upperContolLimit_;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	1cba      	adds	r2, r7, #2
 800067c:	8812      	ldrh	r2, [r2, #0]
 800067e:	825a      	strh	r2, [r3, #18]
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b002      	add	sp, #8
 8000686:	bd80      	pop	{r7, pc}

08000688 <setLowerControlLimit>:

void setLowerControlLimit(LDR* ldr, uint16_t lowerControlLimit_) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	000a      	movs	r2, r1
 8000692:	1cbb      	adds	r3, r7, #2
 8000694:	801a      	strh	r2, [r3, #0]
	ldr->lowerControlLimit = lowerControlLimit_;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	1cba      	adds	r2, r7, #2
 800069a:	8812      	ldrh	r2, [r2, #0]
 800069c:	829a      	strh	r2, [r3, #20]
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <getMinReading>:

uint16_t getMinReading(LDR* ldr) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
	return ldr->minReading;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	89db      	ldrh	r3, [r3, #14]
}
 80006b2:	0018      	movs	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}

080006ba <getMaxReading>:

uint16_t getMaxReading(LDR* ldr) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
	return ldr->maxReading;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	8a1b      	ldrh	r3, [r3, #16]
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}

080006ce <getUpperControlLimit>:

uint16_t getUpperControlLimit(LDR* ldr) {
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
	return ldr->upperControlLimit;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	8a5b      	ldrh	r3, [r3, #18]
}
 80006da:	0018      	movs	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <getLowerControlLimit>:

uint16_t getLowerControlLimit(LDR* ldr) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	return ldr->lowerControlLimit;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	8a9b      	ldrh	r3, [r3, #20]
}
 80006ee:	0018      	movs	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <steer>:
#include "Servo.h"

Servo servo = {3, 3, 3};

void steer(Servo* servo) {
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	if (canRollDown(servo))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	0018      	movs	r0, r3
 8000702:	f000 f8d4 	bl	80008ae <canRollDown>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d004      	beq.n	8000714 <steer+0x1e>
		rollDown(servo);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	0018      	movs	r0, r3
 800070e:	f000 f95b 	bl	80009c8 <rollDown>
	else if (canRollUp(servo))
		rollUp(servo);
	else if (canStopRolling(servo))
		stopRolling(servo);
}
 8000712:	e014      	b.n	800073e <steer+0x48>
	else if (canRollUp(servo))
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	0018      	movs	r0, r3
 8000718:	f000 f8a9 	bl	800086e <canRollUp>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d004      	beq.n	800072a <steer+0x34>
		rollUp(servo);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	0018      	movs	r0, r3
 8000724:	f000 f966 	bl	80009f4 <rollUp>
}
 8000728:	e009      	b.n	800073e <steer+0x48>
	else if (canStopRolling(servo))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	0018      	movs	r0, r3
 800072e:	f000 f8de 	bl	80008ee <canStopRolling>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d003      	beq.n	800073e <steer+0x48>
		stopRolling(servo);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	0018      	movs	r0, r3
 800073a:	f000 f971 	bl	8000a20 <stopRolling>
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}

08000746 <increasePositionBy>:

void increasePositionBy(Servo* servo, uint16_t length) {
 8000746:	b590      	push	{r4, r7, lr}
 8000748:	b085      	sub	sp, #20
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	000a      	movs	r2, r1
 8000750:	1cbb      	adds	r3, r7, #2
 8000752:	801a      	strh	r2, [r3, #0]
	uint16_t newPosition_ = length + servo->newPosition;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	8899      	ldrh	r1, [r3, #4]
 8000758:	240e      	movs	r4, #14
 800075a:	193b      	adds	r3, r7, r4
 800075c:	1cba      	adds	r2, r7, #2
 800075e:	8812      	ldrh	r2, [r2, #0]
 8000760:	188a      	adds	r2, r1, r2
 8000762:	801a      	strh	r2, [r3, #0]
	if (canSetPosition(servo, newPosition_))
 8000764:	193b      	adds	r3, r7, r4
 8000766:	881a      	ldrh	r2, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f000 f80d 	bl	800078c <canSetPosition>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d006      	beq.n	8000784 <increasePositionBy+0x3e>
		setPosition(servo, newPosition_);
 8000776:	193b      	adds	r3, r7, r4
 8000778:	881a      	ldrh	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	0011      	movs	r1, r2
 800077e:	0018      	movs	r0, r3
 8000780:	f000 f82d 	bl	80007de <setPosition>
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b005      	add	sp, #20
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <canSetPosition>:

bool canSetPosition(Servo* servo, uint16_t newPosition_) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	000a      	movs	r2, r1
 8000796:	1cbb      	adds	r3, r7, #2
 8000798:	801a      	strh	r2, [r3, #0]
	return !isShorterThan(servo, newPosition_) && isPositiveLength(servo, newPosition_);
 800079a:	1cbb      	adds	r3, r7, #2
 800079c:	881a      	ldrh	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 f8f0 	bl	8000988 <isShorterThan>
 80007a8:	0003      	movs	r3, r0
 80007aa:	001a      	movs	r2, r3
 80007ac:	2301      	movs	r3, #1
 80007ae:	4053      	eors	r3, r2
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d00a      	beq.n	80007cc <canSetPosition+0x40>
 80007b6:	1cbb      	adds	r3, r7, #2
 80007b8:	881a      	ldrh	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 f8f5 	bl	80009ae <isPositiveLength>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <canSetPosition+0x40>
 80007c8:	2301      	movs	r3, #1
 80007ca:	e000      	b.n	80007ce <canSetPosition+0x42>
 80007cc:	2300      	movs	r3, #0
 80007ce:	1c1a      	adds	r2, r3, #0
 80007d0:	2301      	movs	r3, #1
 80007d2:	4013      	ands	r3, r2
 80007d4:	b2db      	uxtb	r3, r3
}
 80007d6:	0018      	movs	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}

080007de <setPosition>:

void setPosition(Servo* servo, uint16_t newPosition_) {
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	000a      	movs	r2, r1
 80007e8:	1cbb      	adds	r3, r7, #2
 80007ea:	801a      	strh	r2, [r3, #0]
	if (canSetPosition(servo, newPosition_))
 80007ec:	1cbb      	adds	r3, r7, #2
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f7ff ffc9 	bl	800078c <canSetPosition>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d003      	beq.n	8000806 <setPosition+0x28>
		servo->newPosition = newPosition_;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	1cba      	adds	r2, r7, #2
 8000802:	8812      	ldrh	r2, [r2, #0]
 8000804:	809a      	strh	r2, [r3, #4]
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}

0800080e <setPositionToMax>:

void setPositionToMax(Servo* servo) {
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	servo->newPosition = servo->maxPosition;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	881a      	ldrh	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	809a      	strh	r2, [r3, #4]
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}

08000826 <setPositionToMin>:

void setPositionToMin(Servo* servo) {
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
	servo->newPosition = 0;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	809a      	strh	r2, [r3, #4]
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b002      	add	sp, #8
 800083a:	bd80      	pop	{r7, pc}

0800083c <setMaxPositon>:

void setMaxPositon(Servo* servo, uint16_t maxPosition_) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	000a      	movs	r2, r1
 8000846:	1cbb      	adds	r3, r7, #2
 8000848:	801a      	strh	r2, [r3, #0]
	servo->maxPosition = maxPosition_;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	1cba      	adds	r2, r7, #2
 800084e:	8812      	ldrh	r2, [r2, #0]
 8000850:	801a      	strh	r2, [r3, #0]
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bd80      	pop	{r7, pc}

0800085a <getMaxPositon>:

uint16_t getMaxPositon(Servo* servo) {
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	return servo->maxPosition;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	881b      	ldrh	r3, [r3, #0]
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}

0800086e <canRollUp>:

bool canRollUp(Servo* servo) {
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return isBelowNewPosition(servo) && (!isRolledMaxUp(servo));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	0018      	movs	r0, r3
 800087a:	f000 f865 	bl	8000948 <isBelowNewPosition>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d00c      	beq.n	800089c <canRollUp+0x2e>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	0018      	movs	r0, r3
 8000886:	f000 f842 	bl	800090e <isRolledMaxUp>
 800088a:	0003      	movs	r3, r0
 800088c:	001a      	movs	r2, r3
 800088e:	2301      	movs	r3, #1
 8000890:	4053      	eors	r3, r2
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <canRollUp+0x2e>
 8000898:	2301      	movs	r3, #1
 800089a:	e000      	b.n	800089e <canRollUp+0x30>
 800089c:	2300      	movs	r3, #0
 800089e:	1c1a      	adds	r2, r3, #0
 80008a0:	2301      	movs	r3, #1
 80008a2:	4013      	ands	r3, r2
 80008a4:	b2db      	uxtb	r3, r3
}
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b002      	add	sp, #8
 80008ac:	bd80      	pop	{r7, pc}

080008ae <canRollDown>:

bool canRollDown(Servo* servo) {
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
	return isAboveNewPosition(servo) && (!isRolledMaxDown(servo));
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 f855 	bl	8000968 <isAboveNewPosition>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d00c      	beq.n	80008dc <canRollDown+0x2e>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 f832 	bl	800092e <isRolledMaxDown>
 80008ca:	0003      	movs	r3, r0
 80008cc:	001a      	movs	r2, r3
 80008ce:	2301      	movs	r3, #1
 80008d0:	4053      	eors	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <canRollDown+0x2e>
 80008d8:	2301      	movs	r3, #1
 80008da:	e000      	b.n	80008de <canRollDown+0x30>
 80008dc:	2300      	movs	r3, #0
 80008de:	1c1a      	adds	r2, r3, #0
 80008e0:	2301      	movs	r3, #1
 80008e2:	4013      	ands	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
}
 80008e6:	0018      	movs	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b002      	add	sp, #8
 80008ec:	bd80      	pop	{r7, pc}

080008ee <canStopRolling>:

bool canStopRolling(Servo* servo) {
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	return servo->currentPositon == servo->newPosition;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	885a      	ldrh	r2, [r3, #2]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	889b      	ldrh	r3, [r3, #4]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	425a      	negs	r2, r3
 8000902:	4153      	adcs	r3, r2
 8000904:	b2db      	uxtb	r3, r3
}
 8000906:	0018      	movs	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}

0800090e <isRolledMaxUp>:

bool isRolledMaxUp(Servo* servo) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	return !(servo->currentPositon < servo->maxPosition);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	8859      	ldrh	r1, [r3, #2]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	881a      	ldrh	r2, [r3, #0]
 800091e:	2300      	movs	r3, #0
 8000920:	4291      	cmp	r1, r2
 8000922:	415b      	adcs	r3, r3
 8000924:	b2db      	uxtb	r3, r3
}
 8000926:	0018      	movs	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}

0800092e <isRolledMaxDown>:

bool isRolledMaxDown(Servo* servo) {
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
	return !(servo->currentPositon > 0);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	885b      	ldrh	r3, [r3, #2]
 800093a:	425a      	negs	r2, r3
 800093c:	4153      	adcs	r3, r2
 800093e:	b2db      	uxtb	r3, r3
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}

08000948 <isBelowNewPosition>:

bool isBelowNewPosition(Servo* servo) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	return servo->currentPositon < servo->newPosition;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	885a      	ldrh	r2, [r3, #2]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	889b      	ldrh	r3, [r3, #4]
 8000958:	429a      	cmp	r2, r3
 800095a:	419b      	sbcs	r3, r3
 800095c:	425b      	negs	r3, r3
 800095e:	b2db      	uxtb	r3, r3
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <isAboveNewPosition>:

bool isAboveNewPosition(Servo* servo) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	return servo->currentPositon > servo->newPosition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	885b      	ldrh	r3, [r3, #2]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	8892      	ldrh	r2, [r2, #4]
 8000978:	429a      	cmp	r2, r3
 800097a:	419b      	sbcs	r3, r3
 800097c:	425b      	negs	r3, r3
 800097e:	b2db      	uxtb	r3, r3
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	b002      	add	sp, #8
 8000986:	bd80      	pop	{r7, pc}

08000988 <isShorterThan>:

bool isShorterThan(Servo* servo, uint16_t blindLength) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	000a      	movs	r2, r1
 8000992:	1cbb      	adds	r3, r7, #2
 8000994:	801a      	strh	r2, [r3, #0]
	return blindLength > servo->maxPosition;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	1cbb      	adds	r3, r7, #2
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	429a      	cmp	r2, r3
 80009a0:	419b      	sbcs	r3, r3
 80009a2:	425b      	negs	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
}
 80009a6:	0018      	movs	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b002      	add	sp, #8
 80009ac:	bd80      	pop	{r7, pc}

080009ae <isPositiveLength>:

bool isPositiveLength(Servo* servo, uint16_t blindLength) {
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	000a      	movs	r2, r1
 80009b8:	1cbb      	adds	r3, r7, #2
 80009ba:	801a      	strh	r2, [r3, #0]
	return blindLength >= 0;
 80009bc:	2301      	movs	r3, #1
}
 80009be:	0018      	movs	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <rollDown>:

void rollDown(Servo* servo) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1394);
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <rollDown+0x24>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <rollDown+0x28>)
 80009d6:	635a      	str	r2, [r3, #52]	; 0x34
	servo->currentPositon--;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	885b      	ldrh	r3, [r3, #2]
 80009dc:	3b01      	subs	r3, #1
 80009de:	b29a      	uxth	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	805a      	strh	r2, [r3, #2]
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b002      	add	sp, #8
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000148 	.word	0x20000148
 80009f0:	00000572 	.word	0x00000572

080009f4 <rollUp>:

void rollUp(Servo* servo) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1568);
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <rollUp+0x28>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	22c4      	movs	r2, #196	; 0xc4
 8000a02:	00d2      	lsls	r2, r2, #3
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
	servo->currentPositon++;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	885b      	ldrh	r3, [r3, #2]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	805a      	strh	r2, [r3, #2]
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b002      	add	sp, #8
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	20000148 	.word	0x20000148

08000a20 <stopRolling>:

void stopRolling() {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
//	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1474);
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1460);
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <stopRolling+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <stopRolling+0x18>)
 8000a2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	20000148 	.word	0x20000148
 8000a38:	000005b4 	.word	0x000005b4

08000a3c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a42:	003b      	movs	r3, r7
 8000a44:	0018      	movs	r0, r3
 8000a46:	2308      	movs	r3, #8
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f005 f9cb 	bl	8005de6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a50:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a52:	4a33      	ldr	r2, [pc, #204]	; (8000b20 <MX_ADC_Init+0xe4>)
 8000a54:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000a56:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000a5c:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a5e:	22c0      	movs	r2, #192	; 0xc0
 8000a60:	0612      	lsls	r2, r2, #24
 8000a62:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a7e:	2220      	movs	r2, #32
 8000a80:	2101      	movs	r1, #1
 8000a82:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a86:	2221      	movs	r2, #33	; 0x21
 8000a88:	2100      	movs	r1, #0
 8000a8a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a94:	22c2      	movs	r2, #194	; 0xc2
 8000a96:	32ff      	adds	r2, #255	; 0xff
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000a9c:	222c      	movs	r2, #44	; 0x2c
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f001 f9f4 	bl	8001eb0 <HAL_ADC_Init>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000acc:	f000 fd6a 	bl	80015a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <MX_ADC_Init+0xe8>)
 8000ad4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	0152      	lsls	r2, r2, #5
 8000adc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ade:	003a      	movs	r2, r7
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 fc53 	bl	8002390 <HAL_ADC_ConfigChannel>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000aee:	f000 fd59 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f001 fd7c 	bl	80025f4 <HAL_ADCEx_Calibration_Start>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC_Init+0xc8>
  {
    Error_Handler();
 8000b00:	f000 fd50 	bl	80015a4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <MX_ADC_Init+0xe0>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 fb46 	bl	8002198 <HAL_ADC_Start>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC_Init+0xd8>
  {
    /* Start Conversation Error */
    Error_Handler();
 8000b10:	f000 fd48 	bl	80015a4 <Error_Handler>
   }

  /* USER CODE END ADC_Init 2 */

}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000ec 	.word	0x200000ec
 8000b20:	40012400 	.word	0x40012400
 8000b24:	38004000 	.word	0x38004000

08000b28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	240c      	movs	r4, #12
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	0018      	movs	r0, r3
 8000b36:	2314      	movs	r3, #20
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f005 f953 	bl	8005de6 <memset>
  if(adcHandle->Instance==ADC1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <HAL_ADC_MspInit+0x70>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d121      	bne.n	8000b8e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0089      	lsls	r1, r1, #2
 8000b54:	430a      	orrs	r2, r1
 8000b56:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b5e:	2104      	movs	r1, #4
 8000b60:	430a      	orrs	r2, r1
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b68:	2204      	movs	r2, #4
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2210      	movs	r2, #16
 8000b74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2203      	movs	r2, #3
 8000b7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_ADC_MspInit+0x78>)
 8000b86:	0019      	movs	r1, r3
 8000b88:	0010      	movs	r0, r2
 8000b8a:	f001 ff37 	bl	80029fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b009      	add	sp, #36	; 0x24
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	40012400 	.word	0x40012400
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	50000800 	.word	0x50000800

08000ba4 <msgHandler>:
#include "bluetooth.h"

Bluetooth bluetooth = {{0}, 0, 0};

void msgHandler(Bluetooth* bluetooth) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if (strncmp(bluetooth->buffer, "SERWO MAX UP", strlen("SERWO MAX UP")) == 0)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4965      	ldr	r1, [pc, #404]	; (8000d44 <msgHandler+0x1a0>)
 8000bb0:	220c      	movs	r2, #12
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f005 f940 	bl	8005e38 <strncmp>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d104      	bne.n	8000bc6 <msgHandler+0x22>
		handleSerwoMaxUp(bluetooth);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 f8dc 	bl	8000d7c <handleSerwoMaxUp>
 8000bc4:	e0ac      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "SERWO MAX DOWN", strlen("SERWO MAX DOWN")) == 0)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	495f      	ldr	r1, [pc, #380]	; (8000d48 <msgHandler+0x1a4>)
 8000bca:	220e      	movs	r2, #14
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f005 f933 	bl	8005e38 <strncmp>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d104      	bne.n	8000be0 <msgHandler+0x3c>
		handleSerwoMaxDown(bluetooth);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 f8e9 	bl	8000db0 <handleSerwoMaxDown>
 8000bde:	e09f      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "SERWO UP", strlen("SERWO UP")) == 0)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	495a      	ldr	r1, [pc, #360]	; (8000d4c <msgHandler+0x1a8>)
 8000be4:	2208      	movs	r2, #8
 8000be6:	0018      	movs	r0, r3
 8000be8:	f005 f926 	bl	8005e38 <strncmp>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d104      	bne.n	8000bfa <msgHandler+0x56>
		handleSerwoUp(bluetooth);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f8f6 	bl	8000de4 <handleSerwoUp>
 8000bf8:	e092      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "SERWO DOWN", strlen("SERWO DOWN")) == 0)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4954      	ldr	r1, [pc, #336]	; (8000d50 <msgHandler+0x1ac>)
 8000bfe:	220a      	movs	r2, #10
 8000c00:	0018      	movs	r0, r3
 8000c02:	f005 f919 	bl	8005e38 <strncmp>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d104      	bne.n	8000c14 <msgHandler+0x70>
		handleSerwoDown(bluetooth);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 f903 	bl	8000e18 <handleSerwoDown>
 8000c12:	e085      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "SET MIN LDR READING xxxx", strlen("SET MIN LDR READING")) == 0)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	494f      	ldr	r1, [pc, #316]	; (8000d54 <msgHandler+0x1b0>)
 8000c18:	2213      	movs	r2, #19
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f005 f90c 	bl	8005e38 <strncmp>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d104      	bne.n	8000c2e <msgHandler+0x8a>
		handleSetMinLDRreading(bluetooth);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 f914 	bl	8000e54 <handleSetMinLDRreading>
 8000c2c:	e078      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "SET MAX LDR READING xxxx", strlen("SET MAX LDR READING")) == 0)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4949      	ldr	r1, [pc, #292]	; (8000d58 <msgHandler+0x1b4>)
 8000c32:	2213      	movs	r2, #19
 8000c34:	0018      	movs	r0, r3
 8000c36:	f005 f8ff 	bl	8005e38 <strncmp>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d104      	bne.n	8000c48 <msgHandler+0xa4>
		handleSetMaxLDRreading(bluetooth);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 f92b 	bl	8000e9c <handleSetMaxLDRreading>
 8000c46:	e06b      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "SET UPPER LDR CONTROL LIMIT xxxx", strlen("SET UPPER LDR CONTROL LIMIT")) == 0)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4944      	ldr	r1, [pc, #272]	; (8000d5c <msgHandler+0x1b8>)
 8000c4c:	221b      	movs	r2, #27
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f005 f8f2 	bl	8005e38 <strncmp>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d104      	bne.n	8000c62 <msgHandler+0xbe>
		handleSetUpperLDRcontrolLimit(bluetooth);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 f942 	bl	8000ee4 <handleSetUpperLDRcontrolLimit>
 8000c60:	e05e      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "SET LOWER LDR CONTROL LIMIT xxxx", strlen("SET LOWER LDR CONTROL LIMIT")) == 0)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	493e      	ldr	r1, [pc, #248]	; (8000d60 <msgHandler+0x1bc>)
 8000c66:	221b      	movs	r2, #27
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f005 f8e5 	bl	8005e38 <strncmp>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d104      	bne.n	8000c7c <msgHandler+0xd8>
		handleSetLowerLDRcontrolLimit(bluetooth);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	0018      	movs	r0, r3
 8000c76:	f000 f959 	bl	8000f2c <handleSetLowerLDRcontrolLimit>
 8000c7a:	e051      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "SET SERVO MAX POSITION xxx", strlen("PRINT SERVO MAX POSITON")) == 0)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4939      	ldr	r1, [pc, #228]	; (8000d64 <msgHandler+0x1c0>)
 8000c80:	2217      	movs	r2, #23
 8000c82:	0018      	movs	r0, r3
 8000c84:	f005 f8d8 	bl	8005e38 <strncmp>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d104      	bne.n	8000c96 <msgHandler+0xf2>
		handleSetServoMaxPosition(bluetooth);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 f9d8 	bl	8001044 <handleSetServoMaxPosition>
 8000c94:	e044      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "PRINT MIN LDR READING", strlen("PRINT MIN LDR READING")) == 0)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4933      	ldr	r1, [pc, #204]	; (8000d68 <msgHandler+0x1c4>)
 8000c9a:	2215      	movs	r2, #21
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f005 f8cb 	bl	8005e38 <strncmp>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d104      	bne.n	8000cb0 <msgHandler+0x10c>
		handlePrintMinLDRreading(bluetooth);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f000 f963 	bl	8000f74 <handlePrintMinLDRreading>
 8000cae:	e037      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "PRINT MAX LDR READING", strlen("PRINT MAX LDR READING")) == 0)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	492e      	ldr	r1, [pc, #184]	; (8000d6c <msgHandler+0x1c8>)
 8000cb4:	2215      	movs	r2, #21
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f005 f8be 	bl	8005e38 <strncmp>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d104      	bne.n	8000cca <msgHandler+0x126>
		handlePrintMaxLDRreading(bluetooth);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 f970 	bl	8000fa8 <handlePrintMaxLDRreading>
 8000cc8:	e02a      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "PRINT UPPER LDR CONTROL LIMIT", strlen("PRINT UPPER LDR CONTROL LIMIT")) == 0)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4928      	ldr	r1, [pc, #160]	; (8000d70 <msgHandler+0x1cc>)
 8000cce:	221d      	movs	r2, #29
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f005 f8b1 	bl	8005e38 <strncmp>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d104      	bne.n	8000ce4 <msgHandler+0x140>
		handlePrintUpperLDRcontrolLimit(bluetooth);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 f97d 	bl	8000fdc <handlePrintUpperLDRcontrolLimit>
 8000ce2:	e01d      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "PRINT LOWER LDR CONTROL LIMIT", strlen("PRINT LOWER LDR CONTROL LIMIT")) == 0)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4923      	ldr	r1, [pc, #140]	; (8000d74 <msgHandler+0x1d0>)
 8000ce8:	221d      	movs	r2, #29
 8000cea:	0018      	movs	r0, r3
 8000cec:	f005 f8a4 	bl	8005e38 <strncmp>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d104      	bne.n	8000cfe <msgHandler+0x15a>
		handlePrintLowerLDRcontrolLimit(bluetooth);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 f98a 	bl	8001010 <handlePrintLowerLDRcontrolLimit>
 8000cfc:	e010      	b.n	8000d20 <msgHandler+0x17c>
	else if (strncmp(bluetooth->buffer, "PRINT SERVO MAX POSITION", strlen("PRINT SERVO MAX POSITON")) == 0)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	491d      	ldr	r1, [pc, #116]	; (8000d78 <msgHandler+0x1d4>)
 8000d02:	2217      	movs	r2, #23
 8000d04:	0018      	movs	r0, r3
 8000d06:	f005 f897 	bl	8005e38 <strncmp>
 8000d0a:	1e03      	subs	r3, r0, #0
 8000d0c:	d104      	bne.n	8000d18 <msgHandler+0x174>
		handlePrintServoMaxPosition(bluetooth);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	0018      	movs	r0, r3
 8000d12:	f000 f9bb 	bl	800108c <handlePrintServoMaxPosition>
 8000d16:	e003      	b.n	8000d20 <msgHandler+0x17c>
	else
		handleIncorrectCommand(bluetooth);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 f9d0 	bl	80010c0 <handleIncorrectCommand>

	memset(bluetooth->buffer, 0, sizeof(bluetooth->buffer));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2232      	movs	r2, #50	; 0x32
 8000d24:	2100      	movs	r1, #0
 8000d26:	0018      	movs	r0, r3
 8000d28:	f005 f85d 	bl	8005de6 <memset>
	bluetooth->buffer_index = 0;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2232      	movs	r2, #50	; 0x32
 8000d30:	2100      	movs	r1, #0
 8000d32:	5499      	strb	r1, [r3, r2]
	bluetooth->timer_count = 0;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2233      	movs	r2, #51	; 0x33
 8000d38:	2100      	movs	r1, #0
 8000d3a:	5499      	strb	r1, [r3, r2]
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	080067e0 	.word	0x080067e0
 8000d48:	080067f0 	.word	0x080067f0
 8000d4c:	08006800 	.word	0x08006800
 8000d50:	0800680c 	.word	0x0800680c
 8000d54:	08006818 	.word	0x08006818
 8000d58:	08006834 	.word	0x08006834
 8000d5c:	08006850 	.word	0x08006850
 8000d60:	08006874 	.word	0x08006874
 8000d64:	08006898 	.word	0x08006898
 8000d68:	080068b4 	.word	0x080068b4
 8000d6c:	080068cc 	.word	0x080068cc
 8000d70:	080068e4 	.word	0x080068e4
 8000d74:	08006904 	.word	0x08006904
 8000d78:	08006924 	.word	0x08006924

08000d7c <handleSerwoMaxUp>:

void handleSerwoMaxUp(Bluetooth* bluetooth) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	setPositionToMax(&servo);
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <handleSerwoMaxUp+0x28>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fd41 	bl	800080e <setPositionToMax>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going up to min.\n", strlen("Servo going up to min.\n"), 500);
 8000d8c:	23fa      	movs	r3, #250	; 0xfa
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4905      	ldr	r1, [pc, #20]	; (8000da8 <handleSerwoMaxUp+0x2c>)
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <handleSerwoMaxUp+0x30>)
 8000d94:	2217      	movs	r2, #23
 8000d96:	f003 fe37 	bl	8004a08 <HAL_UART_Transmit>
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b002      	add	sp, #8
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000018 	.word	0x20000018
 8000da8:	08006940 	.word	0x08006940
 8000dac:	20000248 	.word	0x20000248

08000db0 <handleSerwoMaxDown>:

void handleSerwoMaxDown(Bluetooth* bluetooth) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	setPositionToMin(&servo);
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <handleSerwoMaxDown+0x28>)
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff fd33 	bl	8000826 <setPositionToMin>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going down to max.\n", strlen("Servo going down to max.\n"), 500);
 8000dc0:	23fa      	movs	r3, #250	; 0xfa
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4905      	ldr	r1, [pc, #20]	; (8000ddc <handleSerwoMaxDown+0x2c>)
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <handleSerwoMaxDown+0x30>)
 8000dc8:	2219      	movs	r2, #25
 8000dca:	f003 fe1d 	bl	8004a08 <HAL_UART_Transmit>
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	20000018 	.word	0x20000018
 8000ddc:	08006958 	.word	0x08006958
 8000de0:	20000248 	.word	0x20000248

08000de4 <handleSerwoUp>:

void handleSerwoUp(Bluetooth* bluetooth) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	increasePositionBy(&servo, 1);
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <handleSerwoUp+0x28>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff fca8 	bl	8000746 <increasePositionBy>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going up by 1.\n", strlen("Servo going up by 1.\n"), 500);
 8000df6:	23fa      	movs	r3, #250	; 0xfa
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4905      	ldr	r1, [pc, #20]	; (8000e10 <handleSerwoUp+0x2c>)
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <handleSerwoUp+0x30>)
 8000dfe:	2215      	movs	r2, #21
 8000e00:	f003 fe02 	bl	8004a08 <HAL_UART_Transmit>
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b002      	add	sp, #8
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000018 	.word	0x20000018
 8000e10:	08006974 	.word	0x08006974
 8000e14:	20000248 	.word	0x20000248

08000e18 <handleSerwoDown>:

void handleSerwoDown(Bluetooth* bluetooth) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	increasePositionBy(&servo, -1);
 8000e20:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <handleSerwoDown+0x2c>)
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <handleSerwoDown+0x30>)
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff fc8d 	bl	8000746 <increasePositionBy>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going down by 1.\n", strlen("Servo going down by 1.\n"), 500);
 8000e2c:	23fa      	movs	r3, #250	; 0xfa
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4906      	ldr	r1, [pc, #24]	; (8000e4c <handleSerwoDown+0x34>)
 8000e32:	4807      	ldr	r0, [pc, #28]	; (8000e50 <handleSerwoDown+0x38>)
 8000e34:	2217      	movs	r2, #23
 8000e36:	f003 fde7 	bl	8004a08 <HAL_UART_Transmit>
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	0000ffff 	.word	0x0000ffff
 8000e48:	20000018 	.word	0x20000018
 8000e4c:	0800698c 	.word	0x0800698c
 8000e50:	20000248 	.word	0x20000248

08000e54 <handleSetMinLDRreading>:

void handleSetMinLDRreading(Bluetooth* bluetooth) {
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	uint16_t ldrValue = getLastWordAsInt(bluetooth->buffer);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	250e      	movs	r5, #14
 8000e60:	197c      	adds	r4, r7, r5
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 fba3 	bl	80015ae <getLastWordAsInt>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	8023      	strh	r3, [r4, #0]
	setMinReading(&ldr, ldrValue);
 8000e6c:	197b      	adds	r3, r7, r5
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <handleSetMinLDRreading+0x3c>)
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff fbda 	bl	800062e <setMinReading>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Operation ended sucessful\n", strlen("Operation ended sucessful\n"), 500);
 8000e7a:	23fa      	movs	r3, #250	; 0xfa
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4905      	ldr	r1, [pc, #20]	; (8000e94 <handleSetMinLDRreading+0x40>)
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <handleSetMinLDRreading+0x44>)
 8000e82:	221a      	movs	r2, #26
 8000e84:	f003 fdc0 	bl	8004a08 <HAL_UART_Transmit>
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b004      	add	sp, #16
 8000e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	080069a4 	.word	0x080069a4
 8000e98:	20000248 	.word	0x20000248

08000e9c <handleSetMaxLDRreading>:

void handleSetMaxLDRreading(Bluetooth* bluetooth) {
 8000e9c:	b5b0      	push	{r4, r5, r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	uint16_t ldrValue = getLastWordAsInt(bluetooth->buffer);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	250e      	movs	r5, #14
 8000ea8:	197c      	adds	r4, r7, r5
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 fb7f 	bl	80015ae <getLastWordAsInt>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	8023      	strh	r3, [r4, #0]
	setMaxReading(&ldr, ldrValue);
 8000eb4:	197b      	adds	r3, r7, r5
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <handleSetMaxLDRreading+0x3c>)
 8000eba:	0011      	movs	r1, r2
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff fbc5 	bl	800064c <setMaxReading>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Operation ended sucessful\n", strlen("Operation ended sucessful\n"), 500);
 8000ec2:	23fa      	movs	r3, #250	; 0xfa
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4905      	ldr	r1, [pc, #20]	; (8000edc <handleSetMaxLDRreading+0x40>)
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <handleSetMaxLDRreading+0x44>)
 8000eca:	221a      	movs	r2, #26
 8000ecc:	f003 fd9c 	bl	8004a08 <HAL_UART_Transmit>
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b004      	add	sp, #16
 8000ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	080069a4 	.word	0x080069a4
 8000ee0:	20000248 	.word	0x20000248

08000ee4 <handleSetUpperLDRcontrolLimit>:

void handleSetUpperLDRcontrolLimit(Bluetooth* bluetooth) {
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	uint16_t ldrValue = getLastWordAsInt(bluetooth->buffer);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	250e      	movs	r5, #14
 8000ef0:	197c      	adds	r4, r7, r5
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 fb5b 	bl	80015ae <getLastWordAsInt>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	8023      	strh	r3, [r4, #0]
	setUpperControlLimit(&ldr, ldrValue);
 8000efc:	197b      	adds	r3, r7, r5
 8000efe:	881a      	ldrh	r2, [r3, #0]
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <handleSetUpperLDRcontrolLimit+0x3c>)
 8000f02:	0011      	movs	r1, r2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff fbb0 	bl	800066a <setUpperControlLimit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Operation ended sucessful\n", strlen("Operation ended sucessful\n"), 500);
 8000f0a:	23fa      	movs	r3, #250	; 0xfa
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4905      	ldr	r1, [pc, #20]	; (8000f24 <handleSetUpperLDRcontrolLimit+0x40>)
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <handleSetUpperLDRcontrolLimit+0x44>)
 8000f12:	221a      	movs	r2, #26
 8000f14:	f003 fd78 	bl	8004a08 <HAL_UART_Transmit>
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b004      	add	sp, #16
 8000f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	080069a4 	.word	0x080069a4
 8000f28:	20000248 	.word	0x20000248

08000f2c <handleSetLowerLDRcontrolLimit>:

void handleSetLowerLDRcontrolLimit(Bluetooth* bluetooth) {
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	uint16_t ldrValue = getLastWordAsInt(bluetooth->buffer);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	250e      	movs	r5, #14
 8000f38:	197c      	adds	r4, r7, r5
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 fb37 	bl	80015ae <getLastWordAsInt>
 8000f40:	0003      	movs	r3, r0
 8000f42:	8023      	strh	r3, [r4, #0]
	setLowerControlLimit(&ldr, ldrValue);
 8000f44:	197b      	adds	r3, r7, r5
 8000f46:	881a      	ldrh	r2, [r3, #0]
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <handleSetLowerLDRcontrolLimit+0x3c>)
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff fb9b 	bl	8000688 <setLowerControlLimit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Operation ended sucessful\n", strlen("Operation ended sucessful\n"), 500);
 8000f52:	23fa      	movs	r3, #250	; 0xfa
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4905      	ldr	r1, [pc, #20]	; (8000f6c <handleSetLowerLDRcontrolLimit+0x40>)
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <handleSetLowerLDRcontrolLimit+0x44>)
 8000f5a:	221a      	movs	r2, #26
 8000f5c:	f003 fd54 	bl	8004a08 <HAL_UART_Transmit>
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	080069a4 	.word	0x080069a4
 8000f70:	20000248 	.word	0x20000248

08000f74 <handlePrintMinLDRreading>:

void handlePrintMinLDRreading(Bluetooth* bluetooth) {
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	uint16_t ldrValue = getMinReading(&ldr);
 8000f7c:	250e      	movs	r5, #14
 8000f7e:	197c      	adds	r4, r7, r5
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <handlePrintMinLDRreading+0x30>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff fb8f 	bl	80006a6 <getMinReading>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	8023      	strh	r3, [r4, #0]
	printMinLDRreading(bluetooth, ldrValue);
 8000f8c:	197b      	adds	r3, r7, r5
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 f8b9 	bl	800110c <printMinLDRreading>
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b004      	add	sp, #16
 8000fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	20000000 	.word	0x20000000

08000fa8 <handlePrintMaxLDRreading>:

void handlePrintMaxLDRreading(Bluetooth* bluetooth) {
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	uint16_t ldrValue = getMaxReading(&ldr);
 8000fb0:	250e      	movs	r5, #14
 8000fb2:	197c      	adds	r4, r7, r5
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <handlePrintMaxLDRreading+0x30>)
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff fb7f 	bl	80006ba <getMaxReading>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	8023      	strh	r3, [r4, #0]
	printMaxReading(bluetooth, ldrValue);
 8000fc0:	197b      	adds	r3, r7, r5
 8000fc2:	881a      	ldrh	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 f8d3 	bl	8001174 <printMaxReading>
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b004      	add	sp, #16
 8000fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	20000000 	.word	0x20000000

08000fdc <handlePrintUpperLDRcontrolLimit>:

void handlePrintUpperLDRcontrolLimit(Bluetooth* bluetooth) {
 8000fdc:	b5b0      	push	{r4, r5, r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	uint16_t ldrValue = getUpperControlLimit(&ldr);
 8000fe4:	250e      	movs	r5, #14
 8000fe6:	197c      	adds	r4, r7, r5
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <handlePrintUpperLDRcontrolLimit+0x30>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff fb6f 	bl	80006ce <getUpperControlLimit>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	8023      	strh	r3, [r4, #0]
	printUpperControlLimit(bluetooth, ldrValue);
 8000ff4:	197b      	adds	r3, r7, r5
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f000 f8ed 	bl	80011dc <printUpperControlLimit>
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bdb0      	pop	{r4, r5, r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	20000000 	.word	0x20000000

08001010 <handlePrintLowerLDRcontrolLimit>:

void handlePrintLowerLDRcontrolLimit(Bluetooth* bluetooth) {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	uint16_t ldrValue = getLowerControlLimit(&ldr);
 8001018:	250e      	movs	r5, #14
 800101a:	197c      	adds	r4, r7, r5
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <handlePrintLowerLDRcontrolLimit+0x30>)
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff fb5f 	bl	80006e2 <getLowerControlLimit>
 8001024:	0003      	movs	r3, r0
 8001026:	8023      	strh	r3, [r4, #0]
	printLowerControlLimit(bluetooth, ldrValue);
 8001028:	197b      	adds	r3, r7, r5
 800102a:	881a      	ldrh	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f000 f907 	bl	8001244 <printLowerControlLimit>
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bdb0      	pop	{r4, r5, r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	20000000 	.word	0x20000000

08001044 <handleSetServoMaxPosition>:

void handleSetServoMaxPosition(Bluetooth* bluetooth) {
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	uint16_t newMaxPosition_ = getLastWordAsInt(bluetooth->buffer);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	250e      	movs	r5, #14
 8001050:	197c      	adds	r4, r7, r5
 8001052:	0018      	movs	r0, r3
 8001054:	f000 faab 	bl	80015ae <getLastWordAsInt>
 8001058:	0003      	movs	r3, r0
 800105a:	8023      	strh	r3, [r4, #0]
	setMaxPositon(&servo, newMaxPosition_);
 800105c:	197b      	adds	r3, r7, r5
 800105e:	881a      	ldrh	r2, [r3, #0]
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <handleSetServoMaxPosition+0x3c>)
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff fbe9 	bl	800083c <setMaxPositon>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Operation ended sucessful\n", strlen("Operation ended sucessful\n"), 500);
 800106a:	23fa      	movs	r3, #250	; 0xfa
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4905      	ldr	r1, [pc, #20]	; (8001084 <handleSetServoMaxPosition+0x40>)
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <handleSetServoMaxPosition+0x44>)
 8001072:	221a      	movs	r2, #26
 8001074:	f003 fcc8 	bl	8004a08 <HAL_UART_Transmit>
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b004      	add	sp, #16
 800107e:	bdb0      	pop	{r4, r5, r7, pc}
 8001080:	20000018 	.word	0x20000018
 8001084:	080069a4 	.word	0x080069a4
 8001088:	20000248 	.word	0x20000248

0800108c <handlePrintServoMaxPosition>:
void handlePrintServoMaxPosition(Bluetooth* bluetooth) {
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	uint16_t maxPostion = getMaxPositon(&servo);
 8001094:	250e      	movs	r5, #14
 8001096:	197c      	adds	r4, r7, r5
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <handlePrintServoMaxPosition+0x30>)
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff fbdd 	bl	800085a <getMaxPositon>
 80010a0:	0003      	movs	r3, r0
 80010a2:	8023      	strh	r3, [r4, #0]
	printServoMaxPosition(bluetooth, maxPostion);
 80010a4:	197b      	adds	r3, r7, r5
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	0011      	movs	r1, r2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f000 f8fd 	bl	80012ac <printServoMaxPosition>
}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	20000018 	.word	0x20000018

080010c0 <handleIncorrectCommand>:

void handleIncorrectCommand(Bluetooth* bluetooth) {
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	strcat(bluetooth->buffer, "\n");
 80010c8:	687c      	ldr	r4, [r7, #4]
 80010ca:	0020      	movs	r0, r4
 80010cc:	f7ff f81c 	bl	8000108 <strlen>
 80010d0:	0003      	movs	r3, r0
 80010d2:	18e2      	adds	r2, r4, r3
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <handleIncorrectCommand+0x44>)
 80010d6:	0010      	movs	r0, r2
 80010d8:	0019      	movs	r1, r3
 80010da:	2302      	movs	r3, #2
 80010dc:	001a      	movs	r2, r3
 80010de:	f004 fe79 	bl	8005dd4 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)bluetooth->buffer, strlen(bluetooth->buffer), 500);
 80010e2:	687c      	ldr	r4, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff f80e 	bl	8000108 <strlen>
 80010ec:	0003      	movs	r3, r0
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	23fa      	movs	r3, #250	; 0xfa
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <handleIncorrectCommand+0x48>)
 80010f6:	0021      	movs	r1, r4
 80010f8:	f003 fc86 	bl	8004a08 <HAL_UART_Transmit>
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b003      	add	sp, #12
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	080069c0 	.word	0x080069c0
 8001108:	20000248 	.word	0x20000248

0800110c <printMinLDRreading>:

void printMinLDRreading(Bluetooth* bluetooth, uint16_t ldrValue) {
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b091      	sub	sp, #68	; 0x44
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	000a      	movs	r2, r1
 8001116:	1cbb      	adds	r3, r7, #2
 8001118:	801a      	strh	r2, [r3, #0]
	char info[50];
	sprintf(info, "minLdrReading=%d", ldrValue);
 800111a:	1cbb      	adds	r3, r7, #2
 800111c:	881a      	ldrh	r2, [r3, #0]
 800111e:	4912      	ldr	r1, [pc, #72]	; (8001168 <printMinLDRreading+0x5c>)
 8001120:	240c      	movs	r4, #12
 8001122:	193b      	adds	r3, r7, r4
 8001124:	0018      	movs	r0, r3
 8001126:	f004 fe67 	bl	8005df8 <siprintf>
	strcat(info, "\n");
 800112a:	193b      	adds	r3, r7, r4
 800112c:	0018      	movs	r0, r3
 800112e:	f7fe ffeb 	bl	8000108 <strlen>
 8001132:	0003      	movs	r3, r0
 8001134:	001a      	movs	r2, r3
 8001136:	193b      	adds	r3, r7, r4
 8001138:	189a      	adds	r2, r3, r2
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <printMinLDRreading+0x60>)
 800113c:	0010      	movs	r0, r2
 800113e:	0019      	movs	r1, r3
 8001140:	2302      	movs	r3, #2
 8001142:	001a      	movs	r2, r3
 8001144:	f004 fe46 	bl	8005dd4 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
 8001148:	193b      	adds	r3, r7, r4
 800114a:	0018      	movs	r0, r3
 800114c:	f7fe ffdc 	bl	8000108 <strlen>
 8001150:	0003      	movs	r3, r0
 8001152:	b29a      	uxth	r2, r3
 8001154:	23fa      	movs	r3, #250	; 0xfa
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	1939      	adds	r1, r7, r4
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <printMinLDRreading+0x64>)
 800115c:	f003 fc54 	bl	8004a08 <HAL_UART_Transmit>
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b011      	add	sp, #68	; 0x44
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	080069c4 	.word	0x080069c4
 800116c:	080069c0 	.word	0x080069c0
 8001170:	20000248 	.word	0x20000248

08001174 <printMaxReading>:

void printMaxReading(Bluetooth* bluetooth, uint16_t ldrValue) {
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b091      	sub	sp, #68	; 0x44
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	000a      	movs	r2, r1
 800117e:	1cbb      	adds	r3, r7, #2
 8001180:	801a      	strh	r2, [r3, #0]
	char info[50];
	sprintf(info, "maxLdrReading=%d", ldrValue);
 8001182:	1cbb      	adds	r3, r7, #2
 8001184:	881a      	ldrh	r2, [r3, #0]
 8001186:	4912      	ldr	r1, [pc, #72]	; (80011d0 <printMaxReading+0x5c>)
 8001188:	240c      	movs	r4, #12
 800118a:	193b      	adds	r3, r7, r4
 800118c:	0018      	movs	r0, r3
 800118e:	f004 fe33 	bl	8005df8 <siprintf>
	strcat(info, "\n");
 8001192:	193b      	adds	r3, r7, r4
 8001194:	0018      	movs	r0, r3
 8001196:	f7fe ffb7 	bl	8000108 <strlen>
 800119a:	0003      	movs	r3, r0
 800119c:	001a      	movs	r2, r3
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	189a      	adds	r2, r3, r2
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <printMaxReading+0x60>)
 80011a4:	0010      	movs	r0, r2
 80011a6:	0019      	movs	r1, r3
 80011a8:	2302      	movs	r3, #2
 80011aa:	001a      	movs	r2, r3
 80011ac:	f004 fe12 	bl	8005dd4 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
 80011b0:	193b      	adds	r3, r7, r4
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7fe ffa8 	bl	8000108 <strlen>
 80011b8:	0003      	movs	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	23fa      	movs	r3, #250	; 0xfa
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	1939      	adds	r1, r7, r4
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <printMaxReading+0x64>)
 80011c4:	f003 fc20 	bl	8004a08 <HAL_UART_Transmit>
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b011      	add	sp, #68	; 0x44
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	080069d8 	.word	0x080069d8
 80011d4:	080069c0 	.word	0x080069c0
 80011d8:	20000248 	.word	0x20000248

080011dc <printUpperControlLimit>:

void printUpperControlLimit(Bluetooth* bluetooth, uint16_t ldrValue) {
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b091      	sub	sp, #68	; 0x44
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	000a      	movs	r2, r1
 80011e6:	1cbb      	adds	r3, r7, #2
 80011e8:	801a      	strh	r2, [r3, #0]
	char info[50];
	sprintf(info, "upperLdrControlLimit=%d", ldrValue);
 80011ea:	1cbb      	adds	r3, r7, #2
 80011ec:	881a      	ldrh	r2, [r3, #0]
 80011ee:	4912      	ldr	r1, [pc, #72]	; (8001238 <printUpperControlLimit+0x5c>)
 80011f0:	240c      	movs	r4, #12
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	0018      	movs	r0, r3
 80011f6:	f004 fdff 	bl	8005df8 <siprintf>
	strcat(info, "\n");
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7fe ff83 	bl	8000108 <strlen>
 8001202:	0003      	movs	r3, r0
 8001204:	001a      	movs	r2, r3
 8001206:	193b      	adds	r3, r7, r4
 8001208:	189a      	adds	r2, r3, r2
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <printUpperControlLimit+0x60>)
 800120c:	0010      	movs	r0, r2
 800120e:	0019      	movs	r1, r3
 8001210:	2302      	movs	r3, #2
 8001212:	001a      	movs	r2, r3
 8001214:	f004 fdde 	bl	8005dd4 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
 8001218:	193b      	adds	r3, r7, r4
 800121a:	0018      	movs	r0, r3
 800121c:	f7fe ff74 	bl	8000108 <strlen>
 8001220:	0003      	movs	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	23fa      	movs	r3, #250	; 0xfa
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	1939      	adds	r1, r7, r4
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <printUpperControlLimit+0x64>)
 800122c:	f003 fbec 	bl	8004a08 <HAL_UART_Transmit>
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b011      	add	sp, #68	; 0x44
 8001236:	bd90      	pop	{r4, r7, pc}
 8001238:	080069ec 	.word	0x080069ec
 800123c:	080069c0 	.word	0x080069c0
 8001240:	20000248 	.word	0x20000248

08001244 <printLowerControlLimit>:

void printLowerControlLimit(Bluetooth* bluetooth, uint16_t ldrValue) {
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b091      	sub	sp, #68	; 0x44
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	000a      	movs	r2, r1
 800124e:	1cbb      	adds	r3, r7, #2
 8001250:	801a      	strh	r2, [r3, #0]
	char info[50];
	sprintf(info, "lowerLdrControlLimit=%d", ldrValue);
 8001252:	1cbb      	adds	r3, r7, #2
 8001254:	881a      	ldrh	r2, [r3, #0]
 8001256:	4912      	ldr	r1, [pc, #72]	; (80012a0 <printLowerControlLimit+0x5c>)
 8001258:	240c      	movs	r4, #12
 800125a:	193b      	adds	r3, r7, r4
 800125c:	0018      	movs	r0, r3
 800125e:	f004 fdcb 	bl	8005df8 <siprintf>
	strcat(info, "\n");
 8001262:	193b      	adds	r3, r7, r4
 8001264:	0018      	movs	r0, r3
 8001266:	f7fe ff4f 	bl	8000108 <strlen>
 800126a:	0003      	movs	r3, r0
 800126c:	001a      	movs	r2, r3
 800126e:	193b      	adds	r3, r7, r4
 8001270:	189a      	adds	r2, r3, r2
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <printLowerControlLimit+0x60>)
 8001274:	0010      	movs	r0, r2
 8001276:	0019      	movs	r1, r3
 8001278:	2302      	movs	r3, #2
 800127a:	001a      	movs	r2, r3
 800127c:	f004 fdaa 	bl	8005dd4 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
 8001280:	193b      	adds	r3, r7, r4
 8001282:	0018      	movs	r0, r3
 8001284:	f7fe ff40 	bl	8000108 <strlen>
 8001288:	0003      	movs	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	23fa      	movs	r3, #250	; 0xfa
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	1939      	adds	r1, r7, r4
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <printLowerControlLimit+0x64>)
 8001294:	f003 fbb8 	bl	8004a08 <HAL_UART_Transmit>
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b011      	add	sp, #68	; 0x44
 800129e:	bd90      	pop	{r4, r7, pc}
 80012a0:	08006a04 	.word	0x08006a04
 80012a4:	080069c0 	.word	0x080069c0
 80012a8:	20000248 	.word	0x20000248

080012ac <printServoMaxPosition>:

void printServoMaxPosition(Bluetooth* bluetooth, uint16_t maxPostion_) {
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b091      	sub	sp, #68	; 0x44
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	000a      	movs	r2, r1
 80012b6:	1cbb      	adds	r3, r7, #2
 80012b8:	801a      	strh	r2, [r3, #0]
	char info[50];
	sprintf(info, "servoMaxPosition=%d", maxPostion_);
 80012ba:	1cbb      	adds	r3, r7, #2
 80012bc:	881a      	ldrh	r2, [r3, #0]
 80012be:	4912      	ldr	r1, [pc, #72]	; (8001308 <printServoMaxPosition+0x5c>)
 80012c0:	240c      	movs	r4, #12
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	0018      	movs	r0, r3
 80012c6:	f004 fd97 	bl	8005df8 <siprintf>
	strcat(info, "\n");
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7fe ff1b 	bl	8000108 <strlen>
 80012d2:	0003      	movs	r3, r0
 80012d4:	001a      	movs	r2, r3
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	189a      	adds	r2, r3, r2
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <printServoMaxPosition+0x60>)
 80012dc:	0010      	movs	r0, r2
 80012de:	0019      	movs	r1, r3
 80012e0:	2302      	movs	r3, #2
 80012e2:	001a      	movs	r2, r3
 80012e4:	f004 fd76 	bl	8005dd4 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
 80012e8:	193b      	adds	r3, r7, r4
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7fe ff0c 	bl	8000108 <strlen>
 80012f0:	0003      	movs	r3, r0
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	23fa      	movs	r3, #250	; 0xfa
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	1939      	adds	r1, r7, r4
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <printServoMaxPosition+0x64>)
 80012fc:	f003 fb84 	bl	8004a08 <HAL_UART_Transmit>
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b011      	add	sp, #68	; 0x44
 8001306:	bd90      	pop	{r4, r7, pc}
 8001308:	08006a1c 	.word	0x08006a1c
 800130c:	080069c0 	.word	0x080069c0
 8001310:	20000248 	.word	0x20000248

08001314 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	240c      	movs	r4, #12
 800131c:	193b      	adds	r3, r7, r4
 800131e:	0018      	movs	r0, r3
 8001320:	2314      	movs	r3, #20
 8001322:	001a      	movs	r2, r3
 8001324:	2100      	movs	r1, #0
 8001326:	f004 fd5e 	bl	8005de6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_GPIO_Init+0x84>)
 800132c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_GPIO_Init+0x84>)
 8001330:	2101      	movs	r1, #1
 8001332:	430a      	orrs	r2, r1
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_GPIO_Init+0x84>)
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	2201      	movs	r2, #1
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_GPIO_Init+0x84>)
 8001344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_GPIO_Init+0x84>)
 8001348:	2104      	movs	r1, #4
 800134a:	430a      	orrs	r2, r1
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_GPIO_Init+0x84>)
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	2204      	movs	r2, #4
 8001354:	4013      	ands	r3, r2
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800135a:	23a0      	movs	r3, #160	; 0xa0
 800135c:	05db      	lsls	r3, r3, #23
 800135e:	2200      	movs	r2, #0
 8001360:	2120      	movs	r1, #32
 8001362:	0018      	movs	r0, r3
 8001364:	f001 fcc8 	bl	8002cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001368:	0021      	movs	r1, r4
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2220      	movs	r2, #32
 800136e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2201      	movs	r2, #1
 8001374:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001382:	187a      	adds	r2, r7, r1
 8001384:	23a0      	movs	r3, #160	; 0xa0
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	0011      	movs	r1, r2
 800138a:	0018      	movs	r0, r3
 800138c:	f001 fb36 	bl	80029fc <HAL_GPIO_Init>

}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b009      	add	sp, #36	; 0x24
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	40021000 	.word	0x40021000

0800139c <main>:
  * aplikacji rozwija albo zwija zasłonę według własnego uznania.
  * Autorzy: Damian Górski, Daniel Mierzejewski.
  * @return int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f000 fcf2 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f84c 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f7ff ffb4 	bl	8001314 <MX_GPIO_Init>
  MX_ADC_Init();
 80013ac:	f7ff fb46 	bl	8000a3c <MX_ADC_Init>
  MX_TIM3_Init();
 80013b0:	f000 fa42 	bl	8001838 <MX_TIM3_Init>
  MX_TIM6_Init();
 80013b4:	f000 faca 	bl	800194c <MX_TIM6_Init>
  MX_TIM7_Init();
 80013b8:	f000 fb06 	bl	80019c8 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80013bc:	f000 fc04 	bl	8001bc8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80013c0:	f000 fbd2 	bl	8001b68 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013c4:	f000 f9e2 	bl	800178c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1200);
 80013c8:	2396      	movs	r3, #150	; 0x96
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	0018      	movs	r0, r3
 80013ce:	f000 fd4b 	bl	8001e68 <HAL_Delay>
  memset(bluetooth.buffer, 0, sizeof(bluetooth.buffer));
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <main+0x88>)
 80013d4:	2232      	movs	r2, #50	; 0x32
 80013d6:	2100      	movs	r1, #0
 80013d8:	0018      	movs	r0, r3
 80013da:	f004 fd04 	bl	8005de6 <memset>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <main+0x8c>)
 80013e0:	2100      	movs	r1, #0
 80013e2:	0018      	movs	r0, r3
 80013e4:	f002 fcec 	bl	8003dc0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <main+0x90>)
 80013ea:	0018      	movs	r0, r3
 80013ec:	f002 fc4e 	bl	8003c8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <main+0x94>)
 80013f2:	0018      	movs	r0, r3
 80013f4:	f002 fc4a 	bl	8003c8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <main+0x98>)
 80013fa:	0018      	movs	r0, r3
 80013fc:	f002 fc46 	bl	8003c8c <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <main+0x9c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <main+0x9c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2120      	movs	r1, #32
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <main+0xa0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <main+0xa0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2120      	movs	r1, #32
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001420:	e7fe      	b.n	8001420 <main+0x84>
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	200000ac 	.word	0x200000ac
 8001428:	20000148 	.word	0x20000148
 800142c:	200001c8 	.word	0x200001c8
 8001430:	20000188 	.word	0x20000188
 8001434:	20000208 	.word	0x20000208
 8001438:	20000248 	.word	0x20000248
 800143c:	200002cc 	.word	0x200002cc

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b09f      	sub	sp, #124	; 0x7c
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	2440      	movs	r4, #64	; 0x40
 8001448:	193b      	adds	r3, r7, r4
 800144a:	0018      	movs	r0, r3
 800144c:	2338      	movs	r3, #56	; 0x38
 800144e:	001a      	movs	r2, r3
 8001450:	2100      	movs	r1, #0
 8001452:	f004 fcc8 	bl	8005de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001456:	232c      	movs	r3, #44	; 0x2c
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	0018      	movs	r0, r3
 800145c:	2314      	movs	r3, #20
 800145e:	001a      	movs	r2, r3
 8001460:	2100      	movs	r1, #0
 8001462:	f004 fcc0 	bl	8005de6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	0018      	movs	r0, r3
 800146a:	2328      	movs	r3, #40	; 0x28
 800146c:	001a      	movs	r2, r3
 800146e:	2100      	movs	r1, #0
 8001470:	f004 fcb9 	bl	8005de6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <SystemClock_Config+0xcc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a25      	ldr	r2, [pc, #148]	; (8001510 <SystemClock_Config+0xd0>)
 800147a:	401a      	ands	r2, r3
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <SystemClock_Config+0xcc>)
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	0109      	lsls	r1, r1, #4
 8001482:	430a      	orrs	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001486:	0021      	movs	r1, r4
 8001488:	187b      	adds	r3, r7, r1
 800148a:	2202      	movs	r2, #2
 800148c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2201      	movs	r2, #1
 8001492:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2210      	movs	r2, #16
 8001498:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2200      	movs	r2, #0
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	0018      	movs	r0, r3
 80014a4:	f001 fc46 	bl	8002d34 <HAL_RCC_OscConfig>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80014ac:	f000 f87a 	bl	80015a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	212c      	movs	r1, #44	; 0x2c
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	220f      	movs	r2, #15
 80014b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2201      	movs	r2, #1
 80014bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2100      	movs	r1, #0
 80014d4:	0018      	movs	r0, r3
 80014d6:	f002 f801 	bl	80034dc <HAL_RCC_ClockConfig>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014de:	f000 f861 	bl	80015a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2203      	movs	r2, #3
 80014e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	0018      	movs	r0, r3
 80014f8:	f002 fa14 	bl	8003924 <HAL_RCCEx_PeriphCLKConfig>
 80014fc:	1e03      	subs	r3, r0, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001500:	f000 f850 	bl	80015a4 <Error_Handler>
  }
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b01f      	add	sp, #124	; 0x7c
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	40007000 	.word	0x40007000
 8001510:	ffffe7ff 	.word	0xffffe7ff

08001514 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	05db      	lsls	r3, r3, #23
 8001524:	429a      	cmp	r2, r3
 8001526:	d104      	bne.n	8001532 <HAL_TIM_PeriodElapsedCallback+0x1e>
		steer(&servo);
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800152a:	0018      	movs	r0, r3
 800152c:	f7ff f8e3 	bl	80006f6 <steer>
	else if (htim->Instance == TIM6) {
		if (areNewMeassures(&ldr))
			setBlindWithLDR();
		measure(&ldr);
	}
}
 8001530:	e010      	b.n	8001554 <HAL_TIM_PeriodElapsedCallback+0x40>
	else if (htim->Instance == TIM6) {
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d10b      	bne.n	8001554 <HAL_TIM_PeriodElapsedCallback+0x40>
		if (areNewMeassures(&ldr))
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff f818 	bl	8000574 <areNewMeassures>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d001      	beq.n	800154c <HAL_TIM_PeriodElapsedCallback+0x38>
			setBlindWithLDR();
 8001548:	f000 f80e 	bl	8001568 <setBlindWithLDR>
		measure(&ldr);
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800154e:	0018      	movs	r0, r3
 8001550:	f7fe ffde 	bl	8000510 <measure>
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b002      	add	sp, #8
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000018 	.word	0x20000018
 8001560:	40001000 	.word	0x40001000
 8001564:	20000000 	.word	0x20000000

08001568 <setBlindWithLDR>:

void setBlindWithLDR() {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	if (isAboveUpperLimit(&ldr))
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <setBlindWithLDR+0x34>)
 800156e:	0018      	movs	r0, r3
 8001570:	f7ff f835 	bl	80005de <isAboveUpperLimit>
 8001574:	1e03      	subs	r3, r0, #0
 8001576:	d004      	beq.n	8001582 <setBlindWithLDR+0x1a>
		setPositionToMax(&servo);
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <setBlindWithLDR+0x38>)
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff f947 	bl	800080e <setPositionToMax>
	else if (isBelowLowerLimit(&ldr))
		setPositionToMin(&servo);
}
 8001580:	e009      	b.n	8001596 <setBlindWithLDR+0x2e>
	else if (isBelowLowerLimit(&ldr))
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <setBlindWithLDR+0x34>)
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff f83e 	bl	8000606 <isBelowLowerLimit>
 800158a:	1e03      	subs	r3, r0, #0
 800158c:	d003      	beq.n	8001596 <setBlindWithLDR+0x2e>
		setPositionToMin(&servo);
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <setBlindWithLDR+0x38>)
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff f948 	bl	8000826 <setPositionToMin>
}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000018 	.word	0x20000018

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>

080015ae <getLastWordAsInt>:
char *getLastN(char *str, size_t n) {
    size_t len = strlen(str);
    return (char *)str + len - n;
}

uint16_t getLastWordAsInt(char *str) {
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
    char *word = strrchr(str, ' ') + 1;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2120      	movs	r1, #32
 80015ba:	0018      	movs	r0, r3
 80015bc:	f004 fc4d 	bl	8005e5a <strrchr>
 80015c0:	0003      	movs	r3, r0
 80015c2:	3301      	adds	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
    return (uint16_t)atoi(word);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f004 fbd3 	bl	8005d74 <atoi>
 80015ce:	0003      	movs	r3, r0
 80015d0:	b29b      	uxth	r3, r3
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <HAL_MspInit+0x24>)
 80015e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_MspInit+0x24>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	430a      	orrs	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <HAL_MspInit+0x24>)
 80015ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_MspInit+0x24>)
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	0549      	lsls	r1, r1, #21
 80015f6:	430a      	orrs	r2, r1
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 fc02 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <TIM2_IRQHandler+0x14>)
 800163a:	0018      	movs	r0, r3
 800163c:	f002 fc52 	bl	8003ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	200001c8 	.word	0x200001c8

0800164c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <TIM6_DAC_IRQHandler+0x14>)
 8001652:	0018      	movs	r0, r3
 8001654:	f002 fc46 	bl	8003ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	20000188 	.word	0x20000188

08001664 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if (strlen(bluetooth.buffer) > 0) bluetooth.timer_count++;
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <TIM7_IRQHandler+0x3c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d007      	beq.n	8001680 <TIM7_IRQHandler+0x1c>
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <TIM7_IRQHandler+0x3c>)
 8001672:	2233      	movs	r2, #51	; 0x33
 8001674:	5c9b      	ldrb	r3, [r3, r2]
 8001676:	3301      	adds	r3, #1
 8001678:	b2d9      	uxtb	r1, r3
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <TIM7_IRQHandler+0x3c>)
 800167c:	2233      	movs	r2, #51	; 0x33
 800167e:	5499      	strb	r1, [r3, r2]
	if (bluetooth.timer_count > 5) msgHandler(&bluetooth);
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <TIM7_IRQHandler+0x3c>)
 8001682:	2233      	movs	r2, #51	; 0x33
 8001684:	5c9b      	ldrb	r3, [r3, r2]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d903      	bls.n	8001692 <TIM7_IRQHandler+0x2e>
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <TIM7_IRQHandler+0x3c>)
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff fa89 	bl	8000ba4 <msgHandler>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <TIM7_IRQHandler+0x40>)
 8001694:	0018      	movs	r0, r3
 8001696:	f002 fc25 	bl	8003ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200000ac 	.word	0x200000ac
 80016a4:	20000208 	.word	0x20000208

080016a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_Receive(&huart1, (uint8_t*)&bluetooth.buffer[bluetooth.buffer_index++], 1, 10);
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <USART1_IRQHandler+0x4c>)
 80016ae:	2232      	movs	r2, #50	; 0x32
 80016b0:	5c9b      	ldrb	r3, [r3, r2]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	b2d0      	uxtb	r0, r2
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <USART1_IRQHandler+0x4c>)
 80016b8:	2132      	movs	r1, #50	; 0x32
 80016ba:	5450      	strb	r0, [r2, r1]
 80016bc:	001a      	movs	r2, r3
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <USART1_IRQHandler+0x4c>)
 80016c0:	18d1      	adds	r1, r2, r3
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <USART1_IRQHandler+0x50>)
 80016c4:	230a      	movs	r3, #10
 80016c6:	2201      	movs	r2, #1
 80016c8:	f003 fa46 	bl	8004b58 <HAL_UART_Receive>

	if (bluetooth.buffer[bluetooth.buffer_index-1] == '\n') msgHandler(&bluetooth);
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <USART1_IRQHandler+0x4c>)
 80016ce:	2232      	movs	r2, #50	; 0x32
 80016d0:	5c9b      	ldrb	r3, [r3, r2]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <USART1_IRQHandler+0x4c>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	2b0a      	cmp	r3, #10
 80016da:	d103      	bne.n	80016e4 <USART1_IRQHandler+0x3c>
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <USART1_IRQHandler+0x4c>)
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff fa60 	bl	8000ba4 <msgHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <USART1_IRQHandler+0x50>)
 80016e6:	0018      	movs	r0, r3
 80016e8:	f003 fb24 	bl	8004d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	200000ac 	.word	0x200000ac
 80016f8:	20000248 	.word	0x20000248

080016fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <USART2_IRQHandler+0x14>)
 8001702:	0018      	movs	r0, r3
 8001704:	f003 fb16 	bl	8004d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	200002cc 	.word	0x200002cc

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	18d3      	adds	r3, r2, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f004 fb1c 	bl	8005d80 <__errno>
 8001748:	0003      	movs	r3, r0
 800174a:	220c      	movs	r2, #12
 800174c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174e:	2301      	movs	r3, #1
 8001750:	425b      	negs	r3, r3
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	18d2      	adds	r2, r2, r3
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <_sbrk+0x64>)
 8001764:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b006      	add	sp, #24
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20005000 	.word	0x20005000
 8001774:	00000400 	.word	0x00000400
 8001778:	200000e0 	.word	0x200000e0
 800177c:	20000368 	.word	0x20000368

08001780 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	2308      	movs	r3, #8
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	0018      	movs	r0, r3
 8001798:	2310      	movs	r3, #16
 800179a:	001a      	movs	r2, r3
 800179c:	2100      	movs	r1, #0
 800179e:	f004 fb22 	bl	8005de6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a2:	003b      	movs	r3, r7
 80017a4:	0018      	movs	r0, r3
 80017a6:	2308      	movs	r3, #8
 80017a8:	001a      	movs	r2, r3
 80017aa:	2100      	movs	r1, #0
 80017ac:	f004 fb1b 	bl	8005de6 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <MX_TIM2_Init+0xa0>)
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	05d2      	lsls	r2, r2, #23
 80017b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <MX_TIM2_Init+0xa0>)
 80017ba:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <MX_TIM2_Init+0xa4>)
 80017bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <MX_TIM2_Init+0xa0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8999;
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <MX_TIM2_Init+0xa0>)
 80017c6:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <MX_TIM2_Init+0xa8>)
 80017c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <MX_TIM2_Init+0xa0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_TIM2_Init+0xa0>)
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_TIM2_Init+0xa0>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f002 fa17 	bl	8003c0c <HAL_TIM_Base_Init>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017e2:	f7ff fedf 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e6:	2108      	movs	r1, #8
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	0152      	lsls	r2, r2, #5
 80017ee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017f0:	187a      	adds	r2, r7, r1
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_TIM2_Init+0xa0>)
 80017f4:	0011      	movs	r1, r2
 80017f6:	0018      	movs	r0, r3
 80017f8:	f002 fd22 	bl	8004240 <HAL_TIM_ConfigClockSource>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001800:	f7ff fed0 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001804:	003b      	movs	r3, r7
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	003b      	movs	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001810:	003a      	movs	r2, r7
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_TIM2_Init+0xa0>)
 8001814:	0011      	movs	r1, r2
 8001816:	0018      	movs	r0, r3
 8001818:	f003 f826 	bl	8004868 <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001820:	f7ff fec0 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b006      	add	sp, #24
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200001c8 	.word	0x200001c8
 8001830:	00003e7f 	.word	0x00003e7f
 8001834:	00002327 	.word	0x00002327

08001838 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	2318      	movs	r3, #24
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	0018      	movs	r0, r3
 8001844:	2310      	movs	r3, #16
 8001846:	001a      	movs	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	f004 facc 	bl	8005de6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184e:	2310      	movs	r3, #16
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	0018      	movs	r0, r3
 8001854:	2308      	movs	r3, #8
 8001856:	001a      	movs	r2, r3
 8001858:	2100      	movs	r1, #0
 800185a:	f004 fac4 	bl	8005de6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185e:	003b      	movs	r3, r7
 8001860:	0018      	movs	r0, r3
 8001862:	2310      	movs	r3, #16
 8001864:	001a      	movs	r2, r3
 8001866:	2100      	movs	r1, #0
 8001868:	f004 fabd 	bl	8005de6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <MX_TIM3_Init+0x108>)
 800186e:	4a35      	ldr	r2, [pc, #212]	; (8001944 <MX_TIM3_Init+0x10c>)
 8001870:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <MX_TIM3_Init+0x108>)
 8001874:	220f      	movs	r2, #15
 8001876:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <MX_TIM3_Init+0x108>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <MX_TIM3_Init+0x108>)
 8001880:	4a31      	ldr	r2, [pc, #196]	; (8001948 <MX_TIM3_Init+0x110>)
 8001882:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <MX_TIM3_Init+0x108>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <MX_TIM3_Init+0x108>)
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <MX_TIM3_Init+0x108>)
 8001892:	0018      	movs	r0, r3
 8001894:	f002 f9ba 	bl	8003c0c <HAL_TIM_Base_Init>
 8001898:	1e03      	subs	r3, r0, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800189c:	f7ff fe82 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a0:	2118      	movs	r1, #24
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	0152      	lsls	r2, r2, #5
 80018a8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018aa:	187a      	adds	r2, r7, r1
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <MX_TIM3_Init+0x108>)
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f002 fcc5 	bl	8004240 <HAL_TIM_ConfigClockSource>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80018ba:	f7ff fe73 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <MX_TIM3_Init+0x108>)
 80018c0:	0018      	movs	r0, r3
 80018c2:	f002 fa35 	bl	8003d30 <HAL_TIM_PWM_Init>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80018ca:	f7ff fe6b 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2110      	movs	r1, #16
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018dc:	187a      	adds	r2, r7, r1
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <MX_TIM3_Init+0x108>)
 80018e0:	0011      	movs	r1, r2
 80018e2:	0018      	movs	r0, r3
 80018e4:	f002 ffc0 	bl	8004868 <HAL_TIMEx_MasterConfigSynchronization>
 80018e8:	1e03      	subs	r3, r0, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80018ec:	f7ff fe5a 	bl	80015a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f0:	003b      	movs	r3, r7
 80018f2:	2260      	movs	r2, #96	; 0x60
 80018f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80018f6:	003b      	movs	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fc:	003b      	movs	r3, r7
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001902:	003b      	movs	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001908:	0039      	movs	r1, r7
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <MX_TIM3_Init+0x108>)
 800190c:	2200      	movs	r2, #0
 800190e:	0018      	movs	r0, r3
 8001910:	f002 fbd0 	bl	80040b4 <HAL_TIM_PWM_ConfigChannel>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d001      	beq.n	800191c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001918:	f7ff fe44 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_TIM3_Init+0x108>)
 800191e:	2104      	movs	r1, #4
 8001920:	0018      	movs	r0, r3
 8001922:	f002 ffff 	bl	8004924 <HAL_TIMEx_RemapConfig>
 8001926:	1e03      	subs	r3, r0, #0
 8001928:	d001      	beq.n	800192e <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800192a:	f7ff fe3b 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <MX_TIM3_Init+0x108>)
 8001930:	0018      	movs	r0, r3
 8001932:	f000 f8dd 	bl	8001af0 <HAL_TIM_MspPostInit>

}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b00a      	add	sp, #40	; 0x28
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	20000148 	.word	0x20000148
 8001944:	40000400 	.word	0x40000400
 8001948:	00004e1f 	.word	0x00004e1f

0800194c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001952:	003b      	movs	r3, r7
 8001954:	0018      	movs	r0, r3
 8001956:	2308      	movs	r3, #8
 8001958:	001a      	movs	r2, r3
 800195a:	2100      	movs	r1, #0
 800195c:	f004 fa43 	bl	8005de6 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_TIM6_Init+0x6c>)
 8001962:	4a16      	ldr	r2, [pc, #88]	; (80019bc <MX_TIM6_Init+0x70>)
 8001964:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_TIM6_Init+0x6c>)
 8001968:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <MX_TIM6_Init+0x74>)
 800196a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_TIM6_Init+0x6c>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_TIM6_Init+0x6c>)
 8001974:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <MX_TIM6_Init+0x78>)
 8001976:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_TIM6_Init+0x6c>)
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_TIM6_Init+0x6c>)
 8001980:	0018      	movs	r0, r3
 8001982:	f002 f943 	bl	8003c0c <HAL_TIM_Base_Init>
 8001986:	1e03      	subs	r3, r0, #0
 8001988:	d001      	beq.n	800198e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800198a:	f7ff fe0b 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	003b      	movs	r3, r7
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001994:	003b      	movs	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800199a:	003a      	movs	r2, r7
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_TIM6_Init+0x6c>)
 800199e:	0011      	movs	r1, r2
 80019a0:	0018      	movs	r0, r3
 80019a2:	f002 ff61 	bl	8004868 <HAL_TIMEx_MasterConfigSynchronization>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80019aa:	f7ff fdfb 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	20000188 	.word	0x20000188
 80019bc:	40001000 	.word	0x40001000
 80019c0:	00003e7f 	.word	0x00003e7f
 80019c4:	0000270f 	.word	0x0000270f

080019c8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ce:	003b      	movs	r3, r7
 80019d0:	0018      	movs	r0, r3
 80019d2:	2308      	movs	r3, #8
 80019d4:	001a      	movs	r2, r3
 80019d6:	2100      	movs	r1, #0
 80019d8:	f004 fa05 	bl	8005de6 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_TIM7_Init+0x6c>)
 80019de:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <MX_TIM7_Init+0x70>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_TIM7_Init+0x6c>)
 80019e4:	220f      	movs	r2, #15
 80019e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_TIM7_Init+0x6c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_TIM7_Init+0x6c>)
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <MX_TIM7_Init+0x74>)
 80019f2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_TIM7_Init+0x6c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_TIM7_Init+0x6c>)
 80019fc:	0018      	movs	r0, r3
 80019fe:	f002 f905 	bl	8003c0c <HAL_TIM_Base_Init>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001a06:	f7ff fdcd 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	003b      	movs	r3, r7
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a10:	003b      	movs	r3, r7
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a16:	003a      	movs	r2, r7
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_TIM7_Init+0x6c>)
 8001a1a:	0011      	movs	r1, r2
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f002 ff23 	bl	8004868 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	1e03      	subs	r3, r0, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8001a26:	f7ff fdbd 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	20000208 	.word	0x20000208
 8001a38:	40001400 	.word	0x40001400
 8001a3c:	00004e1f 	.word	0x00004e1f

08001a40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	05db      	lsls	r3, r3, #23
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d10e      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a58:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	200f      	movs	r0, #15
 8001a66:	f000 ff0f 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a6a:	200f      	movs	r0, #15
 8001a6c:	f000 ff21 	bl	80028b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001a70:	e032      	b.n	8001ad8 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM3)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1b      	ldr	r2, [pc, #108]	; (8001ae4 <HAL_TIM_Base_MspInit+0xa4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d106      	bne.n	8001a8a <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a82:	2102      	movs	r1, #2
 8001a84:	430a      	orrs	r2, r1
 8001a86:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a88:	e026      	b.n	8001ad8 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM6)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a16      	ldr	r2, [pc, #88]	; (8001ae8 <HAL_TIM_Base_MspInit+0xa8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d10e      	bne.n	8001ab2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a9a:	2110      	movs	r1, #16
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2011      	movs	r0, #17
 8001aa6:	f000 feef 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aaa:	2011      	movs	r0, #17
 8001aac:	f000 ff01 	bl	80028b2 <HAL_NVIC_EnableIRQ>
}
 8001ab0:	e012      	b.n	8001ad8 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM7)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_TIM_Base_MspInit+0xac>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d10d      	bne.n	8001ad8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_TIM_Base_MspInit+0xa0>)
 8001abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_TIM_Base_MspInit+0xa0>)
 8001ac2:	2120      	movs	r1, #32
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	2012      	movs	r0, #18
 8001ace:	f000 fedb 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ad2:	2012      	movs	r0, #18
 8001ad4:	f000 feed 	bl	80028b2 <HAL_NVIC_EnableIRQ>
}
 8001ad8:	46c0      	nop			; (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	40001000 	.word	0x40001000
 8001aec:	40001400 	.word	0x40001400

08001af0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	240c      	movs	r4, #12
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	0018      	movs	r0, r3
 8001afe:	2314      	movs	r3, #20
 8001b00:	001a      	movs	r2, r3
 8001b02:	2100      	movs	r1, #0
 8001b04:	f004 f96f 	bl	8005de6 <memset>
  if(timHandle->Instance==TIM3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <HAL_TIM_MspPostInit+0x70>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d122      	bne.n	8001b58 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_TIM_MspPostInit+0x74>)
 8001b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_TIM_MspPostInit+0x74>)
 8001b18:	2101      	movs	r1, #1
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_TIM_MspPostInit+0x74>)
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	2201      	movs	r2, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b2a:	0021      	movs	r1, r4
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2202      	movs	r2, #2
 8001b36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	2202      	movs	r2, #2
 8001b48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	187a      	adds	r2, r7, r1
 8001b4c:	23a0      	movs	r3, #160	; 0xa0
 8001b4e:	05db      	lsls	r3, r3, #23
 8001b50:	0011      	movs	r1, r2
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 ff52 	bl	80029fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b009      	add	sp, #36	; 0x24
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	40000400 	.word	0x40000400
 8001b64:	40021000 	.word	0x40021000

08001b68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001b6e:	4a15      	ldr	r2, [pc, #84]	; (8001bc4 <MX_USART1_UART_Init+0x5c>)
 8001b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001b74:	2296      	movs	r2, #150	; 0x96
 8001b76:	0192      	lsls	r2, r2, #6
 8001b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <MX_USART1_UART_Init+0x58>)
 8001bac:	0018      	movs	r0, r3
 8001bae:	f002 fed7 	bl	8004960 <HAL_UART_Init>
 8001bb2:	1e03      	subs	r3, r0, #0
 8001bb4:	d001      	beq.n	8001bba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bb6:	f7ff fcf5 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000248 	.word	0x20000248
 8001bc4:	40013800 	.word	0x40013800

08001bc8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bce:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <MX_USART2_UART_Init+0x5c>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bd4:	2296      	movs	r2, #150	; 0x96
 8001bd6:	0192      	lsls	r2, r2, #6
 8001bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_USART2_UART_Init+0x58>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_USART2_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_USART2_UART_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_USART2_UART_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <MX_USART2_UART_Init+0x58>)
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f002 fea7 	bl	8004960 <HAL_UART_Init>
 8001c12:	1e03      	subs	r3, r0, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c16:	f7ff fcc5 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200002cc 	.word	0x200002cc
 8001c24:	40004400 	.word	0x40004400

08001c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b08b      	sub	sp, #44	; 0x2c
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	2414      	movs	r4, #20
 8001c32:	193b      	adds	r3, r7, r4
 8001c34:	0018      	movs	r0, r3
 8001c36:	2314      	movs	r3, #20
 8001c38:	001a      	movs	r2, r3
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	f004 f8d3 	bl	8005de6 <memset>
  if(uartHandle->Instance==USART1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <HAL_UART_MspInit+0x100>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d133      	bne.n	8001cb2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <HAL_UART_MspInit+0x104>)
 8001c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c4e:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <HAL_UART_MspInit+0x104>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	01c9      	lsls	r1, r1, #7
 8001c54:	430a      	orrs	r2, r1
 8001c56:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_UART_MspInit+0x104>)
 8001c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <HAL_UART_MspInit+0x104>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	430a      	orrs	r2, r1
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c64:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_UART_MspInit+0x104>)
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c70:	193b      	adds	r3, r7, r4
 8001c72:	22c0      	movs	r2, #192	; 0xc0
 8001c74:	00d2      	lsls	r2, r2, #3
 8001c76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	0021      	movs	r1, r4
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	2204      	movs	r2, #4
 8001c90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	187a      	adds	r2, r7, r1
 8001c94:	23a0      	movs	r3, #160	; 0xa0
 8001c96:	05db      	lsls	r3, r3, #23
 8001c98:	0011      	movs	r1, r2
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 feae 	bl	80029fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	201b      	movs	r0, #27
 8001ca6:	f000 fdef 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001caa:	201b      	movs	r0, #27
 8001cac:	f000 fe01 	bl	80028b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cb0:	e036      	b.n	8001d20 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <HAL_UART_MspInit+0x108>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d131      	bne.n	8001d20 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_UART_MspInit+0x104>)
 8001cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_UART_MspInit+0x104>)
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	0289      	lsls	r1, r1, #10
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_UART_MspInit+0x104>)
 8001ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_UART_MspInit+0x104>)
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_UART_MspInit+0x104>)
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ce2:	2114      	movs	r1, #20
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2202      	movs	r2, #2
 8001cee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	2204      	movs	r2, #4
 8001d00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	187a      	adds	r2, r7, r1
 8001d04:	23a0      	movs	r3, #160	; 0xa0
 8001d06:	05db      	lsls	r3, r3, #23
 8001d08:	0011      	movs	r1, r2
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 fe76 	bl	80029fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2100      	movs	r1, #0
 8001d14:	201c      	movs	r0, #28
 8001d16:	f000 fdb7 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d1a:	201c      	movs	r0, #28
 8001d1c:	f000 fdc9 	bl	80028b2 <HAL_NVIC_EnableIRQ>
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b00b      	add	sp, #44	; 0x2c
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40004400 	.word	0x40004400

08001d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001d36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <LoopForever+0xe>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d50:	4c0b      	ldr	r4, [pc, #44]	; (8001d80 <LoopForever+0x16>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d5e:	f7ff fd0f 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d62:	f004 f813 	bl	8005d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d66:	f7ff fb19 	bl	800139c <main>

08001d6a <LoopForever>:

LoopForever:
    b LoopForever
 8001d6a:	e7fe      	b.n	8001d6a <LoopForever>
   ldr   r0, =_estack
 8001d6c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001d78:	08006be0 	.word	0x08006be0
  ldr r2, =_sbss
 8001d7c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001d80:	20000364 	.word	0x20000364

08001d84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_COMP_IRQHandler>
	...

08001d88 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_Init+0x3c>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_Init+0x3c>)
 8001d9a:	2140      	movs	r1, #64	; 0x40
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001da0:	2000      	movs	r0, #0
 8001da2:	f000 f811 	bl	8001dc8 <HAL_InitTick>
 8001da6:	1e03      	subs	r3, r0, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001daa:	1dfb      	adds	r3, r7, #7
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	e001      	b.n	8001db6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001db2:	f7ff fc13 	bl	80015dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b002      	add	sp, #8
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	40022000 	.word	0x40022000

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_InitTick+0x5c>)
 8001dd2:	681c      	ldr	r4, [r3, #0]
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_InitTick+0x60>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	0019      	movs	r1, r3
 8001dda:	23fa      	movs	r3, #250	; 0xfa
 8001ddc:	0098      	lsls	r0, r3, #2
 8001dde:	f7fe f9a5 	bl	800012c <__udivsi3>
 8001de2:	0003      	movs	r3, r0
 8001de4:	0019      	movs	r1, r3
 8001de6:	0020      	movs	r0, r4
 8001de8:	f7fe f9a0 	bl	800012c <__udivsi3>
 8001dec:	0003      	movs	r3, r0
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 fd6f 	bl	80028d2 <HAL_SYSTICK_Config>
 8001df4:	1e03      	subs	r3, r0, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e00f      	b.n	8001e1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d80b      	bhi.n	8001e1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	2301      	movs	r3, #1
 8001e06:	425b      	negs	r3, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f000 fd3c 	bl	8002888 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_InitTick+0x64>)
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e000      	b.n	8001e1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b003      	add	sp, #12
 8001e22:	bd90      	pop	{r4, r7, pc}
 8001e24:	20000020 	.word	0x20000020
 8001e28:	20000028 	.word	0x20000028
 8001e2c:	20000024 	.word	0x20000024

08001e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_IncTick+0x1c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	001a      	movs	r2, r3
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_IncTick+0x20>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	18d2      	adds	r2, r2, r3
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_IncTick+0x20>)
 8001e42:	601a      	str	r2, [r3, #0]
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	20000028 	.word	0x20000028
 8001e50:	20000350 	.word	0x20000350

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <HAL_GetTick+0x10>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	20000350 	.word	0x20000350

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff fff0 	bl	8001e54 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	001a      	movs	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	189b      	adds	r3, r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	f7ff ffe0 	bl	8001e54 <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b004      	add	sp, #16
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	20000028 	.word	0x20000028

08001eb0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e159      	b.n	8002176 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10a      	bne.n	8001ee0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2250      	movs	r2, #80	; 0x50
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7fe fe24 	bl	8000b28 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee4:	2210      	movs	r2, #16
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d005      	beq.n	8001ef8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ef6:	d00b      	beq.n	8001f10 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	2210      	movs	r2, #16
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2250      	movs	r2, #80	; 0x50
 8001f08:	2100      	movs	r1, #0
 8001f0a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e132      	b.n	8002176 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	4a9a      	ldr	r2, [pc, #616]	; (8002180 <HAL_ADC_Init+0x2d0>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	2202      	movs	r2, #2
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2203      	movs	r2, #3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d108      	bne.n	8001f40 <HAL_ADC_Init+0x90>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_Init+0x90>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_ADC_Init+0x92>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d149      	bne.n	8001fda <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	23c0      	movs	r3, #192	; 0xc0
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d00b      	beq.n	8001f6a <HAL_ADC_Init+0xba>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	05db      	lsls	r3, r3, #23
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d005      	beq.n	8001f6a <HAL_ADC_Init+0xba>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	061b      	lsls	r3, r3, #24
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d111      	bne.n	8001f8e <HAL_ADC_Init+0xde>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0092      	lsls	r2, r2, #2
 8001f76:	0892      	lsrs	r2, r2, #2
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6919      	ldr	r1, [r3, #16]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	611a      	str	r2, [r3, #16]
 8001f8c:	e014      	b.n	8001fb8 <HAL_ADC_Init+0x108>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0092      	lsls	r2, r2, #2
 8001f9a:	0892      	lsrs	r2, r2, #2
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	4b79      	ldr	r3, [pc, #484]	; (8002184 <HAL_ADC_Init+0x2d4>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b78      	ldr	r3, [pc, #480]	; (8002184 <HAL_ADC_Init+0x2d4>)
 8001fa4:	4978      	ldr	r1, [pc, #480]	; (8002188 <HAL_ADC_Init+0x2d8>)
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	4b76      	ldr	r3, [pc, #472]	; (8002184 <HAL_ADC_Init+0x2d4>)
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4b74      	ldr	r3, [pc, #464]	; (8002184 <HAL_ADC_Init+0x2d4>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2118      	movs	r1, #24
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68d9      	ldr	r1, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001fda:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_ADC_Init+0x2d4>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b69      	ldr	r3, [pc, #420]	; (8002184 <HAL_ADC_Init+0x2d4>)
 8001fe0:	496a      	ldr	r1, [pc, #424]	; (800218c <HAL_ADC_Init+0x2dc>)
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_ADC_Init+0x2d4>)
 8001fe8:	6819      	ldr	r1, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	065a      	lsls	r2, r3, #25
 8001ff0:	4b64      	ldr	r3, [pc, #400]	; (8002184 <HAL_ADC_Init+0x2d4>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	055b      	lsls	r3, r3, #21
 8002000:	4013      	ands	r3, r2
 8002002:	d108      	bne.n	8002016 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	0549      	lsls	r1, r1, #21
 8002012:	430a      	orrs	r2, r1
 8002014:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	495b      	ldr	r1, [pc, #364]	; (8002190 <HAL_ADC_Init+0x2e0>)
 8002022:	400a      	ands	r2, r1
 8002024:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68d9      	ldr	r1, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d101      	bne.n	800203c <HAL_ADC_Init+0x18c>
 8002038:	2304      	movs	r3, #4
 800203a:	e000      	b.n	800203e <HAL_ADC_Init+0x18e>
 800203c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800203e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2020      	movs	r0, #32
 8002044:	5c1b      	ldrb	r3, [r3, r0]
 8002046:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002048:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	202c      	movs	r0, #44	; 0x2c
 800204e:	5c1b      	ldrb	r3, [r3, r0]
 8002050:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002052:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002058:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002060:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002068:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002076:	23c2      	movs	r3, #194	; 0xc2
 8002078:	33ff      	adds	r3, #255	; 0xff
 800207a:	429a      	cmp	r2, r3
 800207c:	d00b      	beq.n	8002096 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68d9      	ldr	r1, [r3, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2221      	movs	r2, #33	; 0x21
 800209a:	5c9b      	ldrb	r3, [r3, r2]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d11a      	bne.n	80020d6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	5c9b      	ldrb	r3, [r3, r2]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	0249      	lsls	r1, r1, #9
 80020b8:	430a      	orrs	r2, r1
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	e00b      	b.n	80020d6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c2:	2220      	movs	r2, #32
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	2201      	movs	r2, #1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d11f      	bne.n	800211e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	492a      	ldr	r1, [pc, #168]	; (8002194 <HAL_ADC_Init+0x2e4>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6919      	ldr	r1, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80020fc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002102:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2101      	movs	r1, #1
 8002118:	430a      	orrs	r2, r1
 800211a:	611a      	str	r2, [r3, #16]
 800211c:	e00e      	b.n	800213c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2201      	movs	r2, #1
 8002126:	4013      	ands	r3, r2
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2101      	movs	r1, #1
 8002138:	438a      	bics	r2, r1
 800213a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2107      	movs	r1, #7
 8002148:	438a      	bics	r2, r1
 800214a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6959      	ldr	r1, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	2203      	movs	r2, #3
 800216a:	4393      	bics	r3, r2
 800216c:	2201      	movs	r2, #1
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	0018      	movs	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	b002      	add	sp, #8
 800217c:	bd80      	pop	{r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	fffffefd 	.word	0xfffffefd
 8002184:	40012708 	.word	0x40012708
 8002188:	ffc3ffff 	.word	0xffc3ffff
 800218c:	fdffffff 	.word	0xfdffffff
 8002190:	fffe0219 	.word	0xfffe0219
 8002194:	fffffc03 	.word	0xfffffc03

08002198 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a0:	230f      	movs	r3, #15
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2204      	movs	r2, #4
 80021b0:	4013      	ands	r3, r2
 80021b2:	d138      	bne.n	8002226 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2250      	movs	r2, #80	; 0x50
 80021b8:	5c9b      	ldrb	r3, [r3, r2]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_Start+0x2a>
 80021be:	2302      	movs	r3, #2
 80021c0:	e038      	b.n	8002234 <HAL_ADC_Start+0x9c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2250      	movs	r2, #80	; 0x50
 80021c6:	2101      	movs	r1, #1
 80021c8:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d007      	beq.n	80021e2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80021d2:	230f      	movs	r3, #15
 80021d4:	18fc      	adds	r4, r7, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 f983 	bl	80024e4 <ADC_Enable>
 80021de:	0003      	movs	r3, r0
 80021e0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021e2:	230f      	movs	r3, #15
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d120      	bne.n	800222e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_ADC_Start+0xa4>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	0052      	lsls	r2, r2, #1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2250      	movs	r2, #80	; 0x50
 8002208:	2100      	movs	r1, #0
 800220a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	221c      	movs	r2, #28
 8002212:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2104      	movs	r1, #4
 8002220:	430a      	orrs	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	e003      	b.n	800222e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002226:	230f      	movs	r3, #15
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	2202      	movs	r2, #2
 800222c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800222e:	230f      	movs	r3, #15
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	781b      	ldrb	r3, [r3, #0]
}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	b005      	add	sp, #20
 800223a:	bd90      	pop	{r4, r7, pc}
 800223c:	fffff0fe 	.word	0xfffff0fe

08002240 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	2b08      	cmp	r3, #8
 8002258:	d102      	bne.n	8002260 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800225a:	2308      	movs	r3, #8
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	e014      	b.n	800228a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	4013      	ands	r3, r2
 800226a:	2b01      	cmp	r3, #1
 800226c:	d10b      	bne.n	8002286 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	2220      	movs	r2, #32
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2250      	movs	r2, #80	; 0x50
 800227e:	2100      	movs	r1, #0
 8002280:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e072      	b.n	800236c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002286:	230c      	movs	r3, #12
 8002288:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800228a:	f7ff fde3 	bl	8001e54 <HAL_GetTick>
 800228e:	0003      	movs	r3, r0
 8002290:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002292:	e01f      	b.n	80022d4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	3301      	adds	r3, #1
 8002298:	d01c      	beq.n	80022d4 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <HAL_ADC_PollForConversion+0x70>
 80022a0:	f7ff fdd8 	bl	8001e54 <HAL_GetTick>
 80022a4:	0002      	movs	r2, r0
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d211      	bcs.n	80022d4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	d10b      	bne.n	80022d4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	2204      	movs	r2, #4
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2250      	movs	r2, #80	; 0x50
 80022cc:	2100      	movs	r1, #0
 80022ce:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e04b      	b.n	800236c <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4013      	ands	r3, r2
 80022de:	d0d9      	beq.n	8002294 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	23c0      	movs	r3, #192	; 0xc0
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	4013      	ands	r3, r2
 80022fa:	d12e      	bne.n	800235a <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002302:	2b00      	cmp	r3, #0
 8002304:	d129      	bne.n	800235a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2208      	movs	r2, #8
 800230e:	4013      	ands	r3, r2
 8002310:	2b08      	cmp	r3, #8
 8002312:	d122      	bne.n	800235a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2204      	movs	r2, #4
 800231c:	4013      	ands	r3, r2
 800231e:	d110      	bne.n	8002342 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	210c      	movs	r1, #12
 800232c:	438a      	bics	r2, r1
 800232e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002334:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <HAL_ADC_PollForConversion+0x134>)
 8002336:	4013      	ands	r3, r2
 8002338:	2201      	movs	r2, #1
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
 8002340:	e00b      	b.n	800235a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	2220      	movs	r2, #32
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	2201      	movs	r2, #1
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	220c      	movs	r2, #12
 8002368:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b004      	add	sp, #16
 8002372:	bd80      	pop	{r7, pc}
 8002374:	fffffefe 	.word	0xfffffefe

08002378 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2250      	movs	r2, #80	; 0x50
 800239e:	5c9b      	ldrb	r3, [r3, r2]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x18>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e085      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x124>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2250      	movs	r2, #80	; 0x50
 80023ac:	2101      	movs	r1, #1
 80023ae:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2204      	movs	r2, #4
 80023b8:	4013      	ands	r3, r2
 80023ba:	d00b      	beq.n	80023d4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	2220      	movs	r2, #32
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2250      	movs	r2, #80	; 0x50
 80023cc:	2100      	movs	r1, #0
 80023ce:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e06f      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a38      	ldr	r2, [pc, #224]	; (80024bc <HAL_ADC_ConfigChannel+0x12c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d035      	beq.n	800244a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	035b      	lsls	r3, r3, #13
 80023ea:	0b5a      	lsrs	r2, r3, #13
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	02db      	lsls	r3, r3, #11
 80023fc:	4013      	ands	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002400:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	0409      	lsls	r1, r1, #16
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800240e:	200a      	movs	r0, #10
 8002410:	f000 f8d0 	bl	80025b4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	4013      	ands	r3, r2
 800241e:	d006      	beq.n	800242e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	03c9      	lsls	r1, r1, #15
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	025b      	lsls	r3, r3, #9
 8002436:	4013      	ands	r3, r2
 8002438:	d037      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	0449      	lsls	r1, r1, #17
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e02f      	b.n	80024aa <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	035b      	lsls	r3, r3, #13
 8002456:	0b5b      	lsrs	r3, r3, #13
 8002458:	43d9      	mvns	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	400a      	ands	r2, r1
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	02db      	lsls	r3, r3, #11
 800246a:	4013      	ands	r3, r2
 800246c:	d005      	beq.n	800247a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 8002474:	4913      	ldr	r1, [pc, #76]	; (80024c4 <HAL_ADC_ConfigChannel+0x134>)
 8002476:	400a      	ands	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	029b      	lsls	r3, r3, #10
 8002482:	4013      	ands	r3, r2
 8002484:	d005      	beq.n	8002492 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_ADC_ConfigChannel+0x138>)
 800248e:	400a      	ands	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	025b      	lsls	r3, r3, #9
 800249a:	4013      	ands	r3, r2
 800249c:	d005      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_ADC_ConfigChannel+0x130>)
 80024a4:	4909      	ldr	r1, [pc, #36]	; (80024cc <HAL_ADC_ConfigChannel+0x13c>)
 80024a6:	400a      	ands	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2250      	movs	r2, #80	; 0x50
 80024ae:	2100      	movs	r1, #0
 80024b0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	00001001 	.word	0x00001001
 80024c0:	40012708 	.word	0x40012708
 80024c4:	ff7fffff 	.word	0xff7fffff
 80024c8:	ffbfffff 	.word	0xffbfffff
 80024cc:	feffffff 	.word	0xfeffffff

080024d0 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC handle state */
  return hadc->State;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2203      	movs	r2, #3
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d108      	bne.n	8002510 <ADC_Enable+0x2c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2201      	movs	r2, #1
 8002506:	4013      	ands	r3, r2
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <ADC_Enable+0x2c>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <ADC_Enable+0x2e>
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d146      	bne.n	80025a4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <ADC_Enable+0xcc>)
 800251e:	4013      	ands	r3, r2
 8002520:	d00d      	beq.n	800253e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	2210      	movs	r2, #16
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	2201      	movs	r2, #1
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e033      	b.n	80025a6 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2101      	movs	r1, #1
 800254a:	430a      	orrs	r2, r1
 800254c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800254e:	2001      	movs	r0, #1
 8002550:	f000 f830 	bl	80025b4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002554:	f7ff fc7e 	bl	8001e54 <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800255c:	e01b      	b.n	8002596 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800255e:	f7ff fc79 	bl	8001e54 <HAL_GetTick>
 8002562:	0002      	movs	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b0a      	cmp	r3, #10
 800256a:	d914      	bls.n	8002596 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2201      	movs	r2, #1
 8002574:	4013      	ands	r3, r2
 8002576:	2b01      	cmp	r3, #1
 8002578:	d00d      	beq.n	8002596 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	2210      	movs	r2, #16
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	2201      	movs	r2, #1
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e007      	b.n	80025a6 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d1dc      	bne.n	800255e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b004      	add	sp, #16
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	80000017 	.word	0x80000017

080025b4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <ADC_DelayMicroSecond+0x38>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	490b      	ldr	r1, [pc, #44]	; (80025f0 <ADC_DelayMicroSecond+0x3c>)
 80025c2:	0018      	movs	r0, r3
 80025c4:	f7fd fdb2 	bl	800012c <__udivsi3>
 80025c8:	0003      	movs	r3, r0
 80025ca:	001a      	movs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4353      	muls	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80025d2:	e002      	b.n	80025da <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	20000020 	.word	0x20000020
 80025f0:	000f4240 	.word	0x000f4240

080025f4 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fe:	2317      	movs	r3, #23
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2250      	movs	r2, #80	; 0x50
 8002612:	5c9b      	ldrb	r3, [r3, r2]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_ADCEx_Calibration_Start+0x28>
 8002618:	2302      	movs	r3, #2
 800261a:	e083      	b.n	8002724 <HAL_ADCEx_Calibration_Start+0x130>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2250      	movs	r2, #80	; 0x50
 8002620:	2101      	movs	r1, #1
 8002622:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2203      	movs	r2, #3
 800262c:	4013      	ands	r3, r2
 800262e:	2b01      	cmp	r3, #1
 8002630:	d108      	bne.n	8002644 <HAL_ADCEx_Calibration_Start+0x50>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2201      	movs	r2, #1
 800263a:	4013      	ands	r3, r2
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_ADCEx_Calibration_Start+0x50>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <HAL_ADCEx_Calibration_Start+0x52>
 8002644:	2300      	movs	r3, #0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d15b      	bne.n	8002702 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	4a37      	ldr	r2, [pc, #220]	; (800272c <HAL_ADCEx_Calibration_Start+0x138>)
 8002650:	4013      	ands	r3, r2
 8002652:	2202      	movs	r2, #2
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2203      	movs	r2, #3
 8002662:	4013      	ands	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2103      	movs	r1, #3
 8002672:	438a      	bics	r2, r1
 8002674:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	0609      	lsls	r1, r1, #24
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002688:	f7ff fbe4 	bl	8001e54 <HAL_GetTick>
 800268c:	0003      	movs	r3, r0
 800268e:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002690:	e01d      	b.n	80026ce <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002692:	f7ff fbdf 	bl	8001e54 <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b0a      	cmp	r3, #10
 800269e:	d916      	bls.n	80026ce <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0fdb      	lsrs	r3, r3, #31
 80026a8:	07da      	lsls	r2, r3, #31
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d10d      	bne.n	80026ce <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	2212      	movs	r2, #18
 80026b8:	4393      	bics	r3, r2
 80026ba:	2210      	movs	r2, #16
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2250      	movs	r2, #80	; 0x50
 80026c6:	2100      	movs	r1, #0
 80026c8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e02a      	b.n	8002724 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	0fdb      	lsrs	r3, r3, #31
 80026d6:	07da      	lsls	r2, r3, #31
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	061b      	lsls	r3, r3, #24
 80026dc:	429a      	cmp	r2, r3
 80026de:	d0d8      	beq.n	8002692 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68d9      	ldr	r1, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	2203      	movs	r2, #3
 80026f6:	4393      	bics	r3, r2
 80026f8:	2201      	movs	r2, #1
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
 8002700:	e009      	b.n	8002716 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	2220      	movs	r2, #32
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 800270e:	2317      	movs	r3, #23
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2250      	movs	r2, #80	; 0x50
 800271a:	2100      	movs	r1, #0
 800271c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800271e:	2317      	movs	r3, #23
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	781b      	ldrb	r3, [r3, #0]
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b006      	add	sp, #24
 800272a:	bd80      	pop	{r7, pc}
 800272c:	fffffefd 	.word	0xfffffefd

08002730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	0002      	movs	r2, r0
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800273c:	1dfb      	adds	r3, r7, #7
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b7f      	cmp	r3, #127	; 0x7f
 8002742:	d809      	bhi.n	8002758 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002744:	1dfb      	adds	r3, r7, #7
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	001a      	movs	r2, r3
 800274a:	231f      	movs	r3, #31
 800274c:	401a      	ands	r2, r3
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__NVIC_EnableIRQ+0x30>)
 8002750:	2101      	movs	r1, #1
 8002752:	4091      	lsls	r1, r2
 8002754:	000a      	movs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
  }
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}
 8002760:	e000e100 	.word	0xe000e100

08002764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	0002      	movs	r2, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b7f      	cmp	r3, #127	; 0x7f
 8002778:	d828      	bhi.n	80027cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800277a:	4a2f      	ldr	r2, [pc, #188]	; (8002838 <__NVIC_SetPriority+0xd4>)
 800277c:	1dfb      	adds	r3, r7, #7
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b25b      	sxtb	r3, r3
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	33c0      	adds	r3, #192	; 0xc0
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	589b      	ldr	r3, [r3, r2]
 800278a:	1dfa      	adds	r2, r7, #7
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	0011      	movs	r1, r2
 8002790:	2203      	movs	r2, #3
 8002792:	400a      	ands	r2, r1
 8002794:	00d2      	lsls	r2, r2, #3
 8002796:	21ff      	movs	r1, #255	; 0xff
 8002798:	4091      	lsls	r1, r2
 800279a:	000a      	movs	r2, r1
 800279c:	43d2      	mvns	r2, r2
 800279e:	401a      	ands	r2, r3
 80027a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	019b      	lsls	r3, r3, #6
 80027a6:	22ff      	movs	r2, #255	; 0xff
 80027a8:	401a      	ands	r2, r3
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	0018      	movs	r0, r3
 80027b0:	2303      	movs	r3, #3
 80027b2:	4003      	ands	r3, r0
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b8:	481f      	ldr	r0, [pc, #124]	; (8002838 <__NVIC_SetPriority+0xd4>)
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	430a      	orrs	r2, r1
 80027c4:	33c0      	adds	r3, #192	; 0xc0
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027ca:	e031      	b.n	8002830 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <__NVIC_SetPriority+0xd8>)
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	0019      	movs	r1, r3
 80027d4:	230f      	movs	r3, #15
 80027d6:	400b      	ands	r3, r1
 80027d8:	3b08      	subs	r3, #8
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3306      	adds	r3, #6
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	18d3      	adds	r3, r2, r3
 80027e2:	3304      	adds	r3, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	1dfa      	adds	r2, r7, #7
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	0011      	movs	r1, r2
 80027ec:	2203      	movs	r2, #3
 80027ee:	400a      	ands	r2, r1
 80027f0:	00d2      	lsls	r2, r2, #3
 80027f2:	21ff      	movs	r1, #255	; 0xff
 80027f4:	4091      	lsls	r1, r2
 80027f6:	000a      	movs	r2, r1
 80027f8:	43d2      	mvns	r2, r2
 80027fa:	401a      	ands	r2, r3
 80027fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	019b      	lsls	r3, r3, #6
 8002802:	22ff      	movs	r2, #255	; 0xff
 8002804:	401a      	ands	r2, r3
 8002806:	1dfb      	adds	r3, r7, #7
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	0018      	movs	r0, r3
 800280c:	2303      	movs	r3, #3
 800280e:	4003      	ands	r3, r0
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002814:	4809      	ldr	r0, [pc, #36]	; (800283c <__NVIC_SetPriority+0xd8>)
 8002816:	1dfb      	adds	r3, r7, #7
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	001c      	movs	r4, r3
 800281c:	230f      	movs	r3, #15
 800281e:	4023      	ands	r3, r4
 8002820:	3b08      	subs	r3, #8
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	430a      	orrs	r2, r1
 8002826:	3306      	adds	r3, #6
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	18c3      	adds	r3, r0, r3
 800282c:	3304      	adds	r3, #4
 800282e:	601a      	str	r2, [r3, #0]
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b003      	add	sp, #12
 8002836:	bd90      	pop	{r4, r7, pc}
 8002838:	e000e100 	.word	0xe000e100
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	1e5a      	subs	r2, r3, #1
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	045b      	lsls	r3, r3, #17
 8002850:	429a      	cmp	r2, r3
 8002852:	d301      	bcc.n	8002858 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002854:	2301      	movs	r3, #1
 8002856:	e010      	b.n	800287a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <SysTick_Config+0x44>)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	3a01      	subs	r2, #1
 800285e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002860:	2301      	movs	r3, #1
 8002862:	425b      	negs	r3, r3
 8002864:	2103      	movs	r1, #3
 8002866:	0018      	movs	r0, r3
 8002868:	f7ff ff7c 	bl	8002764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <SysTick_Config+0x44>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <SysTick_Config+0x44>)
 8002874:	2207      	movs	r2, #7
 8002876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002878:	2300      	movs	r3, #0
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b002      	add	sp, #8
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	e000e010 	.word	0xe000e010

08002888 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	210f      	movs	r1, #15
 8002894:	187b      	adds	r3, r7, r1
 8002896:	1c02      	adds	r2, r0, #0
 8002898:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	187b      	adds	r3, r7, r1
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7ff ff5d 	bl	8002764 <__NVIC_SetPriority>
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	0002      	movs	r2, r0
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	b25b      	sxtb	r3, r3
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff ff33 	bl	8002730 <__NVIC_EnableIRQ>
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b002      	add	sp, #8
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7ff ffaf 	bl	8002840 <SysTick_Config>
 80028e2:	0003      	movs	r3, r0
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f4:	230f      	movs	r3, #15
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2225      	movs	r2, #37	; 0x25
 8002900:	5c9b      	ldrb	r3, [r3, r2]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d008      	beq.n	800291a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2204      	movs	r2, #4
 800290c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2224      	movs	r2, #36	; 0x24
 8002912:	2100      	movs	r1, #0
 8002914:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e024      	b.n	8002964 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	210e      	movs	r1, #14
 8002926:	438a      	bics	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	438a      	bics	r2, r1
 8002938:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	221c      	movs	r2, #28
 8002940:	401a      	ands	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	2101      	movs	r1, #1
 8002948:	4091      	lsls	r1, r2
 800294a:	000a      	movs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2225      	movs	r2, #37	; 0x25
 8002952:	2101      	movs	r1, #1
 8002954:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2224      	movs	r2, #36	; 0x24
 800295a:	2100      	movs	r1, #0
 800295c:	5499      	strb	r1, [r3, r2]

    return status;
 800295e:	230f      	movs	r3, #15
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b004      	add	sp, #16
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002974:	210f      	movs	r1, #15
 8002976:	187b      	adds	r3, r7, r1
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2225      	movs	r2, #37	; 0x25
 8002980:	5c9b      	ldrb	r3, [r3, r2]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d006      	beq.n	8002996 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2204      	movs	r2, #4
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800298e:	187b      	adds	r3, r7, r1
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
 8002994:	e02a      	b.n	80029ec <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	210e      	movs	r1, #14
 80029a2:	438a      	bics	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	438a      	bics	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	221c      	movs	r2, #28
 80029bc:	401a      	ands	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2101      	movs	r1, #1
 80029c4:	4091      	lsls	r1, r2
 80029c6:	000a      	movs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2225      	movs	r2, #37	; 0x25
 80029ce:	2101      	movs	r1, #1
 80029d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2224      	movs	r2, #36	; 0x24
 80029d6:	2100      	movs	r1, #0
 80029d8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	0010      	movs	r0, r2
 80029ea:	4798      	blx	r3
    }
  }
  return status;
 80029ec:	230f      	movs	r3, #15
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	781b      	ldrb	r3, [r3, #0]
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a12:	e155      	b.n	8002cc0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2101      	movs	r1, #1
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4091      	lsls	r1, r2
 8002a1e:	000a      	movs	r2, r1
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d100      	bne.n	8002a2c <HAL_GPIO_Init+0x30>
 8002a2a:	e146      	b.n	8002cba <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2203      	movs	r2, #3
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d005      	beq.n	8002a44 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d130      	bne.n	8002aa6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	409a      	lsls	r2, r3
 8002a52:	0013      	movs	r3, r2
 8002a54:	43da      	mvns	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	409a      	lsls	r2, r3
 8002a66:	0013      	movs	r3, r2
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	0013      	movs	r3, r2
 8002a82:	43da      	mvns	r2, r3
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	091b      	lsrs	r3, r3, #4
 8002a90:	2201      	movs	r2, #1
 8002a92:	401a      	ands	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	409a      	lsls	r2, r3
 8002a98:	0013      	movs	r3, r2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d017      	beq.n	8002ae2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	0013      	movs	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d123      	bne.n	8002b36 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	08da      	lsrs	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3208      	adds	r2, #8
 8002af6:	0092      	lsls	r2, r2, #2
 8002af8:	58d3      	ldr	r3, [r2, r3]
 8002afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2207      	movs	r2, #7
 8002b00:	4013      	ands	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	409a      	lsls	r2, r3
 8002b08:	0013      	movs	r3, r2
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2107      	movs	r1, #7
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	0013      	movs	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	08da      	lsrs	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3208      	adds	r2, #8
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	6939      	ldr	r1, [r7, #16]
 8002b34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2203      	movs	r2, #3
 8002b42:	409a      	lsls	r2, r3
 8002b44:	0013      	movs	r3, r2
 8002b46:	43da      	mvns	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2203      	movs	r2, #3
 8002b54:	401a      	ands	r2, r3
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	0013      	movs	r3, r2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	23c0      	movs	r3, #192	; 0xc0
 8002b70:	029b      	lsls	r3, r3, #10
 8002b72:	4013      	ands	r3, r2
 8002b74:	d100      	bne.n	8002b78 <HAL_GPIO_Init+0x17c>
 8002b76:	e0a0      	b.n	8002cba <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b78:	4b57      	ldr	r3, [pc, #348]	; (8002cd8 <HAL_GPIO_Init+0x2dc>)
 8002b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7c:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <HAL_GPIO_Init+0x2dc>)
 8002b7e:	2101      	movs	r1, #1
 8002b80:	430a      	orrs	r2, r1
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b84:	4a55      	ldr	r2, [pc, #340]	; (8002cdc <HAL_GPIO_Init+0x2e0>)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	589b      	ldr	r3, [r3, r2]
 8002b90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2203      	movs	r2, #3
 8002b96:	4013      	ands	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	0013      	movs	r3, r2
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	23a0      	movs	r3, #160	; 0xa0
 8002bac:	05db      	lsls	r3, r3, #23
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d01f      	beq.n	8002bf2 <HAL_GPIO_Init+0x1f6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4a      	ldr	r2, [pc, #296]	; (8002ce0 <HAL_GPIO_Init+0x2e4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d019      	beq.n	8002bee <HAL_GPIO_Init+0x1f2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a49      	ldr	r2, [pc, #292]	; (8002ce4 <HAL_GPIO_Init+0x2e8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_GPIO_Init+0x1ee>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a48      	ldr	r2, [pc, #288]	; (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00d      	beq.n	8002be6 <HAL_GPIO_Init+0x1ea>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a47      	ldr	r2, [pc, #284]	; (8002cec <HAL_GPIO_Init+0x2f0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d007      	beq.n	8002be2 <HAL_GPIO_Init+0x1e6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a46      	ldr	r2, [pc, #280]	; (8002cf0 <HAL_GPIO_Init+0x2f4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_GPIO_Init+0x1e2>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e00a      	b.n	8002bf4 <HAL_GPIO_Init+0x1f8>
 8002bde:	2306      	movs	r3, #6
 8002be0:	e008      	b.n	8002bf4 <HAL_GPIO_Init+0x1f8>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e006      	b.n	8002bf4 <HAL_GPIO_Init+0x1f8>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e004      	b.n	8002bf4 <HAL_GPIO_Init+0x1f8>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e002      	b.n	8002bf4 <HAL_GPIO_Init+0x1f8>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_GPIO_Init+0x1f8>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	2103      	movs	r1, #3
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	0092      	lsls	r2, r2, #2
 8002bfc:	4093      	lsls	r3, r2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c04:	4935      	ldr	r1, [pc, #212]	; (8002cdc <HAL_GPIO_Init+0x2e0>)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c12:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <HAL_GPIO_Init+0x2f8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	025b      	lsls	r3, r3, #9
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c36:	4b2f      	ldr	r3, [pc, #188]	; (8002cf4 <HAL_GPIO_Init+0x2f8>)
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <HAL_GPIO_Init+0x2f8>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	43da      	mvns	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	029b      	lsls	r3, r3, #10
 8002c54:	4013      	ands	r3, r2
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c60:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <HAL_GPIO_Init+0x2f8>)
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c66:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <HAL_GPIO_Init+0x2f8>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	035b      	lsls	r3, r3, #13
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <HAL_GPIO_Init+0x2f8>)
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c90:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_GPIO_Init+0x2f8>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43da      	mvns	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	039b      	lsls	r3, r3, #14
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_GPIO_Init+0x2f8>)
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	40da      	lsrs	r2, r3
 8002cc8:	1e13      	subs	r3, r2, #0
 8002cca:	d000      	beq.n	8002cce <HAL_GPIO_Init+0x2d2>
 8002ccc:	e6a2      	b.n	8002a14 <HAL_GPIO_Init+0x18>
  }
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46c0      	nop			; (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b006      	add	sp, #24
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	50000400 	.word	0x50000400
 8002ce4:	50000800 	.word	0x50000800
 8002ce8:	50000c00 	.word	0x50000c00
 8002cec:	50001000 	.word	0x50001000
 8002cf0:	50001c00 	.word	0x50001c00
 8002cf4:	40010400 	.word	0x40010400

08002cf8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	0008      	movs	r0, r1
 8002d02:	0011      	movs	r1, r2
 8002d04:	1cbb      	adds	r3, r7, #2
 8002d06:	1c02      	adds	r2, r0, #0
 8002d08:	801a      	strh	r2, [r3, #0]
 8002d0a:	1c7b      	adds	r3, r7, #1
 8002d0c:	1c0a      	adds	r2, r1, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d10:	1c7b      	adds	r3, r7, #1
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d18:	1cbb      	adds	r3, r7, #2
 8002d1a:	881a      	ldrh	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002d20:	e003      	b.n	8002d2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002d22:	1cbb      	adds	r3, r7, #2
 8002d24:	881a      	ldrh	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b002      	add	sp, #8
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d34:	b5b0      	push	{r4, r5, r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f000 fbbf 	bl	80034c6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d48:	4bc9      	ldr	r3, [pc, #804]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	220c      	movs	r2, #12
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d52:	4bc7      	ldr	r3, [pc, #796]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	025b      	lsls	r3, r3, #9
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2201      	movs	r2, #1
 8002d64:	4013      	ands	r3, r2
 8002d66:	d100      	bne.n	8002d6a <HAL_RCC_OscConfig+0x36>
 8002d68:	e07e      	b.n	8002e68 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d007      	beq.n	8002d80 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d112      	bne.n	8002d9c <HAL_RCC_OscConfig+0x68>
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	025b      	lsls	r3, r3, #9
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d10d      	bne.n	8002d9c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	4bbb      	ldr	r3, [pc, #748]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	029b      	lsls	r3, r3, #10
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <HAL_RCC_OscConfig+0x5a>
 8002d8c:	e06b      	b.n	8002e66 <HAL_RCC_OscConfig+0x132>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d167      	bne.n	8002e66 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f000 fb95 	bl	80034c6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	025b      	lsls	r3, r3, #9
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_OscConfig+0x84>
 8002da8:	4bb1      	ldr	r3, [pc, #708]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4bb0      	ldr	r3, [pc, #704]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	0249      	lsls	r1, r1, #9
 8002db2:	430a      	orrs	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e027      	b.n	8002e08 <HAL_RCC_OscConfig+0xd4>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	23a0      	movs	r3, #160	; 0xa0
 8002dbe:	02db      	lsls	r3, r3, #11
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d10e      	bne.n	8002de2 <HAL_RCC_OscConfig+0xae>
 8002dc4:	4baa      	ldr	r3, [pc, #680]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4ba9      	ldr	r3, [pc, #676]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002dca:	2180      	movs	r1, #128	; 0x80
 8002dcc:	02c9      	lsls	r1, r1, #11
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	4ba7      	ldr	r3, [pc, #668]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4ba6      	ldr	r3, [pc, #664]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	0249      	lsls	r1, r1, #9
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e012      	b.n	8002e08 <HAL_RCC_OscConfig+0xd4>
 8002de2:	4ba3      	ldr	r3, [pc, #652]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4ba2      	ldr	r3, [pc, #648]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002de8:	49a2      	ldr	r1, [pc, #648]	; (8003074 <HAL_RCC_OscConfig+0x340>)
 8002dea:	400a      	ands	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	4ba0      	ldr	r3, [pc, #640]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	025b      	lsls	r3, r3, #9
 8002df6:	4013      	ands	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4b9c      	ldr	r3, [pc, #624]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b9b      	ldr	r3, [pc, #620]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002e02:	499d      	ldr	r1, [pc, #628]	; (8003078 <HAL_RCC_OscConfig+0x344>)
 8002e04:	400a      	ands	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d015      	beq.n	8002e3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7ff f820 	bl	8001e54 <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e18:	e009      	b.n	8002e2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1a:	f7ff f81b 	bl	8001e54 <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b64      	cmp	r3, #100	; 0x64
 8002e26:	d902      	bls.n	8002e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	f000 fb4c 	bl	80034c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e2e:	4b90      	ldr	r3, [pc, #576]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	029b      	lsls	r3, r3, #10
 8002e36:	4013      	ands	r3, r2
 8002e38:	d0ef      	beq.n	8002e1a <HAL_RCC_OscConfig+0xe6>
 8002e3a:	e015      	b.n	8002e68 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7ff f80a 	bl	8001e54 <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e46:	f7ff f805 	bl	8001e54 <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b64      	cmp	r3, #100	; 0x64
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e336      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e58:	4b85      	ldr	r3, [pc, #532]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	029b      	lsls	r3, r3, #10
 8002e60:	4013      	ands	r3, r2
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x112>
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d100      	bne.n	8002e74 <HAL_RCC_OscConfig+0x140>
 8002e72:	e099      	b.n	8002fa8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002e82:	4b7b      	ldr	r3, [pc, #492]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b7a      	ldr	r3, [pc, #488]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002e88:	2120      	movs	r1, #32
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	2220      	movs	r2, #32
 8002e92:	4393      	bics	r3, r2
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d13e      	bne.n	8002f20 <HAL_RCC_OscConfig+0x1ec>
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d13b      	bne.n	8002f20 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002ea8:	4b71      	ldr	r3, [pc, #452]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2204      	movs	r2, #4
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_RCC_OscConfig+0x188>
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e304      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebc:	4b6c      	ldr	r3, [pc, #432]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a6e      	ldr	r2, [pc, #440]	; (800307c <HAL_RCC_OscConfig+0x348>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	4b68      	ldr	r3, [pc, #416]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ed2:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2209      	movs	r2, #9
 8002ed8:	4393      	bics	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	4b64      	ldr	r3, [pc, #400]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ee4:	f000 fc42 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8002ee8:	0001      	movs	r1, r0
 8002eea:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	4a62      	ldr	r2, [pc, #392]	; (8003080 <HAL_RCC_OscConfig+0x34c>)
 8002ef6:	5cd3      	ldrb	r3, [r2, r3]
 8002ef8:	000a      	movs	r2, r1
 8002efa:	40da      	lsrs	r2, r3
 8002efc:	4b61      	ldr	r3, [pc, #388]	; (8003084 <HAL_RCC_OscConfig+0x350>)
 8002efe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002f00:	4b61      	ldr	r3, [pc, #388]	; (8003088 <HAL_RCC_OscConfig+0x354>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2513      	movs	r5, #19
 8002f06:	197c      	adds	r4, r7, r5
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7fe ff5d 	bl	8001dc8 <HAL_InitTick>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002f12:	197b      	adds	r3, r7, r5
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d046      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002f1a:	197b      	adds	r3, r7, r5
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	e2d2      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d027      	beq.n	8002f76 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f26:	4b52      	ldr	r3, [pc, #328]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2209      	movs	r2, #9
 8002f2c:	4393      	bics	r3, r2
 8002f2e:	0019      	movs	r1, r3
 8002f30:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe ff8c 	bl	8001e54 <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f42:	f7fe ff87 	bl	8001e54 <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e2b8      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f54:	4b46      	ldr	r3, [pc, #280]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d0f1      	beq.n	8002f42 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b44      	ldr	r3, [pc, #272]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4a46      	ldr	r2, [pc, #280]	; (800307c <HAL_RCC_OscConfig+0x348>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	0019      	movs	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	021a      	lsls	r2, r3, #8
 8002f6e:	4b40      	ldr	r3, [pc, #256]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002f70:	430a      	orrs	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	e018      	b.n	8002fa8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f76:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	438a      	bics	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe ff67 	bl	8001e54 <HAL_GetTick>
 8002f86:	0003      	movs	r3, r0
 8002f88:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8c:	f7fe ff62 	bl	8001e54 <HAL_GetTick>
 8002f90:	0002      	movs	r2, r0
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e293      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f9e:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d1f1      	bne.n	8002f8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2210      	movs	r2, #16
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d100      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x280>
 8002fb2:	e0a2      	b.n	80030fa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d140      	bne.n	800303c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fba:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x29e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e279      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fd2:	4b27      	ldr	r3, [pc, #156]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4a2d      	ldr	r2, [pc, #180]	; (800308c <HAL_RCC_OscConfig+0x358>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe0:	4b23      	ldr	r3, [pc, #140]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe6:	4b22      	ldr	r3, [pc, #136]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	0a19      	lsrs	r1, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	061a      	lsls	r2, r3, #24
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	0b5b      	lsrs	r3, r3, #13
 8003000:	3301      	adds	r3, #1
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	0212      	lsls	r2, r2, #8
 8003006:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	210f      	movs	r1, #15
 8003010:	400b      	ands	r3, r1
 8003012:	491b      	ldr	r1, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x34c>)
 8003014:	5ccb      	ldrb	r3, [r1, r3]
 8003016:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003018:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_OscConfig+0x350>)
 800301a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_RCC_OscConfig+0x354>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2513      	movs	r5, #19
 8003022:	197c      	adds	r4, r7, r5
 8003024:	0018      	movs	r0, r3
 8003026:	f7fe fecf 	bl	8001dc8 <HAL_InitTick>
 800302a:	0003      	movs	r3, r0
 800302c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800302e:	197b      	adds	r3, r7, r5
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d061      	beq.n	80030fa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003036:	197b      	adds	r3, r7, r5
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	e244      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d040      	beq.n	80030c6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCC_OscConfig+0x33c>)
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	0049      	lsls	r1, r1, #1
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fe feff 	bl	8001e54 <HAL_GetTick>
 8003056:	0003      	movs	r3, r0
 8003058:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800305a:	e019      	b.n	8003090 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800305c:	f7fe fefa 	bl	8001e54 <HAL_GetTick>
 8003060:	0002      	movs	r2, r0
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d912      	bls.n	8003090 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e22b      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	40021000 	.word	0x40021000
 8003074:	fffeffff 	.word	0xfffeffff
 8003078:	fffbffff 	.word	0xfffbffff
 800307c:	ffffe0ff 	.word	0xffffe0ff
 8003080:	08006a30 	.word	0x08006a30
 8003084:	20000020 	.word	0x20000020
 8003088:	20000024 	.word	0x20000024
 800308c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003090:	4bca      	ldr	r3, [pc, #808]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4013      	ands	r3, r2
 800309a:	d0df      	beq.n	800305c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800309c:	4bc7      	ldr	r3, [pc, #796]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4ac7      	ldr	r2, [pc, #796]	; (80033c0 <HAL_RCC_OscConfig+0x68c>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030aa:	4bc4      	ldr	r3, [pc, #784]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b0:	4bc2      	ldr	r3, [pc, #776]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	0a19      	lsrs	r1, r3, #8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	061a      	lsls	r2, r3, #24
 80030be:	4bbf      	ldr	r3, [pc, #764]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80030c0:	430a      	orrs	r2, r1
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	e019      	b.n	80030fa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030c6:	4bbd      	ldr	r3, [pc, #756]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4bbc      	ldr	r3, [pc, #752]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80030cc:	49bd      	ldr	r1, [pc, #756]	; (80033c4 <HAL_RCC_OscConfig+0x690>)
 80030ce:	400a      	ands	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7fe febf 	bl	8001e54 <HAL_GetTick>
 80030d6:	0003      	movs	r3, r0
 80030d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030dc:	f7fe feba 	bl	8001e54 <HAL_GetTick>
 80030e0:	0002      	movs	r2, r0
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1eb      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80030ee:	4bb3      	ldr	r3, [pc, #716]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4013      	ands	r3, r2
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2208      	movs	r2, #8
 8003100:	4013      	ands	r3, r2
 8003102:	d036      	beq.n	8003172 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d019      	beq.n	8003140 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310c:	4bab      	ldr	r3, [pc, #684]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 800310e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003110:	4baa      	ldr	r3, [pc, #680]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003112:	2101      	movs	r1, #1
 8003114:	430a      	orrs	r2, r1
 8003116:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003118:	f7fe fe9c 	bl	8001e54 <HAL_GetTick>
 800311c:	0003      	movs	r3, r0
 800311e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003122:	f7fe fe97 	bl	8001e54 <HAL_GetTick>
 8003126:	0002      	movs	r2, r0
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1c8      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003134:	4ba1      	ldr	r3, [pc, #644]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003138:	2202      	movs	r2, #2
 800313a:	4013      	ands	r3, r2
 800313c:	d0f1      	beq.n	8003122 <HAL_RCC_OscConfig+0x3ee>
 800313e:	e018      	b.n	8003172 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003140:	4b9e      	ldr	r3, [pc, #632]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003142:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003144:	4b9d      	ldr	r3, [pc, #628]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003146:	2101      	movs	r1, #1
 8003148:	438a      	bics	r2, r1
 800314a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7fe fe82 	bl	8001e54 <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003156:	f7fe fe7d 	bl	8001e54 <HAL_GetTick>
 800315a:	0002      	movs	r2, r0
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e1ae      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003168:	4b94      	ldr	r3, [pc, #592]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	2202      	movs	r2, #2
 800316e:	4013      	ands	r3, r2
 8003170:	d1f1      	bne.n	8003156 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2204      	movs	r2, #4
 8003178:	4013      	ands	r3, r2
 800317a:	d100      	bne.n	800317e <HAL_RCC_OscConfig+0x44a>
 800317c:	e0ae      	b.n	80032dc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317e:	2023      	movs	r0, #35	; 0x23
 8003180:	183b      	adds	r3, r7, r0
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003186:	4b8d      	ldr	r3, [pc, #564]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	055b      	lsls	r3, r3, #21
 800318e:	4013      	ands	r3, r2
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	4b8a      	ldr	r3, [pc, #552]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003196:	4b89      	ldr	r3, [pc, #548]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	0549      	lsls	r1, r1, #21
 800319c:	430a      	orrs	r2, r1
 800319e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80031a0:	183b      	adds	r3, r7, r0
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x694>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4013      	ands	r3, r2
 80031b0:	d11a      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b2:	4b85      	ldr	r3, [pc, #532]	; (80033c8 <HAL_RCC_OscConfig+0x694>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b84      	ldr	r3, [pc, #528]	; (80033c8 <HAL_RCC_OscConfig+0x694>)
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	0049      	lsls	r1, r1, #1
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c0:	f7fe fe48 	bl	8001e54 <HAL_GetTick>
 80031c4:	0003      	movs	r3, r0
 80031c6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ca:	f7fe fe43 	bl	8001e54 <HAL_GetTick>
 80031ce:	0002      	movs	r2, r0
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b64      	cmp	r3, #100	; 0x64
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e174      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b7a      	ldr	r3, [pc, #488]	; (80033c8 <HAL_RCC_OscConfig+0x694>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4013      	ands	r3, r2
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_OscConfig+0x4d0>
 80031f4:	4b71      	ldr	r3, [pc, #452]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80031f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031f8:	4b70      	ldr	r3, [pc, #448]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80031fa:	2180      	movs	r1, #128	; 0x80
 80031fc:	0049      	lsls	r1, r1, #1
 80031fe:	430a      	orrs	r2, r1
 8003200:	651a      	str	r2, [r3, #80]	; 0x50
 8003202:	e031      	b.n	8003268 <HAL_RCC_OscConfig+0x534>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10c      	bne.n	8003226 <HAL_RCC_OscConfig+0x4f2>
 800320c:	4b6b      	ldr	r3, [pc, #428]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 800320e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003210:	4b6a      	ldr	r3, [pc, #424]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003212:	496c      	ldr	r1, [pc, #432]	; (80033c4 <HAL_RCC_OscConfig+0x690>)
 8003214:	400a      	ands	r2, r1
 8003216:	651a      	str	r2, [r3, #80]	; 0x50
 8003218:	4b68      	ldr	r3, [pc, #416]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 800321a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800321c:	4b67      	ldr	r3, [pc, #412]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 800321e:	496b      	ldr	r1, [pc, #428]	; (80033cc <HAL_RCC_OscConfig+0x698>)
 8003220:	400a      	ands	r2, r1
 8003222:	651a      	str	r2, [r3, #80]	; 0x50
 8003224:	e020      	b.n	8003268 <HAL_RCC_OscConfig+0x534>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	23a0      	movs	r3, #160	; 0xa0
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	429a      	cmp	r2, r3
 8003230:	d10e      	bne.n	8003250 <HAL_RCC_OscConfig+0x51c>
 8003232:	4b62      	ldr	r3, [pc, #392]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003236:	4b61      	ldr	r3, [pc, #388]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	00c9      	lsls	r1, r1, #3
 800323c:	430a      	orrs	r2, r1
 800323e:	651a      	str	r2, [r3, #80]	; 0x50
 8003240:	4b5e      	ldr	r3, [pc, #376]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003242:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003244:	4b5d      	ldr	r3, [pc, #372]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	0049      	lsls	r1, r1, #1
 800324a:	430a      	orrs	r2, r1
 800324c:	651a      	str	r2, [r3, #80]	; 0x50
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0x534>
 8003250:	4b5a      	ldr	r3, [pc, #360]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003254:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003256:	495b      	ldr	r1, [pc, #364]	; (80033c4 <HAL_RCC_OscConfig+0x690>)
 8003258:	400a      	ands	r2, r1
 800325a:	651a      	str	r2, [r3, #80]	; 0x50
 800325c:	4b57      	ldr	r3, [pc, #348]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 800325e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003260:	4b56      	ldr	r3, [pc, #344]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003262:	495a      	ldr	r1, [pc, #360]	; (80033cc <HAL_RCC_OscConfig+0x698>)
 8003264:	400a      	ands	r2, r1
 8003266:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d015      	beq.n	800329c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003270:	f7fe fdf0 	bl	8001e54 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003278:	e009      	b.n	800328e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fe fdeb 	bl	8001e54 <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_RCC_OscConfig+0x69c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e11b      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800328e:	4b4b      	ldr	r3, [pc, #300]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4013      	ands	r3, r2
 8003298:	d0ef      	beq.n	800327a <HAL_RCC_OscConfig+0x546>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7fe fdda 	bl	8001e54 <HAL_GetTick>
 80032a0:	0003      	movs	r3, r0
 80032a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032a4:	e009      	b.n	80032ba <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fe fdd5 	bl	8001e54 <HAL_GetTick>
 80032aa:	0002      	movs	r2, r0
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	4a47      	ldr	r2, [pc, #284]	; (80033d0 <HAL_RCC_OscConfig+0x69c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e105      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032ba:	4b40      	ldr	r3, [pc, #256]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80032bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	d1ef      	bne.n	80032a6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032c6:	2323      	movs	r3, #35	; 0x23
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80032d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d4:	4b39      	ldr	r3, [pc, #228]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80032d6:	493f      	ldr	r1, [pc, #252]	; (80033d4 <HAL_RCC_OscConfig+0x6a0>)
 80032d8:	400a      	ands	r2, r1
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2220      	movs	r2, #32
 80032e2:	4013      	ands	r3, r2
 80032e4:	d049      	beq.n	800337a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d026      	beq.n	800333c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80032ee:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b32      	ldr	r3, [pc, #200]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80032f4:	2101      	movs	r1, #1
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	4b30      	ldr	r3, [pc, #192]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 80032fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032fe:	4b2f      	ldr	r3, [pc, #188]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003300:	2101      	movs	r1, #1
 8003302:	430a      	orrs	r2, r1
 8003304:	635a      	str	r2, [r3, #52]	; 0x34
 8003306:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_OscConfig+0x6a4>)
 8003308:	6a1a      	ldr	r2, [r3, #32]
 800330a:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <HAL_RCC_OscConfig+0x6a4>)
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	0189      	lsls	r1, r1, #6
 8003310:	430a      	orrs	r2, r1
 8003312:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fe fd9e 	bl	8001e54 <HAL_GetTick>
 8003318:	0003      	movs	r3, r0
 800331a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800331e:	f7fe fd99 	bl	8001e54 <HAL_GetTick>
 8003322:	0002      	movs	r2, r0
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0ca      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003330:	4b22      	ldr	r3, [pc, #136]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2202      	movs	r2, #2
 8003336:	4013      	ands	r3, r2
 8003338:	d0f1      	beq.n	800331e <HAL_RCC_OscConfig+0x5ea>
 800333a:	e01e      	b.n	800337a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800333c:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003342:	2101      	movs	r1, #1
 8003344:	438a      	bics	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <HAL_RCC_OscConfig+0x6a4>)
 800334a:	6a1a      	ldr	r2, [r3, #32]
 800334c:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <HAL_RCC_OscConfig+0x6a4>)
 800334e:	4923      	ldr	r1, [pc, #140]	; (80033dc <HAL_RCC_OscConfig+0x6a8>)
 8003350:	400a      	ands	r2, r1
 8003352:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe fd7e 	bl	8001e54 <HAL_GetTick>
 8003358:	0003      	movs	r3, r0
 800335a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800335e:	f7fe fd79 	bl	8001e54 <HAL_GetTick>
 8003362:	0002      	movs	r2, r0
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e0aa      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2202      	movs	r2, #2
 8003376:	4013      	ands	r3, r2
 8003378:	d1f1      	bne.n	800335e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d100      	bne.n	8003384 <HAL_RCC_OscConfig+0x650>
 8003382:	e09f      	b.n	80034c4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d100      	bne.n	800338c <HAL_RCC_OscConfig+0x658>
 800338a:	e078      	b.n	800347e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	2b02      	cmp	r3, #2
 8003392:	d159      	bne.n	8003448 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_RCC_OscConfig+0x688>)
 800339a:	4911      	ldr	r1, [pc, #68]	; (80033e0 <HAL_RCC_OscConfig+0x6ac>)
 800339c:	400a      	ands	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fd58 	bl	8001e54 <HAL_GetTick>
 80033a4:	0003      	movs	r3, r0
 80033a6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033a8:	e01c      	b.n	80033e4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fd53 	bl	8001e54 <HAL_GetTick>
 80033ae:	0002      	movs	r2, r0
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d915      	bls.n	80033e4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e084      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
 80033bc:	40021000 	.word	0x40021000
 80033c0:	ffff1fff 	.word	0xffff1fff
 80033c4:	fffffeff 	.word	0xfffffeff
 80033c8:	40007000 	.word	0x40007000
 80033cc:	fffffbff 	.word	0xfffffbff
 80033d0:	00001388 	.word	0x00001388
 80033d4:	efffffff 	.word	0xefffffff
 80033d8:	40010000 	.word	0x40010000
 80033dc:	ffffdfff 	.word	0xffffdfff
 80033e0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033e4:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <HAL_RCC_OscConfig+0x79c>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	049b      	lsls	r3, r3, #18
 80033ec:	4013      	ands	r3, r2
 80033ee:	d1dc      	bne.n	80033aa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_RCC_OscConfig+0x79c>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a37      	ldr	r2, [pc, #220]	; (80034d4 <HAL_RCC_OscConfig+0x7a0>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003408:	431a      	orrs	r2, r3
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_RCC_OscConfig+0x79c>)
 800340c:	430a      	orrs	r2, r1
 800340e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003410:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_RCC_OscConfig+0x79c>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <HAL_RCC_OscConfig+0x79c>)
 8003416:	2180      	movs	r1, #128	; 0x80
 8003418:	0449      	lsls	r1, r1, #17
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fe fd19 	bl	8001e54 <HAL_GetTick>
 8003422:	0003      	movs	r3, r0
 8003424:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003428:	f7fe fd14 	bl	8001e54 <HAL_GetTick>
 800342c:	0002      	movs	r2, r0
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e045      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_RCC_OscConfig+0x79c>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	049b      	lsls	r3, r3, #18
 8003442:	4013      	ands	r3, r2
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x6f4>
 8003446:	e03d      	b.n	80034c4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003448:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <HAL_RCC_OscConfig+0x79c>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_RCC_OscConfig+0x79c>)
 800344e:	4922      	ldr	r1, [pc, #136]	; (80034d8 <HAL_RCC_OscConfig+0x7a4>)
 8003450:	400a      	ands	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fcfe 	bl	8001e54 <HAL_GetTick>
 8003458:	0003      	movs	r3, r0
 800345a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345e:	f7fe fcf9 	bl	8001e54 <HAL_GetTick>
 8003462:	0002      	movs	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e02a      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003470:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_RCC_OscConfig+0x79c>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	049b      	lsls	r3, r3, #18
 8003478:	4013      	ands	r3, r2
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0x72a>
 800347c:	e022      	b.n	80034c4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e01d      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_RCC_OscConfig+0x79c>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	025b      	lsls	r3, r3, #9
 8003496:	401a      	ands	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	429a      	cmp	r2, r3
 800349e:	d10f      	bne.n	80034c0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	23f0      	movs	r3, #240	; 0xf0
 80034a4:	039b      	lsls	r3, r3, #14
 80034a6:	401a      	ands	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d107      	bne.n	80034c0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	23c0      	movs	r3, #192	; 0xc0
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	401a      	ands	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b00a      	add	sp, #40	; 0x28
 80034cc:	bdb0      	pop	{r4, r5, r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	40021000 	.word	0x40021000
 80034d4:	ff02ffff 	.word	0xff02ffff
 80034d8:	feffffff 	.word	0xfeffffff

080034dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034dc:	b5b0      	push	{r4, r5, r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e128      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f0:	4b96      	ldr	r3, [pc, #600]	; (800374c <HAL_RCC_ClockConfig+0x270>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2201      	movs	r2, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d91e      	bls.n	800353c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b93      	ldr	r3, [pc, #588]	; (800374c <HAL_RCC_ClockConfig+0x270>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2201      	movs	r2, #1
 8003504:	4393      	bics	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	4b90      	ldr	r3, [pc, #576]	; (800374c <HAL_RCC_ClockConfig+0x270>)
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003510:	f7fe fca0 	bl	8001e54 <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003518:	e009      	b.n	800352e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351a:	f7fe fc9b 	bl	8001e54 <HAL_GetTick>
 800351e:	0002      	movs	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	4a8a      	ldr	r2, [pc, #552]	; (8003750 <HAL_RCC_ClockConfig+0x274>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e109      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b87      	ldr	r3, [pc, #540]	; (800374c <HAL_RCC_ClockConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	4013      	ands	r3, r2
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d1ee      	bne.n	800351a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2202      	movs	r2, #2
 8003542:	4013      	ands	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003546:	4b83      	ldr	r3, [pc, #524]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	22f0      	movs	r2, #240	; 0xf0
 800354c:	4393      	bics	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	4b7f      	ldr	r3, [pc, #508]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 8003556:	430a      	orrs	r2, r1
 8003558:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2201      	movs	r2, #1
 8003560:	4013      	ands	r3, r2
 8003562:	d100      	bne.n	8003566 <HAL_RCC_ClockConfig+0x8a>
 8003564:	e089      	b.n	800367a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800356e:	4b79      	ldr	r3, [pc, #484]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	029b      	lsls	r3, r3, #10
 8003576:	4013      	ands	r3, r2
 8003578:	d120      	bne.n	80035bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0e1      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003586:	4b73      	ldr	r3, [pc, #460]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	049b      	lsls	r3, r3, #18
 800358e:	4013      	ands	r3, r2
 8003590:	d114      	bne.n	80035bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e0d5      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d106      	bne.n	80035ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800359e:	4b6d      	ldr	r3, [pc, #436]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2204      	movs	r2, #4
 80035a4:	4013      	ands	r3, r2
 80035a6:	d109      	bne.n	80035bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0ca      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035ac:	4b69      	ldr	r3, [pc, #420]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4013      	ands	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0c2      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035bc:	4b65      	ldr	r3, [pc, #404]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2203      	movs	r2, #3
 80035c2:	4393      	bics	r3, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	4b62      	ldr	r3, [pc, #392]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 80035cc:	430a      	orrs	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d0:	f7fe fc40 	bl	8001e54 <HAL_GetTick>
 80035d4:	0003      	movs	r3, r0
 80035d6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d111      	bne.n	8003604 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e0:	e009      	b.n	80035f6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e2:	f7fe fc37 	bl	8001e54 <HAL_GetTick>
 80035e6:	0002      	movs	r2, r0
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	4a58      	ldr	r2, [pc, #352]	; (8003750 <HAL_RCC_ClockConfig+0x274>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0a5      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035f6:	4b57      	ldr	r3, [pc, #348]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	220c      	movs	r2, #12
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d1ef      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x106>
 8003602:	e03a      	b.n	800367a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d111      	bne.n	8003630 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800360c:	e009      	b.n	8003622 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360e:	f7fe fc21 	bl	8001e54 <HAL_GetTick>
 8003612:	0002      	movs	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	4a4d      	ldr	r2, [pc, #308]	; (8003750 <HAL_RCC_ClockConfig+0x274>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e08f      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003622:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	220c      	movs	r2, #12
 8003628:	4013      	ands	r3, r2
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d1ef      	bne.n	800360e <HAL_RCC_ClockConfig+0x132>
 800362e:	e024      	b.n	800367a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d11b      	bne.n	8003670 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003638:	e009      	b.n	800364e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363a:	f7fe fc0b 	bl	8001e54 <HAL_GetTick>
 800363e:	0002      	movs	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	4a42      	ldr	r2, [pc, #264]	; (8003750 <HAL_RCC_ClockConfig+0x274>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e079      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800364e:	4b41      	ldr	r3, [pc, #260]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	220c      	movs	r2, #12
 8003654:	4013      	ands	r3, r2
 8003656:	2b04      	cmp	r3, #4
 8003658:	d1ef      	bne.n	800363a <HAL_RCC_ClockConfig+0x15e>
 800365a:	e00e      	b.n	800367a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365c:	f7fe fbfa 	bl	8001e54 <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	4a3a      	ldr	r2, [pc, #232]	; (8003750 <HAL_RCC_ClockConfig+0x274>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e068      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003670:	4b38      	ldr	r3, [pc, #224]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	220c      	movs	r2, #12
 8003676:	4013      	ands	r3, r2
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800367a:	4b34      	ldr	r3, [pc, #208]	; (800374c <HAL_RCC_ClockConfig+0x270>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2201      	movs	r2, #1
 8003680:	4013      	ands	r3, r2
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d21e      	bcs.n	80036c6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003688:	4b30      	ldr	r3, [pc, #192]	; (800374c <HAL_RCC_ClockConfig+0x270>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2201      	movs	r2, #1
 800368e:	4393      	bics	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_RCC_ClockConfig+0x270>)
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800369a:	f7fe fbdb 	bl	8001e54 <HAL_GetTick>
 800369e:	0003      	movs	r3, r0
 80036a0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	e009      	b.n	80036b8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7fe fbd6 	bl	8001e54 <HAL_GetTick>
 80036a8:	0002      	movs	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	4a28      	ldr	r2, [pc, #160]	; (8003750 <HAL_RCC_ClockConfig+0x274>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e044      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b8:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_RCC_ClockConfig+0x270>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	4013      	ands	r3, r2
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d1ee      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2204      	movs	r2, #4
 80036cc:	4013      	ands	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d0:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a20      	ldr	r2, [pc, #128]	; (8003758 <HAL_RCC_ClockConfig+0x27c>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 80036e0:	430a      	orrs	r2, r1
 80036e2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2208      	movs	r2, #8
 80036ea:	4013      	ands	r3, r2
 80036ec:	d00a      	beq.n	8003704 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ee:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	4a1a      	ldr	r2, [pc, #104]	; (800375c <HAL_RCC_ClockConfig+0x280>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	0019      	movs	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	00da      	lsls	r2, r3, #3
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 8003700:	430a      	orrs	r2, r1
 8003702:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003704:	f000 f832 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8003708:	0001      	movs	r1, r0
 800370a:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_RCC_ClockConfig+0x278>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	220f      	movs	r2, #15
 8003712:	4013      	ands	r3, r2
 8003714:	4a12      	ldr	r2, [pc, #72]	; (8003760 <HAL_RCC_ClockConfig+0x284>)
 8003716:	5cd3      	ldrb	r3, [r2, r3]
 8003718:	000a      	movs	r2, r1
 800371a:	40da      	lsrs	r2, r3
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <HAL_RCC_ClockConfig+0x288>)
 800371e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_RCC_ClockConfig+0x28c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	250b      	movs	r5, #11
 8003726:	197c      	adds	r4, r7, r5
 8003728:	0018      	movs	r0, r3
 800372a:	f7fe fb4d 	bl	8001dc8 <HAL_InitTick>
 800372e:	0003      	movs	r3, r0
 8003730:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003732:	197b      	adds	r3, r7, r5
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800373a:	197b      	adds	r3, r7, r5
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	e000      	b.n	8003742 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b004      	add	sp, #16
 8003748:	bdb0      	pop	{r4, r5, r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	40022000 	.word	0x40022000
 8003750:	00001388 	.word	0x00001388
 8003754:	40021000 	.word	0x40021000
 8003758:	fffff8ff 	.word	0xfffff8ff
 800375c:	ffffc7ff 	.word	0xffffc7ff
 8003760:	08006a30 	.word	0x08006a30
 8003764:	20000020 	.word	0x20000020
 8003768:	20000024 	.word	0x20000024

0800376c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800376c:	b5b0      	push	{r4, r5, r7, lr}
 800376e:	b08e      	sub	sp, #56	; 0x38
 8003770:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003772:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800377a:	230c      	movs	r3, #12
 800377c:	4013      	ands	r3, r2
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d014      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x40>
 8003782:	d900      	bls.n	8003786 <HAL_RCC_GetSysClockFreq+0x1a>
 8003784:	e07b      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x112>
 8003786:	2b04      	cmp	r3, #4
 8003788:	d002      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x24>
 800378a:	2b08      	cmp	r3, #8
 800378c:	d00b      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800378e:	e076      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003790:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2210      	movs	r2, #16
 8003796:	4013      	ands	r3, r2
 8003798:	d002      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800379a:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800379c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800379e:	e07c      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80037a0:	4b42      	ldr	r3, [pc, #264]	; (80038ac <HAL_RCC_GetSysClockFreq+0x140>)
 80037a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037a4:	e079      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037a6:	4b42      	ldr	r3, [pc, #264]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80037a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037aa:	e076      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	0c9a      	lsrs	r2, r3, #18
 80037b0:	230f      	movs	r3, #15
 80037b2:	401a      	ands	r2, r3
 80037b4:	4b3f      	ldr	r3, [pc, #252]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x148>)
 80037b6:	5c9b      	ldrb	r3, [r3, r2]
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	0d9a      	lsrs	r2, r3, #22
 80037be:	2303      	movs	r3, #3
 80037c0:	4013      	ands	r3, r2
 80037c2:	3301      	adds	r3, #1
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037c6:	4b37      	ldr	r3, [pc, #220]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x138>)
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	2380      	movs	r3, #128	; 0x80
 80037cc:	025b      	lsls	r3, r3, #9
 80037ce:	4013      	ands	r3, r2
 80037d0:	d01a      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	4a35      	ldr	r2, [pc, #212]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80037dc:	2300      	movs	r3, #0
 80037de:	69b8      	ldr	r0, [r7, #24]
 80037e0:	69f9      	ldr	r1, [r7, #28]
 80037e2:	f7fc fd4f 	bl	8000284 <__aeabi_lmul>
 80037e6:	0002      	movs	r2, r0
 80037e8:	000b      	movs	r3, r1
 80037ea:	0010      	movs	r0, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f7fc fd23 	bl	8000244 <__aeabi_uldivmod>
 80037fe:	0002      	movs	r2, r0
 8003800:	000b      	movs	r3, r1
 8003802:	0013      	movs	r3, r2
 8003804:	637b      	str	r3, [r7, #52]	; 0x34
 8003806:	e037      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003808:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2210      	movs	r2, #16
 800380e:	4013      	ands	r3, r2
 8003810:	d01a      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800381c:	2300      	movs	r3, #0
 800381e:	68b8      	ldr	r0, [r7, #8]
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	f7fc fd2f 	bl	8000284 <__aeabi_lmul>
 8003826:	0002      	movs	r2, r0
 8003828:	000b      	movs	r3, r1
 800382a:	0010      	movs	r0, r2
 800382c:	0019      	movs	r1, r3
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	2300      	movs	r3, #0
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f7fc fd03 	bl	8000244 <__aeabi_uldivmod>
 800383e:	0002      	movs	r2, r0
 8003840:	000b      	movs	r3, r1
 8003842:	0013      	movs	r3, r2
 8003844:	637b      	str	r3, [r7, #52]	; 0x34
 8003846:	e017      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	0018      	movs	r0, r3
 800384c:	2300      	movs	r3, #0
 800384e:	0019      	movs	r1, r3
 8003850:	4a16      	ldr	r2, [pc, #88]	; (80038ac <HAL_RCC_GetSysClockFreq+0x140>)
 8003852:	2300      	movs	r3, #0
 8003854:	f7fc fd16 	bl	8000284 <__aeabi_lmul>
 8003858:	0002      	movs	r2, r0
 800385a:	000b      	movs	r3, r1
 800385c:	0010      	movs	r0, r2
 800385e:	0019      	movs	r1, r3
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	001c      	movs	r4, r3
 8003864:	2300      	movs	r3, #0
 8003866:	001d      	movs	r5, r3
 8003868:	0022      	movs	r2, r4
 800386a:	002b      	movs	r3, r5
 800386c:	f7fc fcea 	bl	8000244 <__aeabi_uldivmod>
 8003870:	0002      	movs	r2, r0
 8003872:	000b      	movs	r3, r1
 8003874:	0013      	movs	r3, r2
 8003876:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800387c:	e00d      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	0b5b      	lsrs	r3, r3, #13
 8003884:	2207      	movs	r2, #7
 8003886:	4013      	ands	r3, r2
 8003888:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	3301      	adds	r3, #1
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	0212      	lsls	r2, r2, #8
 8003892:	409a      	lsls	r2, r3
 8003894:	0013      	movs	r3, r2
 8003896:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003898:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b00e      	add	sp, #56	; 0x38
 80038a2:	bdb0      	pop	{r4, r5, r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	003d0900 	.word	0x003d0900
 80038ac:	00f42400 	.word	0x00f42400
 80038b0:	007a1200 	.word	0x007a1200
 80038b4:	08006a48 	.word	0x08006a48

080038b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038bc:	4b02      	ldr	r3, [pc, #8]	; (80038c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	0018      	movs	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	20000020 	.word	0x20000020

080038cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038d0:	f7ff fff2 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80038d4:	0001      	movs	r1, r0
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	2207      	movs	r2, #7
 80038de:	4013      	ands	r3, r2
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	40d9      	lsrs	r1, r3
 80038e6:	000b      	movs	r3, r1
}
 80038e8:	0018      	movs	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	40021000 	.word	0x40021000
 80038f4:	08006a40 	.word	0x08006a40

080038f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038fc:	f7ff ffdc 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003900:	0001      	movs	r1, r0
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	0adb      	lsrs	r3, r3, #11
 8003908:	2207      	movs	r2, #7
 800390a:	4013      	ands	r3, r2
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x28>)
 800390e:	5cd3      	ldrb	r3, [r2, r3]
 8003910:	40d9      	lsrs	r1, r3
 8003912:	000b      	movs	r3, r1
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	40021000 	.word	0x40021000
 8003920:	08006a40 	.word	0x08006a40

08003924 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800392c:	2317      	movs	r3, #23
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2220      	movs	r2, #32
 800393a:	4013      	ands	r3, r2
 800393c:	d106      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	4013      	ands	r3, r2
 8003948:	d100      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800394a:	e0d9      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394c:	4ba4      	ldr	r3, [pc, #656]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800394e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	055b      	lsls	r3, r3, #21
 8003954:	4013      	ands	r3, r2
 8003956:	d10a      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003958:	4ba1      	ldr	r3, [pc, #644]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800395a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800395c:	4ba0      	ldr	r3, [pc, #640]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800395e:	2180      	movs	r1, #128	; 0x80
 8003960:	0549      	lsls	r1, r1, #21
 8003962:	430a      	orrs	r2, r1
 8003964:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003966:	2317      	movs	r3, #23
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396e:	4b9d      	ldr	r3, [pc, #628]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4013      	ands	r3, r2
 8003978:	d11a      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397a:	4b9a      	ldr	r3, [pc, #616]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b99      	ldr	r3, [pc, #612]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	0049      	lsls	r1, r1, #1
 8003984:	430a      	orrs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003988:	f7fe fa64 	bl	8001e54 <HAL_GetTick>
 800398c:	0003      	movs	r3, r0
 800398e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	e008      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fe fa5f 	bl	8001e54 <HAL_GetTick>
 8003996:	0002      	movs	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b64      	cmp	r3, #100	; 0x64
 800399e:	d901      	bls.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e118      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	4b8f      	ldr	r3, [pc, #572]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4013      	ands	r3, r2
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80039b0:	4b8b      	ldr	r3, [pc, #556]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	23c0      	movs	r3, #192	; 0xc0
 80039b6:	039b      	lsls	r3, r3, #14
 80039b8:	4013      	ands	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	23c0      	movs	r3, #192	; 0xc0
 80039c2:	039b      	lsls	r3, r3, #14
 80039c4:	4013      	ands	r3, r2
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d107      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	23c0      	movs	r3, #192	; 0xc0
 80039d2:	039b      	lsls	r3, r3, #14
 80039d4:	4013      	ands	r3, r2
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d013      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	23c0      	movs	r3, #192	; 0xc0
 80039e2:	029b      	lsls	r3, r3, #10
 80039e4:	401a      	ands	r2, r3
 80039e6:	23c0      	movs	r3, #192	; 0xc0
 80039e8:	029b      	lsls	r3, r3, #10
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d10a      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039ee:	4b7c      	ldr	r3, [pc, #496]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	029b      	lsls	r3, r3, #10
 80039f6:	401a      	ands	r2, r3
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	029b      	lsls	r3, r3, #10
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d101      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0e8      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003a04:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a08:	23c0      	movs	r3, #192	; 0xc0
 8003a0a:	029b      	lsls	r3, r3, #10
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d049      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	23c0      	movs	r3, #192	; 0xc0
 8003a1c:	029b      	lsls	r3, r3, #10
 8003a1e:	4013      	ands	r3, r2
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d004      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d10d      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	23c0      	movs	r3, #192	; 0xc0
 8003a36:	029b      	lsls	r3, r3, #10
 8003a38:	4013      	ands	r3, r2
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d034      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d02e      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003a4c:	4b64      	ldr	r3, [pc, #400]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a50:	4a65      	ldr	r2, [pc, #404]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a56:	4b62      	ldr	r3, [pc, #392]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a5a:	4b61      	ldr	r3, [pc, #388]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	0309      	lsls	r1, r1, #12
 8003a60:	430a      	orrs	r2, r1
 8003a62:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a64:	4b5e      	ldr	r3, [pc, #376]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a68:	4b5d      	ldr	r3, [pc, #372]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a6a:	4960      	ldr	r1, [pc, #384]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003a70:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d014      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fe f9e8 	bl	8001e54 <HAL_GetTick>
 8003a84:	0003      	movs	r3, r0
 8003a86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a88:	e009      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fe f9e3 	bl	8001e54 <HAL_GetTick>
 8003a8e:	0002      	movs	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	4a56      	ldr	r2, [pc, #344]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e09b      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a9e:	4b50      	ldr	r3, [pc, #320]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d0ef      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	23c0      	movs	r3, #192	; 0xc0
 8003ab0:	029b      	lsls	r3, r3, #10
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	23c0      	movs	r3, #192	; 0xc0
 8003ab6:	029b      	lsls	r3, r3, #10
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d10c      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003abc:	4b48      	ldr	r3, [pc, #288]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a4c      	ldr	r2, [pc, #304]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	23c0      	movs	r3, #192	; 0xc0
 8003acc:	039b      	lsls	r3, r3, #14
 8003ace:	401a      	ands	r2, r3
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ad8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	23c0      	movs	r3, #192	; 0xc0
 8003ae0:	029b      	lsls	r3, r3, #10
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003aea:	2317      	movs	r3, #23
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af4:	4b3a      	ldr	r3, [pc, #232]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af8:	4b39      	ldr	r3, [pc, #228]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003afa:	493f      	ldr	r1, [pc, #252]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003afc:	400a      	ands	r2, r1
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2201      	movs	r2, #1
 8003b06:	4013      	ands	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b0a:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	2203      	movs	r2, #3
 8003b10:	4393      	bics	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2202      	movs	r2, #2
 8003b24:	4013      	ands	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2c:	220c      	movs	r2, #12
 8003b2e:	4393      	bics	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2204      	movs	r2, #4
 8003b42:	4013      	ands	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b46:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	4a2c      	ldr	r2, [pc, #176]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	0019      	movs	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b56:	430a      	orrs	r2, r1
 8003b58:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2208      	movs	r2, #8
 8003b60:	4013      	ands	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b64:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b68:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b74:	430a      	orrs	r2, r1
 8003b76:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4013      	ands	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b84:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	4a17      	ldr	r2, [pc, #92]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b94:	430a      	orrs	r2, r1
 8003b96:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2240      	movs	r2, #64	; 0x40
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ba2:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2280      	movs	r2, #128	; 0x80
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d009      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc4:	4a10      	ldr	r2, [pc, #64]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	0019      	movs	r1, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b006      	add	sp, #24
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40007000 	.word	0x40007000
 8003be8:	fffcffff 	.word	0xfffcffff
 8003bec:	fff7ffff 	.word	0xfff7ffff
 8003bf0:	00001388 	.word	0x00001388
 8003bf4:	ffcfffff 	.word	0xffcfffff
 8003bf8:	efffffff 	.word	0xefffffff
 8003bfc:	fffff3ff 	.word	0xfffff3ff
 8003c00:	ffffcfff 	.word	0xffffcfff
 8003c04:	fbffffff 	.word	0xfbffffff
 8003c08:	fff3ffff 	.word	0xfff3ffff

08003c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e032      	b.n	8003c84 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2239      	movs	r2, #57	; 0x39
 8003c22:	5c9b      	ldrb	r3, [r3, r2]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d107      	bne.n	8003c3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2238      	movs	r2, #56	; 0x38
 8003c2e:	2100      	movs	r1, #0
 8003c30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7fd ff03 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2239      	movs	r2, #57	; 0x39
 8003c3e:	2102      	movs	r1, #2
 8003c40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	0010      	movs	r0, r2
 8003c4e:	f000 fbeb 	bl	8004428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	223e      	movs	r2, #62	; 0x3e
 8003c56:	2101      	movs	r1, #1
 8003c58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	223a      	movs	r2, #58	; 0x3a
 8003c5e:	2101      	movs	r1, #1
 8003c60:	5499      	strb	r1, [r3, r2]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	223b      	movs	r2, #59	; 0x3b
 8003c66:	2101      	movs	r1, #1
 8003c68:	5499      	strb	r1, [r3, r2]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	223c      	movs	r2, #60	; 0x3c
 8003c6e:	2101      	movs	r1, #1
 8003c70:	5499      	strb	r1, [r3, r2]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	223d      	movs	r2, #61	; 0x3d
 8003c76:	2101      	movs	r1, #1
 8003c78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2239      	movs	r2, #57	; 0x39
 8003c7e:	2101      	movs	r1, #1
 8003c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	0018      	movs	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b002      	add	sp, #8
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2239      	movs	r2, #57	; 0x39
 8003c98:	5c9b      	ldrb	r3, [r3, r2]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d001      	beq.n	8003ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e03b      	b.n	8003d1c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2239      	movs	r2, #57	; 0x39
 8003ca8:	2102      	movs	r1, #2
 8003caa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	05db      	lsls	r3, r3, #23
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x5a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <HAL_TIM_Base_Start_IT+0x98>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x5a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x5a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <HAL_TIM_Base_Start_IT+0xa0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d111      	bne.n	8003d0a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2207      	movs	r2, #7
 8003cee:	4013      	ands	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b06      	cmp	r3, #6
 8003cf6:	d010      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2101      	movs	r1, #1
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d08:	e007      	b.n	8003d1a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2101      	movs	r1, #1
 8003d16:	430a      	orrs	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b004      	add	sp, #16
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40010800 	.word	0x40010800
 8003d2c:	40011400 	.word	0x40011400

08003d30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e032      	b.n	8003da8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2239      	movs	r2, #57	; 0x39
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d107      	bne.n	8003d5e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2238      	movs	r2, #56	; 0x38
 8003d52:	2100      	movs	r1, #0
 8003d54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f000 f829 	bl	8003db0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2239      	movs	r2, #57	; 0x39
 8003d62:	2102      	movs	r1, #2
 8003d64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	0019      	movs	r1, r3
 8003d70:	0010      	movs	r0, r2
 8003d72:	f000 fb59 	bl	8004428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	223e      	movs	r2, #62	; 0x3e
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	223a      	movs	r2, #58	; 0x3a
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	223b      	movs	r2, #59	; 0x3b
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	223c      	movs	r2, #60	; 0x3c
 8003d92:	2101      	movs	r1, #1
 8003d94:	5499      	strb	r1, [r3, r2]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	223d      	movs	r2, #61	; 0x3d
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2239      	movs	r2, #57	; 0x39
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b002      	add	sp, #8
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d108      	bne.n	8003de2 <HAL_TIM_PWM_Start+0x22>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	223a      	movs	r2, #58	; 0x3a
 8003dd4:	5c9b      	ldrb	r3, [r3, r2]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	1e5a      	subs	r2, r3, #1
 8003ddc:	4193      	sbcs	r3, r2
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	e01f      	b.n	8003e22 <HAL_TIM_PWM_Start+0x62>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d108      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x3a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	223b      	movs	r2, #59	; 0x3b
 8003dec:	5c9b      	ldrb	r3, [r3, r2]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	1e5a      	subs	r2, r3, #1
 8003df4:	4193      	sbcs	r3, r2
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	e013      	b.n	8003e22 <HAL_TIM_PWM_Start+0x62>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d108      	bne.n	8003e12 <HAL_TIM_PWM_Start+0x52>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	223c      	movs	r2, #60	; 0x3c
 8003e04:	5c9b      	ldrb	r3, [r3, r2]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	1e5a      	subs	r2, r3, #1
 8003e0c:	4193      	sbcs	r3, r2
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	e007      	b.n	8003e22 <HAL_TIM_PWM_Start+0x62>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	223d      	movs	r2, #61	; 0x3d
 8003e16:	5c9b      	ldrb	r3, [r3, r2]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	1e5a      	subs	r2, r3, #1
 8003e1e:	4193      	sbcs	r3, r2
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e052      	b.n	8003ed0 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_PWM_Start+0x7a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	223a      	movs	r2, #58	; 0x3a
 8003e34:	2102      	movs	r1, #2
 8003e36:	5499      	strb	r1, [r3, r2]
 8003e38:	e013      	b.n	8003e62 <HAL_TIM_PWM_Start+0xa2>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Start+0x8a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	223b      	movs	r2, #59	; 0x3b
 8003e44:	2102      	movs	r1, #2
 8003e46:	5499      	strb	r1, [r3, r2]
 8003e48:	e00b      	b.n	8003e62 <HAL_TIM_PWM_Start+0xa2>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_PWM_Start+0x9a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	223c      	movs	r2, #60	; 0x3c
 8003e54:	2102      	movs	r1, #2
 8003e56:	5499      	strb	r1, [r3, r2]
 8003e58:	e003      	b.n	8003e62 <HAL_TIM_PWM_Start+0xa2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	223d      	movs	r2, #61	; 0x3d
 8003e5e:	2102      	movs	r1, #2
 8003e60:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 fcd8 	bl	8004820 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	05db      	lsls	r3, r3, #23
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d00e      	beq.n	8003e9a <HAL_TIM_PWM_Start+0xda>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <HAL_TIM_PWM_Start+0x118>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_TIM_PWM_Start+0xda>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a14      	ldr	r2, [pc, #80]	; (8003edc <HAL_TIM_PWM_Start+0x11c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_TIM_PWM_Start+0xda>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a12      	ldr	r2, [pc, #72]	; (8003ee0 <HAL_TIM_PWM_Start+0x120>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d111      	bne.n	8003ebe <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b06      	cmp	r3, #6
 8003eaa:	d010      	beq.n	8003ece <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebc:	e007      	b.n	8003ece <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b004      	add	sp, #16
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40010800 	.word	0x40010800
 8003ee0:	40011400 	.word	0x40011400

08003ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d124      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2202      	movs	r2, #2
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d11d      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	4252      	negs	r2, r2
 8003f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2203      	movs	r2, #3
 8003f20:	4013      	ands	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	0018      	movs	r0, r3
 8003f28:	f000 fa66 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8003f2c:	e007      	b.n	8003f3e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 fa59 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f000 fa65 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d125      	bne.n	8003f9e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2204      	movs	r2, #4
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d11e      	bne.n	8003f9e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2205      	movs	r2, #5
 8003f66:	4252      	negs	r2, r2
 8003f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	23c0      	movs	r3, #192	; 0xc0
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	0018      	movs	r0, r3
 8003f82:	f000 fa39 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8003f86:	e007      	b.n	8003f98 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 fa2c 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 fa38 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d124      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d11d      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2209      	movs	r2, #9
 8003fc0:	4252      	negs	r2, r2
 8003fc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 fa0d 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8003fde:	e007      	b.n	8003ff0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f000 fa00 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 fa0c 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b10      	cmp	r3, #16
 8004002:	d125      	bne.n	8004050 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2210      	movs	r2, #16
 800400c:	4013      	ands	r3, r2
 800400e:	2b10      	cmp	r3, #16
 8004010:	d11e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2211      	movs	r2, #17
 8004018:	4252      	negs	r2, r2
 800401a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2208      	movs	r2, #8
 8004020:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	23c0      	movs	r3, #192	; 0xc0
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4013      	ands	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	0018      	movs	r0, r3
 8004034:	f000 f9e0 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8004038:	e007      	b.n	800404a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0018      	movs	r0, r3
 800403e:	f000 f9d3 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0018      	movs	r0, r3
 8004046:	f000 f9df 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2201      	movs	r2, #1
 8004058:	4013      	ands	r3, r2
 800405a:	2b01      	cmp	r3, #1
 800405c:	d10f      	bne.n	800407e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	4013      	ands	r3, r2
 8004068:	2b01      	cmp	r3, #1
 800406a:	d108      	bne.n	800407e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2202      	movs	r2, #2
 8004072:	4252      	negs	r2, r2
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f7fd fa4b 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2240      	movs	r2, #64	; 0x40
 8004086:	4013      	ands	r3, r2
 8004088:	2b40      	cmp	r3, #64	; 0x40
 800408a:	d10f      	bne.n	80040ac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	2240      	movs	r2, #64	; 0x40
 8004094:	4013      	ands	r3, r2
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d108      	bne.n	80040ac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2241      	movs	r2, #65	; 0x41
 80040a0:	4252      	negs	r2, r2
 80040a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 f9b6 	bl	8004418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c0:	2317      	movs	r3, #23
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2238      	movs	r2, #56	; 0x38
 80040cc:	5c9b      	ldrb	r3, [r3, r2]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e0ad      	b.n	8004232 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2238      	movs	r2, #56	; 0x38
 80040da:	2101      	movs	r1, #1
 80040dc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b0c      	cmp	r3, #12
 80040e2:	d100      	bne.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80040e4:	e076      	b.n	80041d4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	d900      	bls.n	80040ee <HAL_TIM_PWM_ConfigChannel+0x3a>
 80040ec:	e095      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x166>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d04e      	beq.n	8004192 <HAL_TIM_PWM_ConfigChannel+0xde>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d900      	bls.n	80040fc <HAL_TIM_PWM_ConfigChannel+0x48>
 80040fa:	e08e      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x166>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_PWM_ConfigChannel+0x56>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d021      	beq.n	800414c <HAL_TIM_PWM_ConfigChannel+0x98>
 8004108:	e087      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	0011      	movs	r1, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f000 f9e6 	bl	80044e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2108      	movs	r1, #8
 8004124:	430a      	orrs	r2, r1
 8004126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2104      	movs	r1, #4
 8004134:	438a      	bics	r2, r1
 8004136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6999      	ldr	r1, [r3, #24]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	619a      	str	r2, [r3, #24]
      break;
 800414a:	e06b      	b.n	8004224 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	0011      	movs	r1, r2
 8004154:	0018      	movs	r0, r3
 8004156:	f000 fa01 	bl	800455c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2180      	movs	r1, #128	; 0x80
 8004166:	0109      	lsls	r1, r1, #4
 8004168:	430a      	orrs	r2, r1
 800416a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4931      	ldr	r1, [pc, #196]	; (800423c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004178:	400a      	ands	r2, r1
 800417a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6999      	ldr	r1, [r3, #24]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	021a      	lsls	r2, r3, #8
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	619a      	str	r2, [r3, #24]
      break;
 8004190:	e048      	b.n	8004224 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	0011      	movs	r1, r2
 800419a:	0018      	movs	r0, r3
 800419c:	f000 fa20 	bl	80045e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2108      	movs	r1, #8
 80041ac:	430a      	orrs	r2, r1
 80041ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69da      	ldr	r2, [r3, #28]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2104      	movs	r1, #4
 80041bc:	438a      	bics	r2, r1
 80041be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69d9      	ldr	r1, [r3, #28]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	61da      	str	r2, [r3, #28]
      break;
 80041d2:	e027      	b.n	8004224 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	0011      	movs	r1, r2
 80041dc:	0018      	movs	r0, r3
 80041de:	f000 fa3f 	bl	8004660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2180      	movs	r1, #128	; 0x80
 80041ee:	0109      	lsls	r1, r1, #4
 80041f0:	430a      	orrs	r2, r1
 80041f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	490f      	ldr	r1, [pc, #60]	; (800423c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004200:	400a      	ands	r2, r1
 8004202:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69d9      	ldr	r1, [r3, #28]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	021a      	lsls	r2, r3, #8
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	61da      	str	r2, [r3, #28]
      break;
 8004218:	e004      	b.n	8004224 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800421a:	2317      	movs	r3, #23
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
      break;
 8004222:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2238      	movs	r2, #56	; 0x38
 8004228:	2100      	movs	r1, #0
 800422a:	5499      	strb	r1, [r3, r2]

  return status;
 800422c:	2317      	movs	r3, #23
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	781b      	ldrb	r3, [r3, #0]
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b006      	add	sp, #24
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	fffffbff 	.word	0xfffffbff

08004240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	230f      	movs	r3, #15
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2238      	movs	r2, #56	; 0x38
 8004256:	5c9b      	ldrb	r3, [r3, r2]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_TIM_ConfigClockSource+0x20>
 800425c:	2302      	movs	r3, #2
 800425e:	e0bc      	b.n	80043da <HAL_TIM_ConfigClockSource+0x19a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2238      	movs	r2, #56	; 0x38
 8004264:	2101      	movs	r1, #1
 8004266:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2239      	movs	r2, #57	; 0x39
 800426c:	2102      	movs	r1, #2
 800426e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2277      	movs	r2, #119	; 0x77
 800427c:	4393      	bics	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4a58      	ldr	r2, [pc, #352]	; (80043e4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004284:	4013      	ands	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2280      	movs	r2, #128	; 0x80
 8004296:	0192      	lsls	r2, r2, #6
 8004298:	4293      	cmp	r3, r2
 800429a:	d040      	beq.n	800431e <HAL_TIM_ConfigClockSource+0xde>
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	0192      	lsls	r2, r2, #6
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d900      	bls.n	80042a6 <HAL_TIM_ConfigClockSource+0x66>
 80042a4:	e088      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	0152      	lsls	r2, r2, #5
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d100      	bne.n	80042b0 <HAL_TIM_ConfigClockSource+0x70>
 80042ae:	e088      	b.n	80043c2 <HAL_TIM_ConfigClockSource+0x182>
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	0152      	lsls	r2, r2, #5
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d900      	bls.n	80042ba <HAL_TIM_ConfigClockSource+0x7a>
 80042b8:	e07e      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
 80042ba:	2b70      	cmp	r3, #112	; 0x70
 80042bc:	d018      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0xb0>
 80042be:	d900      	bls.n	80042c2 <HAL_TIM_ConfigClockSource+0x82>
 80042c0:	e07a      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
 80042c2:	2b60      	cmp	r3, #96	; 0x60
 80042c4:	d04f      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x126>
 80042c6:	d900      	bls.n	80042ca <HAL_TIM_ConfigClockSource+0x8a>
 80042c8:	e076      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
 80042ca:	2b50      	cmp	r3, #80	; 0x50
 80042cc:	d03b      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x106>
 80042ce:	d900      	bls.n	80042d2 <HAL_TIM_ConfigClockSource+0x92>
 80042d0:	e072      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d057      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x146>
 80042d6:	d900      	bls.n	80042da <HAL_TIM_ConfigClockSource+0x9a>
 80042d8:	e06e      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
 80042da:	2b30      	cmp	r3, #48	; 0x30
 80042dc:	d063      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x166>
 80042de:	d86b      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d060      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x166>
 80042e4:	d868      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d05d      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x166>
 80042ea:	2b10      	cmp	r3, #16
 80042ec:	d05b      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x166>
 80042ee:	e063      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	6899      	ldr	r1, [r3, #8]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f000 fa6e 	bl	80047e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2277      	movs	r2, #119	; 0x77
 8004310:	4313      	orrs	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]
      break;
 800431c:	e052      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f000 fa57 	bl	80047e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2180      	movs	r1, #128	; 0x80
 800433e:	01c9      	lsls	r1, r1, #7
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]
      break;
 8004344:	e03e      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	001a      	movs	r2, r3
 8004354:	f000 f9ca 	bl	80046ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2150      	movs	r1, #80	; 0x50
 800435e:	0018      	movs	r0, r3
 8004360:	f000 fa24 	bl	80047ac <TIM_ITRx_SetConfig>
      break;
 8004364:	e02e      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	001a      	movs	r2, r3
 8004374:	f000 f9e8 	bl	8004748 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2160      	movs	r1, #96	; 0x60
 800437e:	0018      	movs	r0, r3
 8004380:	f000 fa14 	bl	80047ac <TIM_ITRx_SetConfig>
      break;
 8004384:	e01e      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6859      	ldr	r1, [r3, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	001a      	movs	r2, r3
 8004394:	f000 f9aa 	bl	80046ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2140      	movs	r1, #64	; 0x40
 800439e:	0018      	movs	r0, r3
 80043a0:	f000 fa04 	bl	80047ac <TIM_ITRx_SetConfig>
      break;
 80043a4:	e00e      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	0019      	movs	r1, r3
 80043b0:	0010      	movs	r0, r2
 80043b2:	f000 f9fb 	bl	80047ac <TIM_ITRx_SetConfig>
      break;
 80043b6:	e005      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80043b8:	230f      	movs	r3, #15
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
      break;
 80043c0:	e000      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80043c2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2239      	movs	r2, #57	; 0x39
 80043c8:	2101      	movs	r1, #1
 80043ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2238      	movs	r2, #56	; 0x38
 80043d0:	2100      	movs	r1, #0
 80043d2:	5499      	strb	r1, [r3, r2]

  return status;
 80043d4:	230f      	movs	r3, #15
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	781b      	ldrb	r3, [r3, #0]
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b004      	add	sp, #16
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	ffff00ff 	.word	0xffff00ff

080043e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f0:	46c0      	nop			; (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b002      	add	sp, #8
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004400:	46c0      	nop			; (mov r8, r8)
 8004402:	46bd      	mov	sp, r7
 8004404:	b002      	add	sp, #8
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	b002      	add	sp, #8
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	b002      	add	sp, #8
 8004426:	bd80      	pop	{r7, pc}

08004428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	05db      	lsls	r3, r3, #23
 800443e:	429a      	cmp	r2, r3
 8004440:	d00b      	beq.n	800445a <TIM_Base_SetConfig+0x32>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a23      	ldr	r2, [pc, #140]	; (80044d4 <TIM_Base_SetConfig+0xac>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <TIM_Base_SetConfig+0x32>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a22      	ldr	r2, [pc, #136]	; (80044d8 <TIM_Base_SetConfig+0xb0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_Base_SetConfig+0x32>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a21      	ldr	r2, [pc, #132]	; (80044dc <TIM_Base_SetConfig+0xb4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d108      	bne.n	800446c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2270      	movs	r2, #112	; 0x70
 800445e:	4393      	bics	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	05db      	lsls	r3, r3, #23
 8004472:	429a      	cmp	r2, r3
 8004474:	d00b      	beq.n	800448e <TIM_Base_SetConfig+0x66>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <TIM_Base_SetConfig+0xac>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d007      	beq.n	800448e <TIM_Base_SetConfig+0x66>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <TIM_Base_SetConfig+0xb0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d003      	beq.n	800448e <TIM_Base_SetConfig+0x66>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a14      	ldr	r2, [pc, #80]	; (80044dc <TIM_Base_SetConfig+0xb4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <TIM_Base_SetConfig+0xb8>)
 8004492:	4013      	ands	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2280      	movs	r2, #128	; 0x80
 80044a4:	4393      	bics	r3, r2
 80044a6:	001a      	movs	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	615a      	str	r2, [r3, #20]
}
 80044cc:	46c0      	nop			; (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b004      	add	sp, #16
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40010800 	.word	0x40010800
 80044dc:	40011400 	.word	0x40011400
 80044e0:	fffffcff 	.word	0xfffffcff

080044e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	2201      	movs	r2, #1
 80044f4:	4393      	bics	r3, r2
 80044f6:	001a      	movs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2270      	movs	r2, #112	; 0x70
 8004512:	4393      	bics	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2203      	movs	r2, #3
 800451a:	4393      	bics	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2202      	movs	r2, #2
 800452c:	4393      	bics	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	b006      	add	sp, #24
 800455a:	bd80      	pop	{r7, pc}

0800455c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	2210      	movs	r2, #16
 800456c:	4393      	bics	r3, r2
 800456e:	001a      	movs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <TIM_OC2_SetConfig+0x7c>)
 800458a:	4013      	ands	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a12      	ldr	r2, [pc, #72]	; (80045dc <TIM_OC2_SetConfig+0x80>)
 8004592:	4013      	ands	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2220      	movs	r2, #32
 80045a6:	4393      	bics	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	621a      	str	r2, [r3, #32]
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b006      	add	sp, #24
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	ffff8fff 	.word	0xffff8fff
 80045dc:	fffffcff 	.word	0xfffffcff

080045e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	4a1a      	ldr	r2, [pc, #104]	; (8004658 <TIM_OC3_SetConfig+0x78>)
 80045f0:	401a      	ands	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2270      	movs	r2, #112	; 0x70
 800460c:	4393      	bics	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2203      	movs	r2, #3
 8004614:	4393      	bics	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	4a0d      	ldr	r2, [pc, #52]	; (800465c <TIM_OC3_SetConfig+0x7c>)
 8004626:	4013      	ands	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	621a      	str	r2, [r3, #32]
}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b006      	add	sp, #24
 8004656:	bd80      	pop	{r7, pc}
 8004658:	fffffeff 	.word	0xfffffeff
 800465c:	fffffdff 	.word	0xfffffdff

08004660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	4a1b      	ldr	r2, [pc, #108]	; (80046dc <TIM_OC4_SetConfig+0x7c>)
 8004670:	401a      	ands	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <TIM_OC4_SetConfig+0x80>)
 800468c:	4013      	ands	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4a14      	ldr	r2, [pc, #80]	; (80046e4 <TIM_OC4_SetConfig+0x84>)
 8004694:	4013      	ands	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <TIM_OC4_SetConfig+0x88>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	031b      	lsls	r3, r3, #12
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b006      	add	sp, #24
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	ffffefff 	.word	0xffffefff
 80046e0:	ffff8fff 	.word	0xffff8fff
 80046e4:	fffffcff 	.word	0xfffffcff
 80046e8:	ffffdfff 	.word	0xffffdfff

080046ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	2201      	movs	r2, #1
 8004704:	4393      	bics	r3, r2
 8004706:	001a      	movs	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	22f0      	movs	r2, #240	; 0xf0
 8004716:	4393      	bics	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	220a      	movs	r2, #10
 8004728:	4393      	bics	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	621a      	str	r2, [r3, #32]
}
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	46bd      	mov	sp, r7
 8004744:	b006      	add	sp, #24
 8004746:	bd80      	pop	{r7, pc}

08004748 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	2210      	movs	r2, #16
 800475a:	4393      	bics	r3, r2
 800475c:	001a      	movs	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	4a0d      	ldr	r2, [pc, #52]	; (80047a8 <TIM_TI2_ConfigInputStage+0x60>)
 8004772:	4013      	ands	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	031b      	lsls	r3, r3, #12
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	22a0      	movs	r2, #160	; 0xa0
 8004784:	4393      	bics	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b006      	add	sp, #24
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	ffff0fff 	.word	0xffff0fff

080047ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2270      	movs	r2, #112	; 0x70
 80047c0:	4393      	bics	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	2207      	movs	r2, #7
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	609a      	str	r2, [r3, #8]
}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	46bd      	mov	sp, r7
 80047da:	b004      	add	sp, #16
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <TIM_ETR_SetConfig+0x3c>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	021a      	lsls	r2, r3, #8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	431a      	orrs	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4313      	orrs	r3, r2
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	609a      	str	r2, [r3, #8]
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b006      	add	sp, #24
 800481a:	bd80      	pop	{r7, pc}
 800481c:	ffff00ff 	.word	0xffff00ff

08004820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	221f      	movs	r2, #31
 8004830:	4013      	ands	r3, r2
 8004832:	2201      	movs	r2, #1
 8004834:	409a      	lsls	r2, r3
 8004836:	0013      	movs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	43d2      	mvns	r2, r2
 8004842:	401a      	ands	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1a      	ldr	r2, [r3, #32]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	211f      	movs	r1, #31
 8004850:	400b      	ands	r3, r1
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4099      	lsls	r1, r3
 8004856:	000b      	movs	r3, r1
 8004858:	431a      	orrs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	46bd      	mov	sp, r7
 8004862:	b006      	add	sp, #24
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2238      	movs	r2, #56	; 0x38
 8004876:	5c9b      	ldrb	r3, [r3, r2]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800487c:	2302      	movs	r3, #2
 800487e:	e047      	b.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2238      	movs	r2, #56	; 0x38
 8004884:	2101      	movs	r1, #1
 8004886:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2239      	movs	r2, #57	; 0x39
 800488c:	2102      	movs	r1, #2
 800488e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2270      	movs	r2, #112	; 0x70
 80048a4:	4393      	bics	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	05db      	lsls	r3, r3, #23
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a13      	ldr	r2, [pc, #76]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a11      	ldr	r2, [pc, #68]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a10      	ldr	r2, [pc, #64]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d10c      	bne.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2280      	movs	r2, #128	; 0x80
 80048e8:	4393      	bics	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2239      	movs	r2, #57	; 0x39
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2238      	movs	r2, #56	; 0x38
 800490a:	2100      	movs	r1, #0
 800490c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	b004      	add	sp, #16
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40000400 	.word	0x40000400
 800491c:	40010800 	.word	0x40010800
 8004920:	40011400 	.word	0x40011400

08004924 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2238      	movs	r2, #56	; 0x38
 8004932:	5c9b      	ldrb	r3, [r3, r2]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_TIMEx_RemapConfig+0x18>
 8004938:	2302      	movs	r3, #2
 800493a:	e00c      	b.n	8004956 <HAL_TIMEx_RemapConfig+0x32>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2238      	movs	r2, #56	; 0x38
 8004940:	2101      	movs	r1, #1
 8004942:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2238      	movs	r2, #56	; 0x38
 8004950:	2100      	movs	r1, #0
 8004952:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	0018      	movs	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	b002      	add	sp, #8
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e044      	b.n	80049fc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2274      	movs	r2, #116	; 0x74
 800497e:	2100      	movs	r1, #0
 8004980:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f7fd f94f 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2224      	movs	r2, #36	; 0x24
 800498e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2101      	movs	r1, #1
 800499c:	438a      	bics	r2, r1
 800499e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	0018      	movs	r0, r3
 80049a4:	f000 fcbc 	bl	8005320 <UART_SetConfig>
 80049a8:	0003      	movs	r3, r0
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e024      	b.n	80049fc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0018      	movs	r0, r3
 80049be:	f000 ff6d 	bl	800589c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	490d      	ldr	r1, [pc, #52]	; (8004a04 <HAL_UART_Init+0xa4>)
 80049ce:	400a      	ands	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	212a      	movs	r1, #42	; 0x2a
 80049de:	438a      	bics	r2, r1
 80049e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2101      	movs	r1, #1
 80049ee:	430a      	orrs	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f001 f805 	bl	8005a04 <UART_CheckIdleState>
 80049fa:	0003      	movs	r3, r0
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b002      	add	sp, #8
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	ffffb7ff 	.word	0xffffb7ff

08004a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	1dbb      	adds	r3, r7, #6
 8004a16:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d000      	beq.n	8004a22 <HAL_UART_Transmit+0x1a>
 8004a20:	e095      	b.n	8004b4e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_UART_Transmit+0x28>
 8004a28:	1dbb      	adds	r3, r7, #6
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e08d      	b.n	8004b50 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	015b      	lsls	r3, r3, #5
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d109      	bne.n	8004a54 <HAL_UART_Transmit+0x4c>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d001      	beq.n	8004a54 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e07d      	b.n	8004b50 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2274      	movs	r2, #116	; 0x74
 8004a58:	5c9b      	ldrb	r3, [r3, r2]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_UART_Transmit+0x5a>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e076      	b.n	8004b50 <HAL_UART_Transmit+0x148>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2274      	movs	r2, #116	; 0x74
 8004a66:	2101      	movs	r1, #1
 8004a68:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2280      	movs	r2, #128	; 0x80
 8004a6e:	2100      	movs	r1, #0
 8004a70:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2221      	movs	r2, #33	; 0x21
 8004a76:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a78:	f7fd f9ec 	bl	8001e54 <HAL_GetTick>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1dba      	adds	r2, r7, #6
 8004a84:	2150      	movs	r1, #80	; 0x50
 8004a86:	8812      	ldrh	r2, [r2, #0]
 8004a88:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1dba      	adds	r2, r7, #6
 8004a8e:	2152      	movs	r1, #82	; 0x52
 8004a90:	8812      	ldrh	r2, [r2, #0]
 8004a92:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	015b      	lsls	r3, r3, #5
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d108      	bne.n	8004ab2 <HAL_UART_Transmit+0xaa>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	e003      	b.n	8004aba <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2274      	movs	r2, #116	; 0x74
 8004abe:	2100      	movs	r1, #0
 8004ac0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004ac2:	e02c      	b.n	8004b1e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	0013      	movs	r3, r2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2180      	movs	r1, #128	; 0x80
 8004ad2:	f000 ffdf 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8004ad6:	1e03      	subs	r3, r0, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e038      	b.n	8004b50 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	001a      	movs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	05d2      	lsls	r2, r2, #23
 8004af0:	0dd2      	lsrs	r2, r2, #23
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	3302      	adds	r3, #2
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	e007      	b.n	8004b0c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	781a      	ldrb	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2252      	movs	r2, #82	; 0x52
 8004b10:	5a9b      	ldrh	r3, [r3, r2]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b299      	uxth	r1, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2252      	movs	r2, #82	; 0x52
 8004b1c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2252      	movs	r2, #82	; 0x52
 8004b22:	5a9b      	ldrh	r3, [r3, r2]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1cc      	bne.n	8004ac4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	0013      	movs	r3, r2
 8004b34:	2200      	movs	r2, #0
 8004b36:	2140      	movs	r1, #64	; 0x40
 8004b38:	f000 ffac 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8004b3c:	1e03      	subs	r3, r0, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e005      	b.n	8004b50 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e000      	b.n	8004b50 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004b4e:	2302      	movs	r3, #2
  }
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b008      	add	sp, #32
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	1dbb      	adds	r3, r7, #6
 8004b66:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d000      	beq.n	8004b72 <HAL_UART_Receive+0x1a>
 8004b70:	e0d9      	b.n	8004d26 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_UART_Receive+0x28>
 8004b78:	1dbb      	adds	r3, r7, #6
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0d1      	b.n	8004d28 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	015b      	lsls	r3, r3, #5
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d109      	bne.n	8004ba4 <HAL_UART_Receive+0x4c>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d105      	bne.n	8004ba4 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d001      	beq.n	8004ba4 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0c1      	b.n	8004d28 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2274      	movs	r2, #116	; 0x74
 8004ba8:	5c9b      	ldrb	r3, [r3, r2]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Receive+0x5a>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e0ba      	b.n	8004d28 <HAL_UART_Receive+0x1d0>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2274      	movs	r2, #116	; 0x74
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2280      	movs	r2, #128	; 0x80
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2222      	movs	r2, #34	; 0x22
 8004bc6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bce:	f7fd f941 	bl	8001e54 <HAL_GetTick>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1dba      	adds	r2, r7, #6
 8004bda:	2158      	movs	r1, #88	; 0x58
 8004bdc:	8812      	ldrh	r2, [r2, #0]
 8004bde:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1dba      	adds	r2, r7, #6
 8004be4:	215a      	movs	r1, #90	; 0x5a
 8004be6:	8812      	ldrh	r2, [r2, #0]
 8004be8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	2380      	movs	r3, #128	; 0x80
 8004bf0:	015b      	lsls	r3, r3, #5
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d10d      	bne.n	8004c12 <HAL_UART_Receive+0xba>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d104      	bne.n	8004c08 <HAL_UART_Receive+0xb0>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	225c      	movs	r2, #92	; 0x5c
 8004c02:	494b      	ldr	r1, [pc, #300]	; (8004d30 <HAL_UART_Receive+0x1d8>)
 8004c04:	5299      	strh	r1, [r3, r2]
 8004c06:	e02e      	b.n	8004c66 <HAL_UART_Receive+0x10e>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	225c      	movs	r2, #92	; 0x5c
 8004c0c:	21ff      	movs	r1, #255	; 0xff
 8004c0e:	5299      	strh	r1, [r3, r2]
 8004c10:	e029      	b.n	8004c66 <HAL_UART_Receive+0x10e>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10d      	bne.n	8004c36 <HAL_UART_Receive+0xde>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <HAL_UART_Receive+0xd4>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	225c      	movs	r2, #92	; 0x5c
 8004c26:	21ff      	movs	r1, #255	; 0xff
 8004c28:	5299      	strh	r1, [r3, r2]
 8004c2a:	e01c      	b.n	8004c66 <HAL_UART_Receive+0x10e>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	225c      	movs	r2, #92	; 0x5c
 8004c30:	217f      	movs	r1, #127	; 0x7f
 8004c32:	5299      	strh	r1, [r3, r2]
 8004c34:	e017      	b.n	8004c66 <HAL_UART_Receive+0x10e>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	055b      	lsls	r3, r3, #21
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d10d      	bne.n	8004c5e <HAL_UART_Receive+0x106>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d104      	bne.n	8004c54 <HAL_UART_Receive+0xfc>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	225c      	movs	r2, #92	; 0x5c
 8004c4e:	217f      	movs	r1, #127	; 0x7f
 8004c50:	5299      	strh	r1, [r3, r2]
 8004c52:	e008      	b.n	8004c66 <HAL_UART_Receive+0x10e>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	225c      	movs	r2, #92	; 0x5c
 8004c58:	213f      	movs	r1, #63	; 0x3f
 8004c5a:	5299      	strh	r1, [r3, r2]
 8004c5c:	e003      	b.n	8004c66 <HAL_UART_Receive+0x10e>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	225c      	movs	r2, #92	; 0x5c
 8004c62:	2100      	movs	r1, #0
 8004c64:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004c66:	2312      	movs	r3, #18
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	215c      	movs	r1, #92	; 0x5c
 8004c6e:	5a52      	ldrh	r2, [r2, r1]
 8004c70:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	015b      	lsls	r3, r3, #5
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d108      	bne.n	8004c90 <HAL_UART_Receive+0x138>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e003      	b.n	8004c98 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2274      	movs	r2, #116	; 0x74
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004ca0:	e036      	b.n	8004d10 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	0013      	movs	r3, r2
 8004cac:	2200      	movs	r2, #0
 8004cae:	2120      	movs	r1, #32
 8004cb0:	f000 fef0 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8004cb4:	1e03      	subs	r3, r0, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e035      	b.n	8004d28 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2212      	movs	r2, #18
 8004ccc:	18ba      	adds	r2, r7, r2
 8004cce:	8812      	ldrh	r2, [r2, #0]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	3302      	adds	r3, #2
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	e00e      	b.n	8004cfe <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2212      	movs	r2, #18
 8004cea:	18ba      	adds	r2, r7, r2
 8004cec:	8812      	ldrh	r2, [r2, #0]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	225a      	movs	r2, #90	; 0x5a
 8004d02:	5a9b      	ldrh	r3, [r3, r2]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b299      	uxth	r1, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	225a      	movs	r2, #90	; 0x5a
 8004d0e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	225a      	movs	r2, #90	; 0x5a
 8004d14:	5a9b      	ldrh	r3, [r3, r2]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1c2      	bne.n	8004ca2 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e000      	b.n	8004d28 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
  }
}
 8004d28:	0018      	movs	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b008      	add	sp, #32
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	000001ff 	.word	0x000001ff

08004d34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b0ab      	sub	sp, #172	; 0xac
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	22a4      	movs	r2, #164	; 0xa4
 8004d44:	18b9      	adds	r1, r7, r2
 8004d46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	20a0      	movs	r0, #160	; 0xa0
 8004d50:	1839      	adds	r1, r7, r0
 8004d52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	219c      	movs	r1, #156	; 0x9c
 8004d5c:	1879      	adds	r1, r7, r1
 8004d5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d60:	0011      	movs	r1, r2
 8004d62:	18bb      	adds	r3, r7, r2
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a99      	ldr	r2, [pc, #612]	; (8004fcc <HAL_UART_IRQHandler+0x298>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2298      	movs	r2, #152	; 0x98
 8004d6c:	18bc      	adds	r4, r7, r2
 8004d6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004d70:	18bb      	adds	r3, r7, r2
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d114      	bne.n	8004da2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d00f      	beq.n	8004da2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d82:	183b      	adds	r3, r7, r0
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2220      	movs	r2, #32
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d00a      	beq.n	8004da2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d100      	bne.n	8004d96 <HAL_UART_IRQHandler+0x62>
 8004d94:	e298      	b.n	80052c8 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	0010      	movs	r0, r2
 8004d9e:	4798      	blx	r3
      }
      return;
 8004da0:	e292      	b.n	80052c8 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004da2:	2398      	movs	r3, #152	; 0x98
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d100      	bne.n	8004dae <HAL_UART_IRQHandler+0x7a>
 8004dac:	e114      	b.n	8004fd8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004dae:	239c      	movs	r3, #156	; 0x9c
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2201      	movs	r2, #1
 8004db6:	4013      	ands	r3, r2
 8004db8:	d106      	bne.n	8004dc8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004dba:	23a0      	movs	r3, #160	; 0xa0
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a83      	ldr	r2, [pc, #524]	; (8004fd0 <HAL_UART_IRQHandler+0x29c>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d100      	bne.n	8004dc8 <HAL_UART_IRQHandler+0x94>
 8004dc6:	e107      	b.n	8004fd8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dc8:	23a4      	movs	r3, #164	; 0xa4
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d012      	beq.n	8004dfa <HAL_UART_IRQHandler+0xc6>
 8004dd4:	23a0      	movs	r3, #160	; 0xa0
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	4013      	ands	r3, r2
 8004de0:	d00b      	beq.n	8004dfa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2201      	movs	r2, #1
 8004de8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2280      	movs	r2, #128	; 0x80
 8004dee:	589b      	ldr	r3, [r3, r2]
 8004df0:	2201      	movs	r2, #1
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dfa:	23a4      	movs	r3, #164	; 0xa4
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2202      	movs	r2, #2
 8004e02:	4013      	ands	r3, r2
 8004e04:	d011      	beq.n	8004e2a <HAL_UART_IRQHandler+0xf6>
 8004e06:	239c      	movs	r3, #156	; 0x9c
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2202      	movs	r2, #2
 8004e18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2280      	movs	r2, #128	; 0x80
 8004e1e:	589b      	ldr	r3, [r3, r2]
 8004e20:	2204      	movs	r2, #4
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2180      	movs	r1, #128	; 0x80
 8004e28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e2a:	23a4      	movs	r3, #164	; 0xa4
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2204      	movs	r2, #4
 8004e32:	4013      	ands	r3, r2
 8004e34:	d011      	beq.n	8004e5a <HAL_UART_IRQHandler+0x126>
 8004e36:	239c      	movs	r3, #156	; 0x9c
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d00b      	beq.n	8004e5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2204      	movs	r2, #4
 8004e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2280      	movs	r2, #128	; 0x80
 8004e4e:	589b      	ldr	r3, [r3, r2]
 8004e50:	2202      	movs	r2, #2
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2180      	movs	r1, #128	; 0x80
 8004e58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e5a:	23a4      	movs	r3, #164	; 0xa4
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2208      	movs	r2, #8
 8004e62:	4013      	ands	r3, r2
 8004e64:	d017      	beq.n	8004e96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e66:	23a0      	movs	r3, #160	; 0xa0
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d105      	bne.n	8004e7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e72:	239c      	movs	r3, #156	; 0x9c
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e7c:	d00b      	beq.n	8004e96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2208      	movs	r2, #8
 8004e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2280      	movs	r2, #128	; 0x80
 8004e8a:	589b      	ldr	r3, [r3, r2]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2180      	movs	r1, #128	; 0x80
 8004e94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e96:	23a4      	movs	r3, #164	; 0xa4
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <HAL_UART_IRQHandler+0x198>
 8004ea4:	23a0      	movs	r3, #160	; 0xa0
 8004ea6:	18fb      	adds	r3, r7, r3
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	2380      	movs	r3, #128	; 0x80
 8004eac:	04db      	lsls	r3, r3, #19
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d00c      	beq.n	8004ecc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2280      	movs	r2, #128	; 0x80
 8004eb8:	0112      	lsls	r2, r2, #4
 8004eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2280      	movs	r2, #128	; 0x80
 8004ec0:	589b      	ldr	r3, [r3, r2]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2180      	movs	r1, #128	; 0x80
 8004eca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2280      	movs	r2, #128	; 0x80
 8004ed0:	589b      	ldr	r3, [r3, r2]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d100      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x1a4>
 8004ed6:	e1f9      	b.n	80052cc <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ed8:	23a4      	movs	r3, #164	; 0xa4
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ee4:	23a0      	movs	r3, #160	; 0xa0
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2220      	movs	r2, #32
 8004eec:	4013      	ands	r3, r2
 8004eee:	d008      	beq.n	8004f02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	0010      	movs	r0, r2
 8004f00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2280      	movs	r2, #128	; 0x80
 8004f06:	589b      	ldr	r3, [r3, r2]
 8004f08:	2194      	movs	r1, #148	; 0x94
 8004f0a:	187a      	adds	r2, r7, r1
 8004f0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2240      	movs	r2, #64	; 0x40
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d004      	beq.n	8004f26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2228      	movs	r2, #40	; 0x28
 8004f22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f24:	d047      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f000 fe77 	bl	8005c1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2240      	movs	r2, #64	; 0x40
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d137      	bne.n	8004fac <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f40:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f44:	2090      	movs	r0, #144	; 0x90
 8004f46:	183a      	adds	r2, r7, r0
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f50:	f383 8810 	msr	PRIMASK, r3
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2140      	movs	r1, #64	; 0x40
 8004f62:	438a      	bics	r2, r1
 8004f64:	609a      	str	r2, [r3, #8]
 8004f66:	183b      	adds	r3, r7, r0
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f6e:	f383 8810 	msr	PRIMASK, r3
}
 8004f72:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d012      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f80:	4a14      	ldr	r2, [pc, #80]	; (8004fd4 <HAL_UART_IRQHandler+0x2a0>)
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f7fd fcef 	bl	800296c <HAL_DMA_Abort_IT>
 8004f8e:	1e03      	subs	r3, r0, #0
 8004f90:	d01a      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	e012      	b.n	8004fc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f000 f9a7 	bl	80052f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004faa:	e00d      	b.n	8004fc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f000 f9a2 	bl	80052f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb4:	e008      	b.n	8004fc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f000 f99d 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2280      	movs	r2, #128	; 0x80
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004fc6:	e181      	b.n	80052cc <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	46c0      	nop			; (mov r8, r8)
    return;
 8004fca:	e17f      	b.n	80052cc <HAL_UART_IRQHandler+0x598>
 8004fcc:	0000080f 	.word	0x0000080f
 8004fd0:	04000120 	.word	0x04000120
 8004fd4:	08005ce1 	.word	0x08005ce1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d000      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x2ae>
 8004fe0:	e133      	b.n	800524a <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fe2:	23a4      	movs	r3, #164	; 0xa4
 8004fe4:	18fb      	adds	r3, r7, r3
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2210      	movs	r2, #16
 8004fea:	4013      	ands	r3, r2
 8004fec:	d100      	bne.n	8004ff0 <HAL_UART_IRQHandler+0x2bc>
 8004fee:	e12c      	b.n	800524a <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ff0:	23a0      	movs	r3, #160	; 0xa0
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d100      	bne.n	8004ffe <HAL_UART_IRQHandler+0x2ca>
 8004ffc:	e125      	b.n	800524a <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2210      	movs	r2, #16
 8005004:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2240      	movs	r2, #64	; 0x40
 800500e:	4013      	ands	r3, r2
 8005010:	2b40      	cmp	r3, #64	; 0x40
 8005012:	d000      	beq.n	8005016 <HAL_UART_IRQHandler+0x2e2>
 8005014:	e09d      	b.n	8005152 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	217e      	movs	r1, #126	; 0x7e
 8005020:	187b      	adds	r3, r7, r1
 8005022:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005024:	187b      	adds	r3, r7, r1
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d100      	bne.n	800502e <HAL_UART_IRQHandler+0x2fa>
 800502c:	e150      	b.n	80052d0 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2258      	movs	r2, #88	; 0x58
 8005032:	5a9b      	ldrh	r3, [r3, r2]
 8005034:	187a      	adds	r2, r7, r1
 8005036:	8812      	ldrh	r2, [r2, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d300      	bcc.n	800503e <HAL_UART_IRQHandler+0x30a>
 800503c:	e148      	b.n	80052d0 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	187a      	adds	r2, r7, r1
 8005042:	215a      	movs	r1, #90	; 0x5a
 8005044:	8812      	ldrh	r2, [r2, #0]
 8005046:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2220      	movs	r2, #32
 8005052:	4013      	ands	r3, r2
 8005054:	d16e      	bne.n	8005134 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005056:	f3ef 8310 	mrs	r3, PRIMASK
 800505a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800505e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005060:	2301      	movs	r3, #1
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005066:	f383 8810 	msr	PRIMASK, r3
}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	499a      	ldr	r1, [pc, #616]	; (80052e0 <HAL_UART_IRQHandler+0x5ac>)
 8005078:	400a      	ands	r2, r1
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800507e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	f383 8810 	msr	PRIMASK, r3
}
 8005086:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005088:	f3ef 8310 	mrs	r3, PRIMASK
 800508c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800508e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005090:	677b      	str	r3, [r7, #116]	; 0x74
 8005092:	2301      	movs	r3, #1
 8005094:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005098:	f383 8810 	msr	PRIMASK, r3
}
 800509c:	46c0      	nop			; (mov r8, r8)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2101      	movs	r1, #1
 80050aa:	438a      	bics	r2, r1
 80050ac:	609a      	str	r2, [r3, #8]
 80050ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b4:	f383 8810 	msr	PRIMASK, r3
}
 80050b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ba:	f3ef 8310 	mrs	r3, PRIMASK
 80050be:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80050c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c2:	673b      	str	r3, [r7, #112]	; 0x70
 80050c4:	2301      	movs	r3, #1
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ca:	f383 8810 	msr	PRIMASK, r3
}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2140      	movs	r1, #64	; 0x40
 80050dc:	438a      	bics	r2, r1
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050e2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e6:	f383 8810 	msr	PRIMASK, r3
}
 80050ea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f8:	f3ef 8310 	mrs	r3, PRIMASK
 80050fc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80050fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005102:	2301      	movs	r3, #1
 8005104:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005108:	f383 8810 	msr	PRIMASK, r3
}
 800510c:	46c0      	nop			; (mov r8, r8)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2110      	movs	r1, #16
 800511a:	438a      	bics	r2, r1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005120:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	0018      	movs	r0, r3
 8005130:	f7fd fbdc 	bl	80028ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2258      	movs	r2, #88	; 0x58
 8005138:	5a9a      	ldrh	r2, [r3, r2]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	215a      	movs	r1, #90	; 0x5a
 800513e:	5a5b      	ldrh	r3, [r3, r1]
 8005140:	b29b      	uxth	r3, r3
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	0011      	movs	r1, r2
 800514a:	0018      	movs	r0, r3
 800514c:	f000 f8dc 	bl	8005308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005150:	e0be      	b.n	80052d0 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2258      	movs	r2, #88	; 0x58
 8005156:	5a99      	ldrh	r1, [r3, r2]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	225a      	movs	r2, #90	; 0x5a
 800515c:	5a9b      	ldrh	r3, [r3, r2]
 800515e:	b29a      	uxth	r2, r3
 8005160:	208e      	movs	r0, #142	; 0x8e
 8005162:	183b      	adds	r3, r7, r0
 8005164:	1a8a      	subs	r2, r1, r2
 8005166:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	225a      	movs	r2, #90	; 0x5a
 800516c:	5a9b      	ldrh	r3, [r3, r2]
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d100      	bne.n	8005176 <HAL_UART_IRQHandler+0x442>
 8005174:	e0ae      	b.n	80052d4 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8005176:	183b      	adds	r3, r7, r0
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d100      	bne.n	8005180 <HAL_UART_IRQHandler+0x44c>
 800517e:	e0a9      	b.n	80052d4 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005180:	f3ef 8310 	mrs	r3, PRIMASK
 8005184:	60fb      	str	r3, [r7, #12]
  return(result);
 8005186:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005188:	2488      	movs	r4, #136	; 0x88
 800518a:	193a      	adds	r2, r7, r4
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	2301      	movs	r3, #1
 8005190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f383 8810 	msr	PRIMASK, r3
}
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	494f      	ldr	r1, [pc, #316]	; (80052e4 <HAL_UART_IRQHandler+0x5b0>)
 80051a6:	400a      	ands	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	193b      	adds	r3, r7, r4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f383 8810 	msr	PRIMASK, r3
}
 80051b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b8:	f3ef 8310 	mrs	r3, PRIMASK
 80051bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80051be:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c0:	2484      	movs	r4, #132	; 0x84
 80051c2:	193a      	adds	r2, r7, r4
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	2301      	movs	r3, #1
 80051c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f383 8810 	msr	PRIMASK, r3
}
 80051d0:	46c0      	nop			; (mov r8, r8)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2101      	movs	r1, #1
 80051de:	438a      	bics	r2, r1
 80051e0:	609a      	str	r2, [r3, #8]
 80051e2:	193b      	adds	r3, r7, r4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	f383 8810 	msr	PRIMASK, r3
}
 80051ee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005202:	f3ef 8310 	mrs	r3, PRIMASK
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520a:	2480      	movs	r4, #128	; 0x80
 800520c:	193a      	adds	r2, r7, r4
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	2301      	movs	r3, #1
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	f383 8810 	msr	PRIMASK, r3
}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2110      	movs	r1, #16
 8005228:	438a      	bics	r2, r1
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	193b      	adds	r3, r7, r4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	f383 8810 	msr	PRIMASK, r3
}
 8005238:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800523a:	183b      	adds	r3, r7, r0
 800523c:	881a      	ldrh	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	0011      	movs	r1, r2
 8005242:	0018      	movs	r0, r3
 8005244:	f000 f860 	bl	8005308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005248:	e044      	b.n	80052d4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800524a:	23a4      	movs	r3, #164	; 0xa4
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	035b      	lsls	r3, r3, #13
 8005254:	4013      	ands	r3, r2
 8005256:	d010      	beq.n	800527a <HAL_UART_IRQHandler+0x546>
 8005258:	239c      	movs	r3, #156	; 0x9c
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	03db      	lsls	r3, r3, #15
 8005262:	4013      	ands	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2280      	movs	r2, #128	; 0x80
 800526c:	0352      	lsls	r2, r2, #13
 800526e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	0018      	movs	r0, r3
 8005274:	f000 fd76 	bl	8005d64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005278:	e02f      	b.n	80052da <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800527a:	23a4      	movs	r3, #164	; 0xa4
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2280      	movs	r2, #128	; 0x80
 8005282:	4013      	ands	r3, r2
 8005284:	d00f      	beq.n	80052a6 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005286:	23a0      	movs	r3, #160	; 0xa0
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2280      	movs	r2, #128	; 0x80
 800528e:	4013      	ands	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01e      	beq.n	80052d8 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	0010      	movs	r0, r2
 80052a2:	4798      	blx	r3
    }
    return;
 80052a4:	e018      	b.n	80052d8 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052a6:	23a4      	movs	r3, #164	; 0xa4
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2240      	movs	r2, #64	; 0x40
 80052ae:	4013      	ands	r3, r2
 80052b0:	d013      	beq.n	80052da <HAL_UART_IRQHandler+0x5a6>
 80052b2:	23a0      	movs	r3, #160	; 0xa0
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2240      	movs	r2, #64	; 0x40
 80052ba:	4013      	ands	r3, r2
 80052bc:	d00d      	beq.n	80052da <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 fd24 	bl	8005d0e <UART_EndTransmit_IT>
    return;
 80052c6:	e008      	b.n	80052da <HAL_UART_IRQHandler+0x5a6>
      return;
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	e006      	b.n	80052da <HAL_UART_IRQHandler+0x5a6>
    return;
 80052cc:	46c0      	nop			; (mov r8, r8)
 80052ce:	e004      	b.n	80052da <HAL_UART_IRQHandler+0x5a6>
      return;
 80052d0:	46c0      	nop			; (mov r8, r8)
 80052d2:	e002      	b.n	80052da <HAL_UART_IRQHandler+0x5a6>
      return;
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	e000      	b.n	80052da <HAL_UART_IRQHandler+0x5a6>
    return;
 80052d8:	46c0      	nop			; (mov r8, r8)
  }

}
 80052da:	46bd      	mov	sp, r7
 80052dc:	b02b      	add	sp, #172	; 0xac
 80052de:	bd90      	pop	{r4, r7, pc}
 80052e0:	fffffeff 	.word	0xfffffeff
 80052e4:	fffffedf 	.word	0xfffffedf

080052e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052f0:	46c0      	nop			; (mov r8, r8)
 80052f2:	46bd      	mov	sp, r7
 80052f4:	b002      	add	sp, #8
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	46bd      	mov	sp, r7
 8005304:	b002      	add	sp, #8
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	000a      	movs	r2, r1
 8005312:	1cbb      	adds	r3, r7, #2
 8005314:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	46bd      	mov	sp, r7
 800531a:	b002      	add	sp, #8
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005320:	b5b0      	push	{r4, r5, r7, lr}
 8005322:	b08e      	sub	sp, #56	; 0x38
 8005324:	af00      	add	r7, sp, #0
 8005326:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005328:	231a      	movs	r3, #26
 800532a:	2218      	movs	r2, #24
 800532c:	4694      	mov	ip, r2
 800532e:	44bc      	add	ip, r7
 8005330:	4463      	add	r3, ip
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	431a      	orrs	r2, r3
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	431a      	orrs	r2, r3
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	4313      	orrs	r3, r2
 800534c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4ab0      	ldr	r2, [pc, #704]	; (8005618 <UART_SetConfig+0x2f8>)
 8005356:	4013      	ands	r3, r2
 8005358:	0019      	movs	r1, r3
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005360:	430a      	orrs	r2, r1
 8005362:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	4aac      	ldr	r2, [pc, #688]	; (800561c <UART_SetConfig+0x2fc>)
 800536c:	4013      	ands	r3, r2
 800536e:	0019      	movs	r1, r3
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4aa6      	ldr	r2, [pc, #664]	; (8005620 <UART_SetConfig+0x300>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005392:	4313      	orrs	r3, r2
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4aa1      	ldr	r2, [pc, #644]	; (8005624 <UART_SetConfig+0x304>)
 800539e:	4013      	ands	r3, r2
 80053a0:	0019      	movs	r1, r3
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a8:	430a      	orrs	r2, r1
 80053aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a9d      	ldr	r2, [pc, #628]	; (8005628 <UART_SetConfig+0x308>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d136      	bne.n	8005424 <UART_SetConfig+0x104>
 80053b6:	4b9d      	ldr	r3, [pc, #628]	; (800562c <UART_SetConfig+0x30c>)
 80053b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ba:	2203      	movs	r2, #3
 80053bc:	4013      	ands	r3, r2
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d020      	beq.n	8005404 <UART_SetConfig+0xe4>
 80053c2:	d827      	bhi.n	8005414 <UART_SetConfig+0xf4>
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d00d      	beq.n	80053e4 <UART_SetConfig+0xc4>
 80053c8:	d824      	bhi.n	8005414 <UART_SetConfig+0xf4>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <UART_SetConfig+0xb4>
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d010      	beq.n	80053f4 <UART_SetConfig+0xd4>
 80053d2:	e01f      	b.n	8005414 <UART_SetConfig+0xf4>
 80053d4:	231b      	movs	r3, #27
 80053d6:	2218      	movs	r2, #24
 80053d8:	4694      	mov	ip, r2
 80053da:	44bc      	add	ip, r7
 80053dc:	4463      	add	r3, ip
 80053de:	2201      	movs	r2, #1
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e0c5      	b.n	8005570 <UART_SetConfig+0x250>
 80053e4:	231b      	movs	r3, #27
 80053e6:	2218      	movs	r2, #24
 80053e8:	4694      	mov	ip, r2
 80053ea:	44bc      	add	ip, r7
 80053ec:	4463      	add	r3, ip
 80053ee:	2202      	movs	r2, #2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e0bd      	b.n	8005570 <UART_SetConfig+0x250>
 80053f4:	231b      	movs	r3, #27
 80053f6:	2218      	movs	r2, #24
 80053f8:	4694      	mov	ip, r2
 80053fa:	44bc      	add	ip, r7
 80053fc:	4463      	add	r3, ip
 80053fe:	2204      	movs	r2, #4
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	e0b5      	b.n	8005570 <UART_SetConfig+0x250>
 8005404:	231b      	movs	r3, #27
 8005406:	2218      	movs	r2, #24
 8005408:	4694      	mov	ip, r2
 800540a:	44bc      	add	ip, r7
 800540c:	4463      	add	r3, ip
 800540e:	2208      	movs	r2, #8
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e0ad      	b.n	8005570 <UART_SetConfig+0x250>
 8005414:	231b      	movs	r3, #27
 8005416:	2218      	movs	r2, #24
 8005418:	4694      	mov	ip, r2
 800541a:	44bc      	add	ip, r7
 800541c:	4463      	add	r3, ip
 800541e:	2210      	movs	r2, #16
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e0a5      	b.n	8005570 <UART_SetConfig+0x250>
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a81      	ldr	r2, [pc, #516]	; (8005630 <UART_SetConfig+0x310>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d136      	bne.n	800549c <UART_SetConfig+0x17c>
 800542e:	4b7f      	ldr	r3, [pc, #508]	; (800562c <UART_SetConfig+0x30c>)
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	220c      	movs	r2, #12
 8005434:	4013      	ands	r3, r2
 8005436:	2b0c      	cmp	r3, #12
 8005438:	d020      	beq.n	800547c <UART_SetConfig+0x15c>
 800543a:	d827      	bhi.n	800548c <UART_SetConfig+0x16c>
 800543c:	2b08      	cmp	r3, #8
 800543e:	d00d      	beq.n	800545c <UART_SetConfig+0x13c>
 8005440:	d824      	bhi.n	800548c <UART_SetConfig+0x16c>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <UART_SetConfig+0x12c>
 8005446:	2b04      	cmp	r3, #4
 8005448:	d010      	beq.n	800546c <UART_SetConfig+0x14c>
 800544a:	e01f      	b.n	800548c <UART_SetConfig+0x16c>
 800544c:	231b      	movs	r3, #27
 800544e:	2218      	movs	r2, #24
 8005450:	4694      	mov	ip, r2
 8005452:	44bc      	add	ip, r7
 8005454:	4463      	add	r3, ip
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	e089      	b.n	8005570 <UART_SetConfig+0x250>
 800545c:	231b      	movs	r3, #27
 800545e:	2218      	movs	r2, #24
 8005460:	4694      	mov	ip, r2
 8005462:	44bc      	add	ip, r7
 8005464:	4463      	add	r3, ip
 8005466:	2202      	movs	r2, #2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e081      	b.n	8005570 <UART_SetConfig+0x250>
 800546c:	231b      	movs	r3, #27
 800546e:	2218      	movs	r2, #24
 8005470:	4694      	mov	ip, r2
 8005472:	44bc      	add	ip, r7
 8005474:	4463      	add	r3, ip
 8005476:	2204      	movs	r2, #4
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e079      	b.n	8005570 <UART_SetConfig+0x250>
 800547c:	231b      	movs	r3, #27
 800547e:	2218      	movs	r2, #24
 8005480:	4694      	mov	ip, r2
 8005482:	44bc      	add	ip, r7
 8005484:	4463      	add	r3, ip
 8005486:	2208      	movs	r2, #8
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	e071      	b.n	8005570 <UART_SetConfig+0x250>
 800548c:	231b      	movs	r3, #27
 800548e:	2218      	movs	r2, #24
 8005490:	4694      	mov	ip, r2
 8005492:	44bc      	add	ip, r7
 8005494:	4463      	add	r3, ip
 8005496:	2210      	movs	r2, #16
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	e069      	b.n	8005570 <UART_SetConfig+0x250>
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a64      	ldr	r2, [pc, #400]	; (8005634 <UART_SetConfig+0x314>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d107      	bne.n	80054b6 <UART_SetConfig+0x196>
 80054a6:	231b      	movs	r3, #27
 80054a8:	2218      	movs	r2, #24
 80054aa:	4694      	mov	ip, r2
 80054ac:	44bc      	add	ip, r7
 80054ae:	4463      	add	r3, ip
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
 80054b4:	e05c      	b.n	8005570 <UART_SetConfig+0x250>
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a5f      	ldr	r2, [pc, #380]	; (8005638 <UART_SetConfig+0x318>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d107      	bne.n	80054d0 <UART_SetConfig+0x1b0>
 80054c0:	231b      	movs	r3, #27
 80054c2:	2218      	movs	r2, #24
 80054c4:	4694      	mov	ip, r2
 80054c6:	44bc      	add	ip, r7
 80054c8:	4463      	add	r3, ip
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e04f      	b.n	8005570 <UART_SetConfig+0x250>
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a52      	ldr	r2, [pc, #328]	; (8005620 <UART_SetConfig+0x300>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d143      	bne.n	8005562 <UART_SetConfig+0x242>
 80054da:	4b54      	ldr	r3, [pc, #336]	; (800562c <UART_SetConfig+0x30c>)
 80054dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054de:	23c0      	movs	r3, #192	; 0xc0
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	4013      	ands	r3, r2
 80054e4:	22c0      	movs	r2, #192	; 0xc0
 80054e6:	0112      	lsls	r2, r2, #4
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d02a      	beq.n	8005542 <UART_SetConfig+0x222>
 80054ec:	22c0      	movs	r2, #192	; 0xc0
 80054ee:	0112      	lsls	r2, r2, #4
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d82e      	bhi.n	8005552 <UART_SetConfig+0x232>
 80054f4:	2280      	movs	r2, #128	; 0x80
 80054f6:	0112      	lsls	r2, r2, #4
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d012      	beq.n	8005522 <UART_SetConfig+0x202>
 80054fc:	2280      	movs	r2, #128	; 0x80
 80054fe:	0112      	lsls	r2, r2, #4
 8005500:	4293      	cmp	r3, r2
 8005502:	d826      	bhi.n	8005552 <UART_SetConfig+0x232>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d004      	beq.n	8005512 <UART_SetConfig+0x1f2>
 8005508:	2280      	movs	r2, #128	; 0x80
 800550a:	00d2      	lsls	r2, r2, #3
 800550c:	4293      	cmp	r3, r2
 800550e:	d010      	beq.n	8005532 <UART_SetConfig+0x212>
 8005510:	e01f      	b.n	8005552 <UART_SetConfig+0x232>
 8005512:	231b      	movs	r3, #27
 8005514:	2218      	movs	r2, #24
 8005516:	4694      	mov	ip, r2
 8005518:	44bc      	add	ip, r7
 800551a:	4463      	add	r3, ip
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	e026      	b.n	8005570 <UART_SetConfig+0x250>
 8005522:	231b      	movs	r3, #27
 8005524:	2218      	movs	r2, #24
 8005526:	4694      	mov	ip, r2
 8005528:	44bc      	add	ip, r7
 800552a:	4463      	add	r3, ip
 800552c:	2202      	movs	r2, #2
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	e01e      	b.n	8005570 <UART_SetConfig+0x250>
 8005532:	231b      	movs	r3, #27
 8005534:	2218      	movs	r2, #24
 8005536:	4694      	mov	ip, r2
 8005538:	44bc      	add	ip, r7
 800553a:	4463      	add	r3, ip
 800553c:	2204      	movs	r2, #4
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e016      	b.n	8005570 <UART_SetConfig+0x250>
 8005542:	231b      	movs	r3, #27
 8005544:	2218      	movs	r2, #24
 8005546:	4694      	mov	ip, r2
 8005548:	44bc      	add	ip, r7
 800554a:	4463      	add	r3, ip
 800554c:	2208      	movs	r2, #8
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e00e      	b.n	8005570 <UART_SetConfig+0x250>
 8005552:	231b      	movs	r3, #27
 8005554:	2218      	movs	r2, #24
 8005556:	4694      	mov	ip, r2
 8005558:	44bc      	add	ip, r7
 800555a:	4463      	add	r3, ip
 800555c:	2210      	movs	r2, #16
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	e006      	b.n	8005570 <UART_SetConfig+0x250>
 8005562:	231b      	movs	r3, #27
 8005564:	2218      	movs	r2, #24
 8005566:	4694      	mov	ip, r2
 8005568:	44bc      	add	ip, r7
 800556a:	4463      	add	r3, ip
 800556c:	2210      	movs	r2, #16
 800556e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <UART_SetConfig+0x300>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d000      	beq.n	800557c <UART_SetConfig+0x25c>
 800557a:	e09e      	b.n	80056ba <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800557c:	231b      	movs	r3, #27
 800557e:	2218      	movs	r2, #24
 8005580:	4694      	mov	ip, r2
 8005582:	44bc      	add	ip, r7
 8005584:	4463      	add	r3, ip
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d01d      	beq.n	80055c8 <UART_SetConfig+0x2a8>
 800558c:	dc20      	bgt.n	80055d0 <UART_SetConfig+0x2b0>
 800558e:	2b04      	cmp	r3, #4
 8005590:	d015      	beq.n	80055be <UART_SetConfig+0x29e>
 8005592:	dc1d      	bgt.n	80055d0 <UART_SetConfig+0x2b0>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <UART_SetConfig+0x27e>
 8005598:	2b02      	cmp	r3, #2
 800559a:	d005      	beq.n	80055a8 <UART_SetConfig+0x288>
 800559c:	e018      	b.n	80055d0 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800559e:	f7fe f995 	bl	80038cc <HAL_RCC_GetPCLK1Freq>
 80055a2:	0003      	movs	r3, r0
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055a6:	e01d      	b.n	80055e4 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a8:	4b20      	ldr	r3, [pc, #128]	; (800562c <UART_SetConfig+0x30c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2210      	movs	r2, #16
 80055ae:	4013      	ands	r3, r2
 80055b0:	d002      	beq.n	80055b8 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80055b2:	4b22      	ldr	r3, [pc, #136]	; (800563c <UART_SetConfig+0x31c>)
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055b6:	e015      	b.n	80055e4 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 80055b8:	4b21      	ldr	r3, [pc, #132]	; (8005640 <UART_SetConfig+0x320>)
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055bc:	e012      	b.n	80055e4 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055be:	f7fe f8d5 	bl	800376c <HAL_RCC_GetSysClockFreq>
 80055c2:	0003      	movs	r3, r0
 80055c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055c6:	e00d      	b.n	80055e4 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055ce:	e009      	b.n	80055e4 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80055d4:	231a      	movs	r3, #26
 80055d6:	2218      	movs	r2, #24
 80055d8:	4694      	mov	ip, r2
 80055da:	44bc      	add	ip, r7
 80055dc:	4463      	add	r3, ip
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
        break;
 80055e2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d100      	bne.n	80055ec <UART_SetConfig+0x2cc>
 80055ea:	e13c      	b.n	8005866 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	0013      	movs	r3, r2
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	189b      	adds	r3, r3, r2
 80055f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d305      	bcc.n	8005608 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005604:	429a      	cmp	r2, r3
 8005606:	d91d      	bls.n	8005644 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8005608:	231a      	movs	r3, #26
 800560a:	2218      	movs	r2, #24
 800560c:	4694      	mov	ip, r2
 800560e:	44bc      	add	ip, r7
 8005610:	4463      	add	r3, ip
 8005612:	2201      	movs	r2, #1
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	e126      	b.n	8005866 <UART_SetConfig+0x546>
 8005618:	efff69f3 	.word	0xefff69f3
 800561c:	ffffcfff 	.word	0xffffcfff
 8005620:	40004800 	.word	0x40004800
 8005624:	fffff4ff 	.word	0xfffff4ff
 8005628:	40013800 	.word	0x40013800
 800562c:	40021000 	.word	0x40021000
 8005630:	40004400 	.word	0x40004400
 8005634:	40004c00 	.word	0x40004c00
 8005638:	40005000 	.word	0x40005000
 800563c:	003d0900 	.word	0x003d0900
 8005640:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	6939      	ldr	r1, [r7, #16]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	000b      	movs	r3, r1
 8005652:	0e1b      	lsrs	r3, r3, #24
 8005654:	0010      	movs	r0, r2
 8005656:	0205      	lsls	r5, r0, #8
 8005658:	431d      	orrs	r5, r3
 800565a:	000b      	movs	r3, r1
 800565c:	021c      	lsls	r4, r3, #8
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	60bb      	str	r3, [r7, #8]
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	68b8      	ldr	r0, [r7, #8]
 800566c:	68f9      	ldr	r1, [r7, #12]
 800566e:	1900      	adds	r0, r0, r4
 8005670:	4169      	adcs	r1, r5
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	2300      	movs	r3, #0
 800567a:	607b      	str	r3, [r7, #4]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f7fa fde0 	bl	8000244 <__aeabi_uldivmod>
 8005684:	0002      	movs	r2, r0
 8005686:	000b      	movs	r3, r1
 8005688:	0013      	movs	r3, r2
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800568c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800568e:	23c0      	movs	r3, #192	; 0xc0
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	429a      	cmp	r2, r3
 8005694:	d309      	bcc.n	80056aa <UART_SetConfig+0x38a>
 8005696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	035b      	lsls	r3, r3, #13
 800569c:	429a      	cmp	r2, r3
 800569e:	d204      	bcs.n	80056aa <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056a6:	60da      	str	r2, [r3, #12]
 80056a8:	e0dd      	b.n	8005866 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80056aa:	231a      	movs	r3, #26
 80056ac:	2218      	movs	r2, #24
 80056ae:	4694      	mov	ip, r2
 80056b0:	44bc      	add	ip, r7
 80056b2:	4463      	add	r3, ip
 80056b4:	2201      	movs	r2, #1
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	e0d5      	b.n	8005866 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	69da      	ldr	r2, [r3, #28]
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d000      	beq.n	80056c8 <UART_SetConfig+0x3a8>
 80056c6:	e074      	b.n	80057b2 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 80056c8:	231b      	movs	r3, #27
 80056ca:	2218      	movs	r2, #24
 80056cc:	4694      	mov	ip, r2
 80056ce:	44bc      	add	ip, r7
 80056d0:	4463      	add	r3, ip
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d822      	bhi.n	800571e <UART_SetConfig+0x3fe>
 80056d8:	009a      	lsls	r2, r3, #2
 80056da:	4b6b      	ldr	r3, [pc, #428]	; (8005888 <UART_SetConfig+0x568>)
 80056dc:	18d3      	adds	r3, r2, r3
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e2:	f7fe f8f3 	bl	80038cc <HAL_RCC_GetPCLK1Freq>
 80056e6:	0003      	movs	r3, r0
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056ea:	e022      	b.n	8005732 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ec:	f7fe f904 	bl	80038f8 <HAL_RCC_GetPCLK2Freq>
 80056f0:	0003      	movs	r3, r0
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056f4:	e01d      	b.n	8005732 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056f6:	4b65      	ldr	r3, [pc, #404]	; (800588c <UART_SetConfig+0x56c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2210      	movs	r2, #16
 80056fc:	4013      	ands	r3, r2
 80056fe:	d002      	beq.n	8005706 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005700:	4b63      	ldr	r3, [pc, #396]	; (8005890 <UART_SetConfig+0x570>)
 8005702:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005704:	e015      	b.n	8005732 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8005706:	4b63      	ldr	r3, [pc, #396]	; (8005894 <UART_SetConfig+0x574>)
 8005708:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800570a:	e012      	b.n	8005732 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570c:	f7fe f82e 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8005710:	0003      	movs	r3, r0
 8005712:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005714:	e00d      	b.n	8005732 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005716:	2380      	movs	r3, #128	; 0x80
 8005718:	021b      	lsls	r3, r3, #8
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800571c:	e009      	b.n	8005732 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005722:	231a      	movs	r3, #26
 8005724:	2218      	movs	r2, #24
 8005726:	4694      	mov	ip, r2
 8005728:	44bc      	add	ip, r7
 800572a:	4463      	add	r3, ip
 800572c:	2201      	movs	r2, #1
 800572e:	701a      	strb	r2, [r3, #0]
        break;
 8005730:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d100      	bne.n	800573a <UART_SetConfig+0x41a>
 8005738:	e095      	b.n	8005866 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	005a      	lsls	r2, r3, #1
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	085b      	lsrs	r3, r3, #1
 8005744:	18d2      	adds	r2, r2, r3
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	0019      	movs	r1, r3
 800574c:	0010      	movs	r0, r2
 800574e:	f7fa fced 	bl	800012c <__udivsi3>
 8005752:	0003      	movs	r3, r0
 8005754:	b29b      	uxth	r3, r3
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	2b0f      	cmp	r3, #15
 800575c:	d921      	bls.n	80057a2 <UART_SetConfig+0x482>
 800575e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	025b      	lsls	r3, r3, #9
 8005764:	429a      	cmp	r2, r3
 8005766:	d21c      	bcs.n	80057a2 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	b29a      	uxth	r2, r3
 800576c:	200e      	movs	r0, #14
 800576e:	2418      	movs	r4, #24
 8005770:	193b      	adds	r3, r7, r4
 8005772:	181b      	adds	r3, r3, r0
 8005774:	210f      	movs	r1, #15
 8005776:	438a      	bics	r2, r1
 8005778:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	b29b      	uxth	r3, r3
 8005780:	2207      	movs	r2, #7
 8005782:	4013      	ands	r3, r2
 8005784:	b299      	uxth	r1, r3
 8005786:	193b      	adds	r3, r7, r4
 8005788:	181b      	adds	r3, r3, r0
 800578a:	193a      	adds	r2, r7, r4
 800578c:	1812      	adds	r2, r2, r0
 800578e:	8812      	ldrh	r2, [r2, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	193a      	adds	r2, r7, r4
 800579a:	1812      	adds	r2, r2, r0
 800579c:	8812      	ldrh	r2, [r2, #0]
 800579e:	60da      	str	r2, [r3, #12]
 80057a0:	e061      	b.n	8005866 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80057a2:	231a      	movs	r3, #26
 80057a4:	2218      	movs	r2, #24
 80057a6:	4694      	mov	ip, r2
 80057a8:	44bc      	add	ip, r7
 80057aa:	4463      	add	r3, ip
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e059      	b.n	8005866 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057b2:	231b      	movs	r3, #27
 80057b4:	2218      	movs	r2, #24
 80057b6:	4694      	mov	ip, r2
 80057b8:	44bc      	add	ip, r7
 80057ba:	4463      	add	r3, ip
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d822      	bhi.n	8005808 <UART_SetConfig+0x4e8>
 80057c2:	009a      	lsls	r2, r3, #2
 80057c4:	4b34      	ldr	r3, [pc, #208]	; (8005898 <UART_SetConfig+0x578>)
 80057c6:	18d3      	adds	r3, r2, r3
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7fe f87e 	bl	80038cc <HAL_RCC_GetPCLK1Freq>
 80057d0:	0003      	movs	r3, r0
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057d4:	e022      	b.n	800581c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057d6:	f7fe f88f 	bl	80038f8 <HAL_RCC_GetPCLK2Freq>
 80057da:	0003      	movs	r3, r0
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057de:	e01d      	b.n	800581c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057e0:	4b2a      	ldr	r3, [pc, #168]	; (800588c <UART_SetConfig+0x56c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2210      	movs	r2, #16
 80057e6:	4013      	ands	r3, r2
 80057e8:	d002      	beq.n	80057f0 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80057ea:	4b29      	ldr	r3, [pc, #164]	; (8005890 <UART_SetConfig+0x570>)
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057ee:	e015      	b.n	800581c <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 80057f0:	4b28      	ldr	r3, [pc, #160]	; (8005894 <UART_SetConfig+0x574>)
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057f4:	e012      	b.n	800581c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f6:	f7fd ffb9 	bl	800376c <HAL_RCC_GetSysClockFreq>
 80057fa:	0003      	movs	r3, r0
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057fe:	e00d      	b.n	800581c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005806:	e009      	b.n	800581c <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800580c:	231a      	movs	r3, #26
 800580e:	2218      	movs	r2, #24
 8005810:	4694      	mov	ip, r2
 8005812:	44bc      	add	ip, r7
 8005814:	4463      	add	r3, ip
 8005816:	2201      	movs	r2, #1
 8005818:	701a      	strb	r2, [r3, #0]
        break;
 800581a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d021      	beq.n	8005866 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	085a      	lsrs	r2, r3, #1
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	18d2      	adds	r2, r2, r3
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	0019      	movs	r1, r3
 8005832:	0010      	movs	r0, r2
 8005834:	f7fa fc7a 	bl	800012c <__udivsi3>
 8005838:	0003      	movs	r3, r0
 800583a:	b29b      	uxth	r3, r3
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	2b0f      	cmp	r3, #15
 8005842:	d909      	bls.n	8005858 <UART_SetConfig+0x538>
 8005844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	025b      	lsls	r3, r3, #9
 800584a:	429a      	cmp	r2, r3
 800584c:	d204      	bcs.n	8005858 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005854:	60da      	str	r2, [r3, #12]
 8005856:	e006      	b.n	8005866 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005858:	231a      	movs	r3, #26
 800585a:	2218      	movs	r2, #24
 800585c:	4694      	mov	ip, r2
 800585e:	44bc      	add	ip, r7
 8005860:	4463      	add	r3, ip
 8005862:	2201      	movs	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	2200      	movs	r2, #0
 800586a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2200      	movs	r2, #0
 8005870:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005872:	231a      	movs	r3, #26
 8005874:	2218      	movs	r2, #24
 8005876:	4694      	mov	ip, r2
 8005878:	44bc      	add	ip, r7
 800587a:	4463      	add	r3, ip
 800587c:	781b      	ldrb	r3, [r3, #0]
}
 800587e:	0018      	movs	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	b00e      	add	sp, #56	; 0x38
 8005884:	bdb0      	pop	{r4, r5, r7, pc}
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	08006a54 	.word	0x08006a54
 800588c:	40021000 	.word	0x40021000
 8005890:	003d0900 	.word	0x003d0900
 8005894:	00f42400 	.word	0x00f42400
 8005898:	08006a78 	.word	0x08006a78

0800589c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	2201      	movs	r2, #1
 80058aa:	4013      	ands	r3, r2
 80058ac:	d00b      	beq.n	80058c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4a4a      	ldr	r2, [pc, #296]	; (80059e0 <UART_AdvFeatureConfig+0x144>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	0019      	movs	r1, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2202      	movs	r2, #2
 80058cc:	4013      	ands	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	4a43      	ldr	r2, [pc, #268]	; (80059e4 <UART_AdvFeatureConfig+0x148>)
 80058d8:	4013      	ands	r3, r2
 80058da:	0019      	movs	r1, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2204      	movs	r2, #4
 80058ee:	4013      	ands	r3, r2
 80058f0:	d00b      	beq.n	800590a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4a3b      	ldr	r2, [pc, #236]	; (80059e8 <UART_AdvFeatureConfig+0x14c>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	0019      	movs	r1, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	2208      	movs	r2, #8
 8005910:	4013      	ands	r3, r2
 8005912:	d00b      	beq.n	800592c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4a34      	ldr	r2, [pc, #208]	; (80059ec <UART_AdvFeatureConfig+0x150>)
 800591c:	4013      	ands	r3, r2
 800591e:	0019      	movs	r1, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	2210      	movs	r2, #16
 8005932:	4013      	ands	r3, r2
 8005934:	d00b      	beq.n	800594e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4a2c      	ldr	r2, [pc, #176]	; (80059f0 <UART_AdvFeatureConfig+0x154>)
 800593e:	4013      	ands	r3, r2
 8005940:	0019      	movs	r1, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	2220      	movs	r2, #32
 8005954:	4013      	ands	r3, r2
 8005956:	d00b      	beq.n	8005970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	4a25      	ldr	r2, [pc, #148]	; (80059f4 <UART_AdvFeatureConfig+0x158>)
 8005960:	4013      	ands	r3, r2
 8005962:	0019      	movs	r1, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	2240      	movs	r2, #64	; 0x40
 8005976:	4013      	ands	r3, r2
 8005978:	d01d      	beq.n	80059b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <UART_AdvFeatureConfig+0x15c>)
 8005982:	4013      	ands	r3, r2
 8005984:	0019      	movs	r1, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005996:	2380      	movs	r3, #128	; 0x80
 8005998:	035b      	lsls	r3, r3, #13
 800599a:	429a      	cmp	r2, r3
 800599c:	d10b      	bne.n	80059b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4a15      	ldr	r2, [pc, #84]	; (80059fc <UART_AdvFeatureConfig+0x160>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	0019      	movs	r1, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	2280      	movs	r2, #128	; 0x80
 80059bc:	4013      	ands	r3, r2
 80059be:	d00b      	beq.n	80059d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	4a0e      	ldr	r2, [pc, #56]	; (8005a00 <UART_AdvFeatureConfig+0x164>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	0019      	movs	r1, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
  }
}
 80059d8:	46c0      	nop			; (mov r8, r8)
 80059da:	46bd      	mov	sp, r7
 80059dc:	b002      	add	sp, #8
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	fffdffff 	.word	0xfffdffff
 80059e4:	fffeffff 	.word	0xfffeffff
 80059e8:	fffbffff 	.word	0xfffbffff
 80059ec:	ffff7fff 	.word	0xffff7fff
 80059f0:	ffffefff 	.word	0xffffefff
 80059f4:	ffffdfff 	.word	0xffffdfff
 80059f8:	ffefffff 	.word	0xffefffff
 80059fc:	ff9fffff 	.word	0xff9fffff
 8005a00:	fff7ffff 	.word	0xfff7ffff

08005a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2280      	movs	r2, #128	; 0x80
 8005a10:	2100      	movs	r1, #0
 8005a12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a14:	f7fc fa1e 	bl	8001e54 <HAL_GetTick>
 8005a18:	0003      	movs	r3, r0
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2208      	movs	r2, #8
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d10c      	bne.n	8005a44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2280      	movs	r2, #128	; 0x80
 8005a2e:	0391      	lsls	r1, r2, #14
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <UART_CheckIdleState+0x8c>)
 8005a34:	9200      	str	r2, [sp, #0]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f000 f82c 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8005a3c:	1e03      	subs	r3, r0, #0
 8005a3e:	d001      	beq.n	8005a44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e021      	b.n	8005a88 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d10c      	bne.n	8005a6c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2280      	movs	r2, #128	; 0x80
 8005a56:	03d1      	lsls	r1, r2, #15
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	4a0d      	ldr	r2, [pc, #52]	; (8005a90 <UART_CheckIdleState+0x8c>)
 8005a5c:	9200      	str	r2, [sp, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f000 f818 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8005a64:	1e03      	subs	r3, r0, #0
 8005a66:	d001      	beq.n	8005a6c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e00d      	b.n	8005a88 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2274      	movs	r2, #116	; 0x74
 8005a82:	2100      	movs	r1, #0
 8005a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	0018      	movs	r0, r3
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b004      	add	sp, #16
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	01ffffff 	.word	0x01ffffff

08005a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b094      	sub	sp, #80	; 0x50
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	1dfb      	adds	r3, r7, #7
 8005aa2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa4:	e0a3      	b.n	8005bee <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	d100      	bne.n	8005aae <UART_WaitOnFlagUntilTimeout+0x1a>
 8005aac:	e09f      	b.n	8005bee <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aae:	f7fc f9d1 	bl	8001e54 <HAL_GetTick>
 8005ab2:	0002      	movs	r2, r0
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d302      	bcc.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d13d      	bne.n	8005b40 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005acc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ace:	2301      	movs	r3, #1
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	f383 8810 	msr	PRIMASK, r3
}
 8005ad8:	46c0      	nop			; (mov r8, r8)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	494c      	ldr	r1, [pc, #304]	; (8005c18 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005ae6:	400a      	ands	r2, r1
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	f383 8810 	msr	PRIMASK, r3
}
 8005af4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af6:	f3ef 8310 	mrs	r3, PRIMASK
 8005afa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afe:	643b      	str	r3, [r7, #64]	; 0x40
 8005b00:	2301      	movs	r3, #1
 8005b02:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	f383 8810 	msr	PRIMASK, r3
}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2101      	movs	r1, #1
 8005b18:	438a      	bics	r2, r1
 8005b1a:	609a      	str	r2, [r3, #8]
 8005b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b22:	f383 8810 	msr	PRIMASK, r3
}
 8005b26:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2274      	movs	r2, #116	; 0x74
 8005b38:	2100      	movs	r1, #0
 8005b3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e067      	b.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2204      	movs	r2, #4
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d050      	beq.n	8005bee <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69da      	ldr	r2, [r3, #28]
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	401a      	ands	r2, r3
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d146      	bne.n	8005bee <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	0112      	lsls	r2, r2, #4
 8005b68:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6e:	613b      	str	r3, [r7, #16]
  return(result);
 8005b70:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b74:	2301      	movs	r3, #1
 8005b76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f383 8810 	msr	PRIMASK, r3
}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4923      	ldr	r1, [pc, #140]	; (8005c18 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f383 8810 	msr	PRIMASK, r3
}
 8005b9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ba2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	f383 8810 	msr	PRIMASK, r3
}
 8005bb0:	46c0      	nop			; (mov r8, r8)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	438a      	bics	r2, r1
 8005bc0:	609a      	str	r2, [r3, #8]
 8005bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	f383 8810 	msr	PRIMASK, r3
}
 8005bcc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2280      	movs	r2, #128	; 0x80
 8005bde:	2120      	movs	r1, #32
 8005be0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2274      	movs	r2, #116	; 0x74
 8005be6:	2100      	movs	r1, #0
 8005be8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e010      	b.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	425a      	negs	r2, r3
 8005bfe:	4153      	adcs	r3, r2
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	001a      	movs	r2, r3
 8005c04:	1dfb      	adds	r3, r7, #7
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d100      	bne.n	8005c0e <UART_WaitOnFlagUntilTimeout+0x17a>
 8005c0c:	e74b      	b.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	0018      	movs	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b014      	add	sp, #80	; 0x50
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	fffffe5f 	.word	0xfffffe5f

08005c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08e      	sub	sp, #56	; 0x38
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c24:	f3ef 8310 	mrs	r3, PRIMASK
 8005c28:	617b      	str	r3, [r7, #20]
  return(result);
 8005c2a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c2e:	2301      	movs	r3, #1
 8005c30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	f383 8810 	msr	PRIMASK, r3
}
 8005c38:	46c0      	nop			; (mov r8, r8)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4925      	ldr	r1, [pc, #148]	; (8005cdc <UART_EndRxTransfer+0xc0>)
 8005c46:	400a      	ands	r2, r1
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f383 8810 	msr	PRIMASK, r3
}
 8005c54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c56:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5a:	623b      	str	r3, [r7, #32]
  return(result);
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c60:	2301      	movs	r3, #1
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	f383 8810 	msr	PRIMASK, r3
}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2101      	movs	r1, #1
 8005c78:	438a      	bics	r2, r1
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	f383 8810 	msr	PRIMASK, r3
}
 8005c86:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d118      	bne.n	8005cc2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c90:	f3ef 8310 	mrs	r3, PRIMASK
 8005c94:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c96:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f383 8810 	msr	PRIMASK, r3
}
 8005ca4:	46c0      	nop			; (mov r8, r8)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2110      	movs	r1, #16
 8005cb2:	438a      	bics	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f383 8810 	msr	PRIMASK, r3
}
 8005cc0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005cd4:	46c0      	nop			; (mov r8, r8)
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b00e      	add	sp, #56	; 0x38
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	fffffedf 	.word	0xfffffedf

08005ce0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	225a      	movs	r2, #90	; 0x5a
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2252      	movs	r2, #82	; 0x52
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	0018      	movs	r0, r3
 8005d02:	f7ff faf9 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b004      	add	sp, #16
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b086      	sub	sp, #24
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d16:	f3ef 8310 	mrs	r3, PRIMASK
 8005d1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	2301      	movs	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f383 8810 	msr	PRIMASK, r3
}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2140      	movs	r1, #64	; 0x40
 8005d38:	438a      	bics	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f383 8810 	msr	PRIMASK, r3
}
 8005d46:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7ff fac6 	bl	80052e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5c:	46c0      	nop			; (mov r8, r8)
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	b006      	add	sp, #24
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d6c:	46c0      	nop			; (mov r8, r8)
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b002      	add	sp, #8
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <atoi>:
 8005d74:	b510      	push	{r4, lr}
 8005d76:	220a      	movs	r2, #10
 8005d78:	2100      	movs	r1, #0
 8005d7a:	f000 f90f 	bl	8005f9c <strtol>
 8005d7e:	bd10      	pop	{r4, pc}

08005d80 <__errno>:
 8005d80:	4b01      	ldr	r3, [pc, #4]	; (8005d88 <__errno+0x8>)
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	4770      	bx	lr
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	2000002c 	.word	0x2000002c

08005d8c <__libc_init_array>:
 8005d8c:	b570      	push	{r4, r5, r6, lr}
 8005d8e:	2600      	movs	r6, #0
 8005d90:	4d0c      	ldr	r5, [pc, #48]	; (8005dc4 <__libc_init_array+0x38>)
 8005d92:	4c0d      	ldr	r4, [pc, #52]	; (8005dc8 <__libc_init_array+0x3c>)
 8005d94:	1b64      	subs	r4, r4, r5
 8005d96:	10a4      	asrs	r4, r4, #2
 8005d98:	42a6      	cmp	r6, r4
 8005d9a:	d109      	bne.n	8005db0 <__libc_init_array+0x24>
 8005d9c:	2600      	movs	r6, #0
 8005d9e:	f000 fd13 	bl	80067c8 <_init>
 8005da2:	4d0a      	ldr	r5, [pc, #40]	; (8005dcc <__libc_init_array+0x40>)
 8005da4:	4c0a      	ldr	r4, [pc, #40]	; (8005dd0 <__libc_init_array+0x44>)
 8005da6:	1b64      	subs	r4, r4, r5
 8005da8:	10a4      	asrs	r4, r4, #2
 8005daa:	42a6      	cmp	r6, r4
 8005dac:	d105      	bne.n	8005dba <__libc_init_array+0x2e>
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	00b3      	lsls	r3, r6, #2
 8005db2:	58eb      	ldr	r3, [r5, r3]
 8005db4:	4798      	blx	r3
 8005db6:	3601      	adds	r6, #1
 8005db8:	e7ee      	b.n	8005d98 <__libc_init_array+0xc>
 8005dba:	00b3      	lsls	r3, r6, #2
 8005dbc:	58eb      	ldr	r3, [r5, r3]
 8005dbe:	4798      	blx	r3
 8005dc0:	3601      	adds	r6, #1
 8005dc2:	e7f2      	b.n	8005daa <__libc_init_array+0x1e>
 8005dc4:	08006bd8 	.word	0x08006bd8
 8005dc8:	08006bd8 	.word	0x08006bd8
 8005dcc:	08006bd8 	.word	0x08006bd8
 8005dd0:	08006bdc 	.word	0x08006bdc

08005dd4 <memcpy>:
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	b510      	push	{r4, lr}
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d100      	bne.n	8005dde <memcpy+0xa>
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	5ccc      	ldrb	r4, [r1, r3]
 8005de0:	54c4      	strb	r4, [r0, r3]
 8005de2:	3301      	adds	r3, #1
 8005de4:	e7f8      	b.n	8005dd8 <memcpy+0x4>

08005de6 <memset>:
 8005de6:	0003      	movs	r3, r0
 8005de8:	1882      	adds	r2, r0, r2
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d100      	bne.n	8005df0 <memset+0xa>
 8005dee:	4770      	bx	lr
 8005df0:	7019      	strb	r1, [r3, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	e7f9      	b.n	8005dea <memset+0x4>
	...

08005df8 <siprintf>:
 8005df8:	b40e      	push	{r1, r2, r3}
 8005dfa:	b500      	push	{lr}
 8005dfc:	490b      	ldr	r1, [pc, #44]	; (8005e2c <siprintf+0x34>)
 8005dfe:	b09c      	sub	sp, #112	; 0x70
 8005e00:	ab1d      	add	r3, sp, #116	; 0x74
 8005e02:	9002      	str	r0, [sp, #8]
 8005e04:	9006      	str	r0, [sp, #24]
 8005e06:	9107      	str	r1, [sp, #28]
 8005e08:	9104      	str	r1, [sp, #16]
 8005e0a:	4809      	ldr	r0, [pc, #36]	; (8005e30 <siprintf+0x38>)
 8005e0c:	4909      	ldr	r1, [pc, #36]	; (8005e34 <siprintf+0x3c>)
 8005e0e:	cb04      	ldmia	r3!, {r2}
 8005e10:	9105      	str	r1, [sp, #20]
 8005e12:	6800      	ldr	r0, [r0, #0]
 8005e14:	a902      	add	r1, sp, #8
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	f000 f92e 	bl	8006078 <_svfiprintf_r>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	9a02      	ldr	r2, [sp, #8]
 8005e20:	7013      	strb	r3, [r2, #0]
 8005e22:	b01c      	add	sp, #112	; 0x70
 8005e24:	bc08      	pop	{r3}
 8005e26:	b003      	add	sp, #12
 8005e28:	4718      	bx	r3
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	7fffffff 	.word	0x7fffffff
 8005e30:	2000002c 	.word	0x2000002c
 8005e34:	ffff0208 	.word	0xffff0208

08005e38 <strncmp>:
 8005e38:	b530      	push	{r4, r5, lr}
 8005e3a:	0005      	movs	r5, r0
 8005e3c:	1e10      	subs	r0, r2, #0
 8005e3e:	d00b      	beq.n	8005e58 <strncmp+0x20>
 8005e40:	2400      	movs	r4, #0
 8005e42:	3a01      	subs	r2, #1
 8005e44:	5d2b      	ldrb	r3, [r5, r4]
 8005e46:	5d08      	ldrb	r0, [r1, r4]
 8005e48:	4283      	cmp	r3, r0
 8005e4a:	d104      	bne.n	8005e56 <strncmp+0x1e>
 8005e4c:	4294      	cmp	r4, r2
 8005e4e:	d002      	beq.n	8005e56 <strncmp+0x1e>
 8005e50:	3401      	adds	r4, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f6      	bne.n	8005e44 <strncmp+0xc>
 8005e56:	1a18      	subs	r0, r3, r0
 8005e58:	bd30      	pop	{r4, r5, pc}

08005e5a <strrchr>:
 8005e5a:	b570      	push	{r4, r5, r6, lr}
 8005e5c:	2400      	movs	r4, #0
 8005e5e:	000d      	movs	r5, r1
 8005e60:	42a1      	cmp	r1, r4
 8005e62:	d106      	bne.n	8005e72 <strrchr+0x18>
 8005e64:	0021      	movs	r1, r4
 8005e66:	f000 fb89 	bl	800657c <strchr>
 8005e6a:	0004      	movs	r4, r0
 8005e6c:	e006      	b.n	8005e7c <strrchr+0x22>
 8005e6e:	001c      	movs	r4, r3
 8005e70:	1c58      	adds	r0, r3, #1
 8005e72:	0029      	movs	r1, r5
 8005e74:	f000 fb82 	bl	800657c <strchr>
 8005e78:	1e03      	subs	r3, r0, #0
 8005e7a:	d1f8      	bne.n	8005e6e <strrchr+0x14>
 8005e7c:	0020      	movs	r0, r4
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}

08005e80 <_strtol_l.isra.0>:
 8005e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e82:	b087      	sub	sp, #28
 8005e84:	001e      	movs	r6, r3
 8005e86:	9005      	str	r0, [sp, #20]
 8005e88:	9101      	str	r1, [sp, #4]
 8005e8a:	9202      	str	r2, [sp, #8]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d045      	beq.n	8005f1c <_strtol_l.isra.0+0x9c>
 8005e90:	0008      	movs	r0, r1
 8005e92:	2b24      	cmp	r3, #36	; 0x24
 8005e94:	d842      	bhi.n	8005f1c <_strtol_l.isra.0+0x9c>
 8005e96:	4b3f      	ldr	r3, [pc, #252]	; (8005f94 <_strtol_l.isra.0+0x114>)
 8005e98:	2208      	movs	r2, #8
 8005e9a:	469c      	mov	ip, r3
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	4661      	mov	r1, ip
 8005ea0:	781c      	ldrb	r4, [r3, #0]
 8005ea2:	1c45      	adds	r5, r0, #1
 8005ea4:	5d09      	ldrb	r1, [r1, r4]
 8005ea6:	0028      	movs	r0, r5
 8005ea8:	000f      	movs	r7, r1
 8005eaa:	4017      	ands	r7, r2
 8005eac:	4211      	tst	r1, r2
 8005eae:	d1f5      	bne.n	8005e9c <_strtol_l.isra.0+0x1c>
 8005eb0:	2c2d      	cmp	r4, #45	; 0x2d
 8005eb2:	d13a      	bne.n	8005f2a <_strtol_l.isra.0+0xaa>
 8005eb4:	2701      	movs	r7, #1
 8005eb6:	782c      	ldrb	r4, [r5, #0]
 8005eb8:	1c9d      	adds	r5, r3, #2
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	d065      	beq.n	8005f8a <_strtol_l.isra.0+0x10a>
 8005ebe:	2e10      	cmp	r6, #16
 8005ec0:	d109      	bne.n	8005ed6 <_strtol_l.isra.0+0x56>
 8005ec2:	2c30      	cmp	r4, #48	; 0x30
 8005ec4:	d107      	bne.n	8005ed6 <_strtol_l.isra.0+0x56>
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	782b      	ldrb	r3, [r5, #0]
 8005eca:	4393      	bics	r3, r2
 8005ecc:	2b58      	cmp	r3, #88	; 0x58
 8005ece:	d157      	bne.n	8005f80 <_strtol_l.isra.0+0x100>
 8005ed0:	2610      	movs	r6, #16
 8005ed2:	786c      	ldrb	r4, [r5, #1]
 8005ed4:	3502      	adds	r5, #2
 8005ed6:	4b30      	ldr	r3, [pc, #192]	; (8005f98 <_strtol_l.isra.0+0x118>)
 8005ed8:	0031      	movs	r1, r6
 8005eda:	18fb      	adds	r3, r7, r3
 8005edc:	0018      	movs	r0, r3
 8005ede:	9303      	str	r3, [sp, #12]
 8005ee0:	f7fa f9aa 	bl	8000238 <__aeabi_uidivmod>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	4684      	mov	ip, r0
 8005eea:	0018      	movs	r0, r3
 8005eec:	9104      	str	r1, [sp, #16]
 8005eee:	4252      	negs	r2, r2
 8005ef0:	0021      	movs	r1, r4
 8005ef2:	3930      	subs	r1, #48	; 0x30
 8005ef4:	2909      	cmp	r1, #9
 8005ef6:	d81d      	bhi.n	8005f34 <_strtol_l.isra.0+0xb4>
 8005ef8:	000c      	movs	r4, r1
 8005efa:	42a6      	cmp	r6, r4
 8005efc:	dd28      	ble.n	8005f50 <_strtol_l.isra.0+0xd0>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	db24      	blt.n	8005f4c <_strtol_l.isra.0+0xcc>
 8005f02:	0013      	movs	r3, r2
 8005f04:	4584      	cmp	ip, r0
 8005f06:	d306      	bcc.n	8005f16 <_strtol_l.isra.0+0x96>
 8005f08:	d102      	bne.n	8005f10 <_strtol_l.isra.0+0x90>
 8005f0a:	9904      	ldr	r1, [sp, #16]
 8005f0c:	42a1      	cmp	r1, r4
 8005f0e:	db02      	blt.n	8005f16 <_strtol_l.isra.0+0x96>
 8005f10:	2301      	movs	r3, #1
 8005f12:	4370      	muls	r0, r6
 8005f14:	1820      	adds	r0, r4, r0
 8005f16:	782c      	ldrb	r4, [r5, #0]
 8005f18:	3501      	adds	r5, #1
 8005f1a:	e7e9      	b.n	8005ef0 <_strtol_l.isra.0+0x70>
 8005f1c:	f7ff ff30 	bl	8005d80 <__errno>
 8005f20:	2316      	movs	r3, #22
 8005f22:	6003      	str	r3, [r0, #0]
 8005f24:	2000      	movs	r0, #0
 8005f26:	b007      	add	sp, #28
 8005f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f2a:	2c2b      	cmp	r4, #43	; 0x2b
 8005f2c:	d1c5      	bne.n	8005eba <_strtol_l.isra.0+0x3a>
 8005f2e:	782c      	ldrb	r4, [r5, #0]
 8005f30:	1c9d      	adds	r5, r3, #2
 8005f32:	e7c2      	b.n	8005eba <_strtol_l.isra.0+0x3a>
 8005f34:	0021      	movs	r1, r4
 8005f36:	3941      	subs	r1, #65	; 0x41
 8005f38:	2919      	cmp	r1, #25
 8005f3a:	d801      	bhi.n	8005f40 <_strtol_l.isra.0+0xc0>
 8005f3c:	3c37      	subs	r4, #55	; 0x37
 8005f3e:	e7dc      	b.n	8005efa <_strtol_l.isra.0+0x7a>
 8005f40:	0021      	movs	r1, r4
 8005f42:	3961      	subs	r1, #97	; 0x61
 8005f44:	2919      	cmp	r1, #25
 8005f46:	d803      	bhi.n	8005f50 <_strtol_l.isra.0+0xd0>
 8005f48:	3c57      	subs	r4, #87	; 0x57
 8005f4a:	e7d6      	b.n	8005efa <_strtol_l.isra.0+0x7a>
 8005f4c:	0013      	movs	r3, r2
 8005f4e:	e7e2      	b.n	8005f16 <_strtol_l.isra.0+0x96>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da09      	bge.n	8005f68 <_strtol_l.isra.0+0xe8>
 8005f54:	2322      	movs	r3, #34	; 0x22
 8005f56:	9a05      	ldr	r2, [sp, #20]
 8005f58:	9803      	ldr	r0, [sp, #12]
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	9b02      	ldr	r3, [sp, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0e1      	beq.n	8005f26 <_strtol_l.isra.0+0xa6>
 8005f62:	1e6b      	subs	r3, r5, #1
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	e007      	b.n	8005f78 <_strtol_l.isra.0+0xf8>
 8005f68:	2f00      	cmp	r7, #0
 8005f6a:	d000      	beq.n	8005f6e <_strtol_l.isra.0+0xee>
 8005f6c:	4240      	negs	r0, r0
 8005f6e:	9a02      	ldr	r2, [sp, #8]
 8005f70:	2a00      	cmp	r2, #0
 8005f72:	d0d8      	beq.n	8005f26 <_strtol_l.isra.0+0xa6>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f4      	bne.n	8005f62 <_strtol_l.isra.0+0xe2>
 8005f78:	9b02      	ldr	r3, [sp, #8]
 8005f7a:	9a01      	ldr	r2, [sp, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e7d2      	b.n	8005f26 <_strtol_l.isra.0+0xa6>
 8005f80:	2430      	movs	r4, #48	; 0x30
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	d1a7      	bne.n	8005ed6 <_strtol_l.isra.0+0x56>
 8005f86:	3608      	adds	r6, #8
 8005f88:	e7a5      	b.n	8005ed6 <_strtol_l.isra.0+0x56>
 8005f8a:	2c30      	cmp	r4, #48	; 0x30
 8005f8c:	d09b      	beq.n	8005ec6 <_strtol_l.isra.0+0x46>
 8005f8e:	260a      	movs	r6, #10
 8005f90:	e7a1      	b.n	8005ed6 <_strtol_l.isra.0+0x56>
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	08006a9d 	.word	0x08006a9d
 8005f98:	7fffffff 	.word	0x7fffffff

08005f9c <strtol>:
 8005f9c:	b510      	push	{r4, lr}
 8005f9e:	0013      	movs	r3, r2
 8005fa0:	000a      	movs	r2, r1
 8005fa2:	0001      	movs	r1, r0
 8005fa4:	4802      	ldr	r0, [pc, #8]	; (8005fb0 <strtol+0x14>)
 8005fa6:	6800      	ldr	r0, [r0, #0]
 8005fa8:	f7ff ff6a 	bl	8005e80 <_strtol_l.isra.0>
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	2000002c 	.word	0x2000002c

08005fb4 <__ssputs_r>:
 8005fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fb6:	688e      	ldr	r6, [r1, #8]
 8005fb8:	b085      	sub	sp, #20
 8005fba:	0007      	movs	r7, r0
 8005fbc:	000c      	movs	r4, r1
 8005fbe:	9203      	str	r2, [sp, #12]
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	429e      	cmp	r6, r3
 8005fc4:	d83c      	bhi.n	8006040 <__ssputs_r+0x8c>
 8005fc6:	2390      	movs	r3, #144	; 0x90
 8005fc8:	898a      	ldrh	r2, [r1, #12]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	421a      	tst	r2, r3
 8005fce:	d034      	beq.n	800603a <__ssputs_r+0x86>
 8005fd0:	2503      	movs	r5, #3
 8005fd2:	6909      	ldr	r1, [r1, #16]
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	1a5b      	subs	r3, r3, r1
 8005fd8:	9302      	str	r3, [sp, #8]
 8005fda:	6963      	ldr	r3, [r4, #20]
 8005fdc:	9802      	ldr	r0, [sp, #8]
 8005fde:	435d      	muls	r5, r3
 8005fe0:	0feb      	lsrs	r3, r5, #31
 8005fe2:	195d      	adds	r5, r3, r5
 8005fe4:	9b01      	ldr	r3, [sp, #4]
 8005fe6:	106d      	asrs	r5, r5, #1
 8005fe8:	3301      	adds	r3, #1
 8005fea:	181b      	adds	r3, r3, r0
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	d900      	bls.n	8005ff2 <__ssputs_r+0x3e>
 8005ff0:	001d      	movs	r5, r3
 8005ff2:	0553      	lsls	r3, r2, #21
 8005ff4:	d532      	bpl.n	800605c <__ssputs_r+0xa8>
 8005ff6:	0029      	movs	r1, r5
 8005ff8:	0038      	movs	r0, r7
 8005ffa:	f000 fb35 	bl	8006668 <_malloc_r>
 8005ffe:	1e06      	subs	r6, r0, #0
 8006000:	d109      	bne.n	8006016 <__ssputs_r+0x62>
 8006002:	230c      	movs	r3, #12
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	2340      	movs	r3, #64	; 0x40
 8006008:	2001      	movs	r0, #1
 800600a:	89a2      	ldrh	r2, [r4, #12]
 800600c:	4240      	negs	r0, r0
 800600e:	4313      	orrs	r3, r2
 8006010:	81a3      	strh	r3, [r4, #12]
 8006012:	b005      	add	sp, #20
 8006014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006016:	9a02      	ldr	r2, [sp, #8]
 8006018:	6921      	ldr	r1, [r4, #16]
 800601a:	f7ff fedb 	bl	8005dd4 <memcpy>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	4a14      	ldr	r2, [pc, #80]	; (8006074 <__ssputs_r+0xc0>)
 8006022:	401a      	ands	r2, r3
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	4313      	orrs	r3, r2
 8006028:	81a3      	strh	r3, [r4, #12]
 800602a:	9b02      	ldr	r3, [sp, #8]
 800602c:	6126      	str	r6, [r4, #16]
 800602e:	18f6      	adds	r6, r6, r3
 8006030:	6026      	str	r6, [r4, #0]
 8006032:	6165      	str	r5, [r4, #20]
 8006034:	9e01      	ldr	r6, [sp, #4]
 8006036:	1aed      	subs	r5, r5, r3
 8006038:	60a5      	str	r5, [r4, #8]
 800603a:	9b01      	ldr	r3, [sp, #4]
 800603c:	429e      	cmp	r6, r3
 800603e:	d900      	bls.n	8006042 <__ssputs_r+0x8e>
 8006040:	9e01      	ldr	r6, [sp, #4]
 8006042:	0032      	movs	r2, r6
 8006044:	9903      	ldr	r1, [sp, #12]
 8006046:	6820      	ldr	r0, [r4, #0]
 8006048:	f000 fab1 	bl	80065ae <memmove>
 800604c:	68a3      	ldr	r3, [r4, #8]
 800604e:	2000      	movs	r0, #0
 8006050:	1b9b      	subs	r3, r3, r6
 8006052:	60a3      	str	r3, [r4, #8]
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	199e      	adds	r6, r3, r6
 8006058:	6026      	str	r6, [r4, #0]
 800605a:	e7da      	b.n	8006012 <__ssputs_r+0x5e>
 800605c:	002a      	movs	r2, r5
 800605e:	0038      	movs	r0, r7
 8006060:	f000 fb60 	bl	8006724 <_realloc_r>
 8006064:	1e06      	subs	r6, r0, #0
 8006066:	d1e0      	bne.n	800602a <__ssputs_r+0x76>
 8006068:	0038      	movs	r0, r7
 800606a:	6921      	ldr	r1, [r4, #16]
 800606c:	f000 fab2 	bl	80065d4 <_free_r>
 8006070:	e7c7      	b.n	8006002 <__ssputs_r+0x4e>
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	fffffb7f 	.word	0xfffffb7f

08006078 <_svfiprintf_r>:
 8006078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800607a:	b0a1      	sub	sp, #132	; 0x84
 800607c:	9003      	str	r0, [sp, #12]
 800607e:	001d      	movs	r5, r3
 8006080:	898b      	ldrh	r3, [r1, #12]
 8006082:	000f      	movs	r7, r1
 8006084:	0016      	movs	r6, r2
 8006086:	061b      	lsls	r3, r3, #24
 8006088:	d511      	bpl.n	80060ae <_svfiprintf_r+0x36>
 800608a:	690b      	ldr	r3, [r1, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10e      	bne.n	80060ae <_svfiprintf_r+0x36>
 8006090:	2140      	movs	r1, #64	; 0x40
 8006092:	f000 fae9 	bl	8006668 <_malloc_r>
 8006096:	6038      	str	r0, [r7, #0]
 8006098:	6138      	str	r0, [r7, #16]
 800609a:	2800      	cmp	r0, #0
 800609c:	d105      	bne.n	80060aa <_svfiprintf_r+0x32>
 800609e:	230c      	movs	r3, #12
 80060a0:	9a03      	ldr	r2, [sp, #12]
 80060a2:	3801      	subs	r0, #1
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	b021      	add	sp, #132	; 0x84
 80060a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060aa:	2340      	movs	r3, #64	; 0x40
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	2300      	movs	r3, #0
 80060b0:	ac08      	add	r4, sp, #32
 80060b2:	6163      	str	r3, [r4, #20]
 80060b4:	3320      	adds	r3, #32
 80060b6:	7663      	strb	r3, [r4, #25]
 80060b8:	3310      	adds	r3, #16
 80060ba:	76a3      	strb	r3, [r4, #26]
 80060bc:	9507      	str	r5, [sp, #28]
 80060be:	0035      	movs	r5, r6
 80060c0:	782b      	ldrb	r3, [r5, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <_svfiprintf_r+0x52>
 80060c6:	2b25      	cmp	r3, #37	; 0x25
 80060c8:	d147      	bne.n	800615a <_svfiprintf_r+0xe2>
 80060ca:	1bab      	subs	r3, r5, r6
 80060cc:	9305      	str	r3, [sp, #20]
 80060ce:	42b5      	cmp	r5, r6
 80060d0:	d00c      	beq.n	80060ec <_svfiprintf_r+0x74>
 80060d2:	0032      	movs	r2, r6
 80060d4:	0039      	movs	r1, r7
 80060d6:	9803      	ldr	r0, [sp, #12]
 80060d8:	f7ff ff6c 	bl	8005fb4 <__ssputs_r>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d100      	bne.n	80060e2 <_svfiprintf_r+0x6a>
 80060e0:	e0ae      	b.n	8006240 <_svfiprintf_r+0x1c8>
 80060e2:	6962      	ldr	r2, [r4, #20]
 80060e4:	9b05      	ldr	r3, [sp, #20]
 80060e6:	4694      	mov	ip, r2
 80060e8:	4463      	add	r3, ip
 80060ea:	6163      	str	r3, [r4, #20]
 80060ec:	782b      	ldrb	r3, [r5, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d100      	bne.n	80060f4 <_svfiprintf_r+0x7c>
 80060f2:	e0a5      	b.n	8006240 <_svfiprintf_r+0x1c8>
 80060f4:	2201      	movs	r2, #1
 80060f6:	2300      	movs	r3, #0
 80060f8:	4252      	negs	r2, r2
 80060fa:	6062      	str	r2, [r4, #4]
 80060fc:	a904      	add	r1, sp, #16
 80060fe:	3254      	adds	r2, #84	; 0x54
 8006100:	1852      	adds	r2, r2, r1
 8006102:	1c6e      	adds	r6, r5, #1
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	60e3      	str	r3, [r4, #12]
 8006108:	60a3      	str	r3, [r4, #8]
 800610a:	7013      	strb	r3, [r2, #0]
 800610c:	65a3      	str	r3, [r4, #88]	; 0x58
 800610e:	2205      	movs	r2, #5
 8006110:	7831      	ldrb	r1, [r6, #0]
 8006112:	4854      	ldr	r0, [pc, #336]	; (8006264 <_svfiprintf_r+0x1ec>)
 8006114:	f000 fa40 	bl	8006598 <memchr>
 8006118:	1c75      	adds	r5, r6, #1
 800611a:	2800      	cmp	r0, #0
 800611c:	d11f      	bne.n	800615e <_svfiprintf_r+0xe6>
 800611e:	6822      	ldr	r2, [r4, #0]
 8006120:	06d3      	lsls	r3, r2, #27
 8006122:	d504      	bpl.n	800612e <_svfiprintf_r+0xb6>
 8006124:	2353      	movs	r3, #83	; 0x53
 8006126:	a904      	add	r1, sp, #16
 8006128:	185b      	adds	r3, r3, r1
 800612a:	2120      	movs	r1, #32
 800612c:	7019      	strb	r1, [r3, #0]
 800612e:	0713      	lsls	r3, r2, #28
 8006130:	d504      	bpl.n	800613c <_svfiprintf_r+0xc4>
 8006132:	2353      	movs	r3, #83	; 0x53
 8006134:	a904      	add	r1, sp, #16
 8006136:	185b      	adds	r3, r3, r1
 8006138:	212b      	movs	r1, #43	; 0x2b
 800613a:	7019      	strb	r1, [r3, #0]
 800613c:	7833      	ldrb	r3, [r6, #0]
 800613e:	2b2a      	cmp	r3, #42	; 0x2a
 8006140:	d016      	beq.n	8006170 <_svfiprintf_r+0xf8>
 8006142:	0035      	movs	r5, r6
 8006144:	2100      	movs	r1, #0
 8006146:	200a      	movs	r0, #10
 8006148:	68e3      	ldr	r3, [r4, #12]
 800614a:	782a      	ldrb	r2, [r5, #0]
 800614c:	1c6e      	adds	r6, r5, #1
 800614e:	3a30      	subs	r2, #48	; 0x30
 8006150:	2a09      	cmp	r2, #9
 8006152:	d94e      	bls.n	80061f2 <_svfiprintf_r+0x17a>
 8006154:	2900      	cmp	r1, #0
 8006156:	d111      	bne.n	800617c <_svfiprintf_r+0x104>
 8006158:	e017      	b.n	800618a <_svfiprintf_r+0x112>
 800615a:	3501      	adds	r5, #1
 800615c:	e7b0      	b.n	80060c0 <_svfiprintf_r+0x48>
 800615e:	4b41      	ldr	r3, [pc, #260]	; (8006264 <_svfiprintf_r+0x1ec>)
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	1ac0      	subs	r0, r0, r3
 8006164:	2301      	movs	r3, #1
 8006166:	4083      	lsls	r3, r0
 8006168:	4313      	orrs	r3, r2
 800616a:	002e      	movs	r6, r5
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	e7ce      	b.n	800610e <_svfiprintf_r+0x96>
 8006170:	9b07      	ldr	r3, [sp, #28]
 8006172:	1d19      	adds	r1, r3, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	9107      	str	r1, [sp, #28]
 8006178:	2b00      	cmp	r3, #0
 800617a:	db01      	blt.n	8006180 <_svfiprintf_r+0x108>
 800617c:	930b      	str	r3, [sp, #44]	; 0x2c
 800617e:	e004      	b.n	800618a <_svfiprintf_r+0x112>
 8006180:	425b      	negs	r3, r3
 8006182:	60e3      	str	r3, [r4, #12]
 8006184:	2302      	movs	r3, #2
 8006186:	4313      	orrs	r3, r2
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	782b      	ldrb	r3, [r5, #0]
 800618c:	2b2e      	cmp	r3, #46	; 0x2e
 800618e:	d10a      	bne.n	80061a6 <_svfiprintf_r+0x12e>
 8006190:	786b      	ldrb	r3, [r5, #1]
 8006192:	2b2a      	cmp	r3, #42	; 0x2a
 8006194:	d135      	bne.n	8006202 <_svfiprintf_r+0x18a>
 8006196:	9b07      	ldr	r3, [sp, #28]
 8006198:	3502      	adds	r5, #2
 800619a:	1d1a      	adds	r2, r3, #4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	9207      	str	r2, [sp, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	db2b      	blt.n	80061fc <_svfiprintf_r+0x184>
 80061a4:	9309      	str	r3, [sp, #36]	; 0x24
 80061a6:	4e30      	ldr	r6, [pc, #192]	; (8006268 <_svfiprintf_r+0x1f0>)
 80061a8:	2203      	movs	r2, #3
 80061aa:	0030      	movs	r0, r6
 80061ac:	7829      	ldrb	r1, [r5, #0]
 80061ae:	f000 f9f3 	bl	8006598 <memchr>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d006      	beq.n	80061c4 <_svfiprintf_r+0x14c>
 80061b6:	2340      	movs	r3, #64	; 0x40
 80061b8:	1b80      	subs	r0, r0, r6
 80061ba:	4083      	lsls	r3, r0
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	3501      	adds	r5, #1
 80061c0:	4313      	orrs	r3, r2
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	7829      	ldrb	r1, [r5, #0]
 80061c6:	2206      	movs	r2, #6
 80061c8:	4828      	ldr	r0, [pc, #160]	; (800626c <_svfiprintf_r+0x1f4>)
 80061ca:	1c6e      	adds	r6, r5, #1
 80061cc:	7621      	strb	r1, [r4, #24]
 80061ce:	f000 f9e3 	bl	8006598 <memchr>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d03c      	beq.n	8006250 <_svfiprintf_r+0x1d8>
 80061d6:	4b26      	ldr	r3, [pc, #152]	; (8006270 <_svfiprintf_r+0x1f8>)
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d125      	bne.n	8006228 <_svfiprintf_r+0x1b0>
 80061dc:	2207      	movs	r2, #7
 80061de:	9b07      	ldr	r3, [sp, #28]
 80061e0:	3307      	adds	r3, #7
 80061e2:	4393      	bics	r3, r2
 80061e4:	3308      	adds	r3, #8
 80061e6:	9307      	str	r3, [sp, #28]
 80061e8:	6963      	ldr	r3, [r4, #20]
 80061ea:	9a04      	ldr	r2, [sp, #16]
 80061ec:	189b      	adds	r3, r3, r2
 80061ee:	6163      	str	r3, [r4, #20]
 80061f0:	e765      	b.n	80060be <_svfiprintf_r+0x46>
 80061f2:	4343      	muls	r3, r0
 80061f4:	0035      	movs	r5, r6
 80061f6:	2101      	movs	r1, #1
 80061f8:	189b      	adds	r3, r3, r2
 80061fa:	e7a6      	b.n	800614a <_svfiprintf_r+0xd2>
 80061fc:	2301      	movs	r3, #1
 80061fe:	425b      	negs	r3, r3
 8006200:	e7d0      	b.n	80061a4 <_svfiprintf_r+0x12c>
 8006202:	2300      	movs	r3, #0
 8006204:	200a      	movs	r0, #10
 8006206:	001a      	movs	r2, r3
 8006208:	3501      	adds	r5, #1
 800620a:	6063      	str	r3, [r4, #4]
 800620c:	7829      	ldrb	r1, [r5, #0]
 800620e:	1c6e      	adds	r6, r5, #1
 8006210:	3930      	subs	r1, #48	; 0x30
 8006212:	2909      	cmp	r1, #9
 8006214:	d903      	bls.n	800621e <_svfiprintf_r+0x1a6>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0c5      	beq.n	80061a6 <_svfiprintf_r+0x12e>
 800621a:	9209      	str	r2, [sp, #36]	; 0x24
 800621c:	e7c3      	b.n	80061a6 <_svfiprintf_r+0x12e>
 800621e:	4342      	muls	r2, r0
 8006220:	0035      	movs	r5, r6
 8006222:	2301      	movs	r3, #1
 8006224:	1852      	adds	r2, r2, r1
 8006226:	e7f1      	b.n	800620c <_svfiprintf_r+0x194>
 8006228:	ab07      	add	r3, sp, #28
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	003a      	movs	r2, r7
 800622e:	0021      	movs	r1, r4
 8006230:	4b10      	ldr	r3, [pc, #64]	; (8006274 <_svfiprintf_r+0x1fc>)
 8006232:	9803      	ldr	r0, [sp, #12]
 8006234:	e000      	b.n	8006238 <_svfiprintf_r+0x1c0>
 8006236:	bf00      	nop
 8006238:	9004      	str	r0, [sp, #16]
 800623a:	9b04      	ldr	r3, [sp, #16]
 800623c:	3301      	adds	r3, #1
 800623e:	d1d3      	bne.n	80061e8 <_svfiprintf_r+0x170>
 8006240:	89bb      	ldrh	r3, [r7, #12]
 8006242:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006244:	065b      	lsls	r3, r3, #25
 8006246:	d400      	bmi.n	800624a <_svfiprintf_r+0x1d2>
 8006248:	e72d      	b.n	80060a6 <_svfiprintf_r+0x2e>
 800624a:	2001      	movs	r0, #1
 800624c:	4240      	negs	r0, r0
 800624e:	e72a      	b.n	80060a6 <_svfiprintf_r+0x2e>
 8006250:	ab07      	add	r3, sp, #28
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	003a      	movs	r2, r7
 8006256:	0021      	movs	r1, r4
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <_svfiprintf_r+0x1fc>)
 800625a:	9803      	ldr	r0, [sp, #12]
 800625c:	f000 f87c 	bl	8006358 <_printf_i>
 8006260:	e7ea      	b.n	8006238 <_svfiprintf_r+0x1c0>
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	08006b9d 	.word	0x08006b9d
 8006268:	08006ba3 	.word	0x08006ba3
 800626c:	08006ba7 	.word	0x08006ba7
 8006270:	00000000 	.word	0x00000000
 8006274:	08005fb5 	.word	0x08005fb5

08006278 <_printf_common>:
 8006278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800627a:	0015      	movs	r5, r2
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	688a      	ldr	r2, [r1, #8]
 8006280:	690b      	ldr	r3, [r1, #16]
 8006282:	000c      	movs	r4, r1
 8006284:	9000      	str	r0, [sp, #0]
 8006286:	4293      	cmp	r3, r2
 8006288:	da00      	bge.n	800628c <_printf_common+0x14>
 800628a:	0013      	movs	r3, r2
 800628c:	0022      	movs	r2, r4
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	3243      	adds	r2, #67	; 0x43
 8006292:	7812      	ldrb	r2, [r2, #0]
 8006294:	2a00      	cmp	r2, #0
 8006296:	d001      	beq.n	800629c <_printf_common+0x24>
 8006298:	3301      	adds	r3, #1
 800629a:	602b      	str	r3, [r5, #0]
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	069b      	lsls	r3, r3, #26
 80062a0:	d502      	bpl.n	80062a8 <_printf_common+0x30>
 80062a2:	682b      	ldr	r3, [r5, #0]
 80062a4:	3302      	adds	r3, #2
 80062a6:	602b      	str	r3, [r5, #0]
 80062a8:	6822      	ldr	r2, [r4, #0]
 80062aa:	2306      	movs	r3, #6
 80062ac:	0017      	movs	r7, r2
 80062ae:	401f      	ands	r7, r3
 80062b0:	421a      	tst	r2, r3
 80062b2:	d027      	beq.n	8006304 <_printf_common+0x8c>
 80062b4:	0023      	movs	r3, r4
 80062b6:	3343      	adds	r3, #67	; 0x43
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	1e5a      	subs	r2, r3, #1
 80062bc:	4193      	sbcs	r3, r2
 80062be:	6822      	ldr	r2, [r4, #0]
 80062c0:	0692      	lsls	r2, r2, #26
 80062c2:	d430      	bmi.n	8006326 <_printf_common+0xae>
 80062c4:	0022      	movs	r2, r4
 80062c6:	9901      	ldr	r1, [sp, #4]
 80062c8:	9800      	ldr	r0, [sp, #0]
 80062ca:	9e08      	ldr	r6, [sp, #32]
 80062cc:	3243      	adds	r2, #67	; 0x43
 80062ce:	47b0      	blx	r6
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d025      	beq.n	8006320 <_printf_common+0xa8>
 80062d4:	2306      	movs	r3, #6
 80062d6:	6820      	ldr	r0, [r4, #0]
 80062d8:	682a      	ldr	r2, [r5, #0]
 80062da:	68e1      	ldr	r1, [r4, #12]
 80062dc:	2500      	movs	r5, #0
 80062de:	4003      	ands	r3, r0
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d103      	bne.n	80062ec <_printf_common+0x74>
 80062e4:	1a8d      	subs	r5, r1, r2
 80062e6:	43eb      	mvns	r3, r5
 80062e8:	17db      	asrs	r3, r3, #31
 80062ea:	401d      	ands	r5, r3
 80062ec:	68a3      	ldr	r3, [r4, #8]
 80062ee:	6922      	ldr	r2, [r4, #16]
 80062f0:	4293      	cmp	r3, r2
 80062f2:	dd01      	ble.n	80062f8 <_printf_common+0x80>
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	18ed      	adds	r5, r5, r3
 80062f8:	2700      	movs	r7, #0
 80062fa:	42bd      	cmp	r5, r7
 80062fc:	d120      	bne.n	8006340 <_printf_common+0xc8>
 80062fe:	2000      	movs	r0, #0
 8006300:	e010      	b.n	8006324 <_printf_common+0xac>
 8006302:	3701      	adds	r7, #1
 8006304:	68e3      	ldr	r3, [r4, #12]
 8006306:	682a      	ldr	r2, [r5, #0]
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	42bb      	cmp	r3, r7
 800630c:	ddd2      	ble.n	80062b4 <_printf_common+0x3c>
 800630e:	0022      	movs	r2, r4
 8006310:	2301      	movs	r3, #1
 8006312:	9901      	ldr	r1, [sp, #4]
 8006314:	9800      	ldr	r0, [sp, #0]
 8006316:	9e08      	ldr	r6, [sp, #32]
 8006318:	3219      	adds	r2, #25
 800631a:	47b0      	blx	r6
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d1f0      	bne.n	8006302 <_printf_common+0x8a>
 8006320:	2001      	movs	r0, #1
 8006322:	4240      	negs	r0, r0
 8006324:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006326:	2030      	movs	r0, #48	; 0x30
 8006328:	18e1      	adds	r1, r4, r3
 800632a:	3143      	adds	r1, #67	; 0x43
 800632c:	7008      	strb	r0, [r1, #0]
 800632e:	0021      	movs	r1, r4
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	3145      	adds	r1, #69	; 0x45
 8006334:	7809      	ldrb	r1, [r1, #0]
 8006336:	18a2      	adds	r2, r4, r2
 8006338:	3243      	adds	r2, #67	; 0x43
 800633a:	3302      	adds	r3, #2
 800633c:	7011      	strb	r1, [r2, #0]
 800633e:	e7c1      	b.n	80062c4 <_printf_common+0x4c>
 8006340:	0022      	movs	r2, r4
 8006342:	2301      	movs	r3, #1
 8006344:	9901      	ldr	r1, [sp, #4]
 8006346:	9800      	ldr	r0, [sp, #0]
 8006348:	9e08      	ldr	r6, [sp, #32]
 800634a:	321a      	adds	r2, #26
 800634c:	47b0      	blx	r6
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	d0e6      	beq.n	8006320 <_printf_common+0xa8>
 8006352:	3701      	adds	r7, #1
 8006354:	e7d1      	b.n	80062fa <_printf_common+0x82>
	...

08006358 <_printf_i>:
 8006358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800635a:	b08b      	sub	sp, #44	; 0x2c
 800635c:	9206      	str	r2, [sp, #24]
 800635e:	000a      	movs	r2, r1
 8006360:	3243      	adds	r2, #67	; 0x43
 8006362:	9307      	str	r3, [sp, #28]
 8006364:	9005      	str	r0, [sp, #20]
 8006366:	9204      	str	r2, [sp, #16]
 8006368:	7e0a      	ldrb	r2, [r1, #24]
 800636a:	000c      	movs	r4, r1
 800636c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800636e:	2a78      	cmp	r2, #120	; 0x78
 8006370:	d806      	bhi.n	8006380 <_printf_i+0x28>
 8006372:	2a62      	cmp	r2, #98	; 0x62
 8006374:	d808      	bhi.n	8006388 <_printf_i+0x30>
 8006376:	2a00      	cmp	r2, #0
 8006378:	d100      	bne.n	800637c <_printf_i+0x24>
 800637a:	e0c0      	b.n	80064fe <_printf_i+0x1a6>
 800637c:	2a58      	cmp	r2, #88	; 0x58
 800637e:	d052      	beq.n	8006426 <_printf_i+0xce>
 8006380:	0026      	movs	r6, r4
 8006382:	3642      	adds	r6, #66	; 0x42
 8006384:	7032      	strb	r2, [r6, #0]
 8006386:	e022      	b.n	80063ce <_printf_i+0x76>
 8006388:	0010      	movs	r0, r2
 800638a:	3863      	subs	r0, #99	; 0x63
 800638c:	2815      	cmp	r0, #21
 800638e:	d8f7      	bhi.n	8006380 <_printf_i+0x28>
 8006390:	f7f9 fec2 	bl	8000118 <__gnu_thumb1_case_shi>
 8006394:	001f0016 	.word	0x001f0016
 8006398:	fff6fff6 	.word	0xfff6fff6
 800639c:	fff6fff6 	.word	0xfff6fff6
 80063a0:	fff6001f 	.word	0xfff6001f
 80063a4:	fff6fff6 	.word	0xfff6fff6
 80063a8:	00a8fff6 	.word	0x00a8fff6
 80063ac:	009a0036 	.word	0x009a0036
 80063b0:	fff6fff6 	.word	0xfff6fff6
 80063b4:	fff600b9 	.word	0xfff600b9
 80063b8:	fff60036 	.word	0xfff60036
 80063bc:	009efff6 	.word	0x009efff6
 80063c0:	0026      	movs	r6, r4
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	3642      	adds	r6, #66	; 0x42
 80063c6:	1d11      	adds	r1, r2, #4
 80063c8:	6019      	str	r1, [r3, #0]
 80063ca:	6813      	ldr	r3, [r2, #0]
 80063cc:	7033      	strb	r3, [r6, #0]
 80063ce:	2301      	movs	r3, #1
 80063d0:	e0a7      	b.n	8006522 <_printf_i+0x1ca>
 80063d2:	6808      	ldr	r0, [r1, #0]
 80063d4:	6819      	ldr	r1, [r3, #0]
 80063d6:	1d0a      	adds	r2, r1, #4
 80063d8:	0605      	lsls	r5, r0, #24
 80063da:	d50b      	bpl.n	80063f4 <_printf_i+0x9c>
 80063dc:	680d      	ldr	r5, [r1, #0]
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	da03      	bge.n	80063ec <_printf_i+0x94>
 80063e4:	232d      	movs	r3, #45	; 0x2d
 80063e6:	9a04      	ldr	r2, [sp, #16]
 80063e8:	426d      	negs	r5, r5
 80063ea:	7013      	strb	r3, [r2, #0]
 80063ec:	4b61      	ldr	r3, [pc, #388]	; (8006574 <_printf_i+0x21c>)
 80063ee:	270a      	movs	r7, #10
 80063f0:	9303      	str	r3, [sp, #12]
 80063f2:	e032      	b.n	800645a <_printf_i+0x102>
 80063f4:	680d      	ldr	r5, [r1, #0]
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	0641      	lsls	r1, r0, #25
 80063fa:	d5f1      	bpl.n	80063e0 <_printf_i+0x88>
 80063fc:	b22d      	sxth	r5, r5
 80063fe:	e7ef      	b.n	80063e0 <_printf_i+0x88>
 8006400:	680d      	ldr	r5, [r1, #0]
 8006402:	6819      	ldr	r1, [r3, #0]
 8006404:	1d08      	adds	r0, r1, #4
 8006406:	6018      	str	r0, [r3, #0]
 8006408:	062e      	lsls	r6, r5, #24
 800640a:	d501      	bpl.n	8006410 <_printf_i+0xb8>
 800640c:	680d      	ldr	r5, [r1, #0]
 800640e:	e003      	b.n	8006418 <_printf_i+0xc0>
 8006410:	066d      	lsls	r5, r5, #25
 8006412:	d5fb      	bpl.n	800640c <_printf_i+0xb4>
 8006414:	680d      	ldr	r5, [r1, #0]
 8006416:	b2ad      	uxth	r5, r5
 8006418:	4b56      	ldr	r3, [pc, #344]	; (8006574 <_printf_i+0x21c>)
 800641a:	270a      	movs	r7, #10
 800641c:	9303      	str	r3, [sp, #12]
 800641e:	2a6f      	cmp	r2, #111	; 0x6f
 8006420:	d117      	bne.n	8006452 <_printf_i+0xfa>
 8006422:	2708      	movs	r7, #8
 8006424:	e015      	b.n	8006452 <_printf_i+0xfa>
 8006426:	3145      	adds	r1, #69	; 0x45
 8006428:	700a      	strb	r2, [r1, #0]
 800642a:	4a52      	ldr	r2, [pc, #328]	; (8006574 <_printf_i+0x21c>)
 800642c:	9203      	str	r2, [sp, #12]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	6821      	ldr	r1, [r4, #0]
 8006432:	ca20      	ldmia	r2!, {r5}
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	0608      	lsls	r0, r1, #24
 8006438:	d550      	bpl.n	80064dc <_printf_i+0x184>
 800643a:	07cb      	lsls	r3, r1, #31
 800643c:	d502      	bpl.n	8006444 <_printf_i+0xec>
 800643e:	2320      	movs	r3, #32
 8006440:	4319      	orrs	r1, r3
 8006442:	6021      	str	r1, [r4, #0]
 8006444:	2710      	movs	r7, #16
 8006446:	2d00      	cmp	r5, #0
 8006448:	d103      	bne.n	8006452 <_printf_i+0xfa>
 800644a:	2320      	movs	r3, #32
 800644c:	6822      	ldr	r2, [r4, #0]
 800644e:	439a      	bics	r2, r3
 8006450:	6022      	str	r2, [r4, #0]
 8006452:	0023      	movs	r3, r4
 8006454:	2200      	movs	r2, #0
 8006456:	3343      	adds	r3, #67	; 0x43
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	6863      	ldr	r3, [r4, #4]
 800645c:	60a3      	str	r3, [r4, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	db03      	blt.n	800646a <_printf_i+0x112>
 8006462:	2204      	movs	r2, #4
 8006464:	6821      	ldr	r1, [r4, #0]
 8006466:	4391      	bics	r1, r2
 8006468:	6021      	str	r1, [r4, #0]
 800646a:	2d00      	cmp	r5, #0
 800646c:	d102      	bne.n	8006474 <_printf_i+0x11c>
 800646e:	9e04      	ldr	r6, [sp, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00c      	beq.n	800648e <_printf_i+0x136>
 8006474:	9e04      	ldr	r6, [sp, #16]
 8006476:	0028      	movs	r0, r5
 8006478:	0039      	movs	r1, r7
 800647a:	f7f9 fedd 	bl	8000238 <__aeabi_uidivmod>
 800647e:	9b03      	ldr	r3, [sp, #12]
 8006480:	3e01      	subs	r6, #1
 8006482:	5c5b      	ldrb	r3, [r3, r1]
 8006484:	7033      	strb	r3, [r6, #0]
 8006486:	002b      	movs	r3, r5
 8006488:	0005      	movs	r5, r0
 800648a:	429f      	cmp	r7, r3
 800648c:	d9f3      	bls.n	8006476 <_printf_i+0x11e>
 800648e:	2f08      	cmp	r7, #8
 8006490:	d109      	bne.n	80064a6 <_printf_i+0x14e>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	07db      	lsls	r3, r3, #31
 8006496:	d506      	bpl.n	80064a6 <_printf_i+0x14e>
 8006498:	6863      	ldr	r3, [r4, #4]
 800649a:	6922      	ldr	r2, [r4, #16]
 800649c:	4293      	cmp	r3, r2
 800649e:	dc02      	bgt.n	80064a6 <_printf_i+0x14e>
 80064a0:	2330      	movs	r3, #48	; 0x30
 80064a2:	3e01      	subs	r6, #1
 80064a4:	7033      	strb	r3, [r6, #0]
 80064a6:	9b04      	ldr	r3, [sp, #16]
 80064a8:	1b9b      	subs	r3, r3, r6
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	9b07      	ldr	r3, [sp, #28]
 80064ae:	0021      	movs	r1, r4
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	9805      	ldr	r0, [sp, #20]
 80064b4:	9b06      	ldr	r3, [sp, #24]
 80064b6:	aa09      	add	r2, sp, #36	; 0x24
 80064b8:	f7ff fede 	bl	8006278 <_printf_common>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d135      	bne.n	800652c <_printf_i+0x1d4>
 80064c0:	2001      	movs	r0, #1
 80064c2:	4240      	negs	r0, r0
 80064c4:	b00b      	add	sp, #44	; 0x2c
 80064c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c8:	2220      	movs	r2, #32
 80064ca:	6809      	ldr	r1, [r1, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	6022      	str	r2, [r4, #0]
 80064d0:	0022      	movs	r2, r4
 80064d2:	2178      	movs	r1, #120	; 0x78
 80064d4:	3245      	adds	r2, #69	; 0x45
 80064d6:	7011      	strb	r1, [r2, #0]
 80064d8:	4a27      	ldr	r2, [pc, #156]	; (8006578 <_printf_i+0x220>)
 80064da:	e7a7      	b.n	800642c <_printf_i+0xd4>
 80064dc:	0648      	lsls	r0, r1, #25
 80064de:	d5ac      	bpl.n	800643a <_printf_i+0xe2>
 80064e0:	b2ad      	uxth	r5, r5
 80064e2:	e7aa      	b.n	800643a <_printf_i+0xe2>
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	680d      	ldr	r5, [r1, #0]
 80064e8:	1d10      	adds	r0, r2, #4
 80064ea:	6949      	ldr	r1, [r1, #20]
 80064ec:	6018      	str	r0, [r3, #0]
 80064ee:	6813      	ldr	r3, [r2, #0]
 80064f0:	062e      	lsls	r6, r5, #24
 80064f2:	d501      	bpl.n	80064f8 <_printf_i+0x1a0>
 80064f4:	6019      	str	r1, [r3, #0]
 80064f6:	e002      	b.n	80064fe <_printf_i+0x1a6>
 80064f8:	066d      	lsls	r5, r5, #25
 80064fa:	d5fb      	bpl.n	80064f4 <_printf_i+0x19c>
 80064fc:	8019      	strh	r1, [r3, #0]
 80064fe:	2300      	movs	r3, #0
 8006500:	9e04      	ldr	r6, [sp, #16]
 8006502:	6123      	str	r3, [r4, #16]
 8006504:	e7d2      	b.n	80064ac <_printf_i+0x154>
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	1d11      	adds	r1, r2, #4
 800650a:	6019      	str	r1, [r3, #0]
 800650c:	6816      	ldr	r6, [r2, #0]
 800650e:	2100      	movs	r1, #0
 8006510:	0030      	movs	r0, r6
 8006512:	6862      	ldr	r2, [r4, #4]
 8006514:	f000 f840 	bl	8006598 <memchr>
 8006518:	2800      	cmp	r0, #0
 800651a:	d001      	beq.n	8006520 <_printf_i+0x1c8>
 800651c:	1b80      	subs	r0, r0, r6
 800651e:	6060      	str	r0, [r4, #4]
 8006520:	6863      	ldr	r3, [r4, #4]
 8006522:	6123      	str	r3, [r4, #16]
 8006524:	2300      	movs	r3, #0
 8006526:	9a04      	ldr	r2, [sp, #16]
 8006528:	7013      	strb	r3, [r2, #0]
 800652a:	e7bf      	b.n	80064ac <_printf_i+0x154>
 800652c:	6923      	ldr	r3, [r4, #16]
 800652e:	0032      	movs	r2, r6
 8006530:	9906      	ldr	r1, [sp, #24]
 8006532:	9805      	ldr	r0, [sp, #20]
 8006534:	9d07      	ldr	r5, [sp, #28]
 8006536:	47a8      	blx	r5
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	d0c1      	beq.n	80064c0 <_printf_i+0x168>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	079b      	lsls	r3, r3, #30
 8006540:	d415      	bmi.n	800656e <_printf_i+0x216>
 8006542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006544:	68e0      	ldr	r0, [r4, #12]
 8006546:	4298      	cmp	r0, r3
 8006548:	dabc      	bge.n	80064c4 <_printf_i+0x16c>
 800654a:	0018      	movs	r0, r3
 800654c:	e7ba      	b.n	80064c4 <_printf_i+0x16c>
 800654e:	0022      	movs	r2, r4
 8006550:	2301      	movs	r3, #1
 8006552:	9906      	ldr	r1, [sp, #24]
 8006554:	9805      	ldr	r0, [sp, #20]
 8006556:	9e07      	ldr	r6, [sp, #28]
 8006558:	3219      	adds	r2, #25
 800655a:	47b0      	blx	r6
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d0af      	beq.n	80064c0 <_printf_i+0x168>
 8006560:	3501      	adds	r5, #1
 8006562:	68e3      	ldr	r3, [r4, #12]
 8006564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006566:	1a9b      	subs	r3, r3, r2
 8006568:	42ab      	cmp	r3, r5
 800656a:	dcf0      	bgt.n	800654e <_printf_i+0x1f6>
 800656c:	e7e9      	b.n	8006542 <_printf_i+0x1ea>
 800656e:	2500      	movs	r5, #0
 8006570:	e7f7      	b.n	8006562 <_printf_i+0x20a>
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	08006bae 	.word	0x08006bae
 8006578:	08006bbf 	.word	0x08006bbf

0800657c <strchr>:
 800657c:	b2c9      	uxtb	r1, r1
 800657e:	7803      	ldrb	r3, [r0, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d004      	beq.n	800658e <strchr+0x12>
 8006584:	428b      	cmp	r3, r1
 8006586:	d100      	bne.n	800658a <strchr+0xe>
 8006588:	4770      	bx	lr
 800658a:	3001      	adds	r0, #1
 800658c:	e7f7      	b.n	800657e <strchr+0x2>
 800658e:	424b      	negs	r3, r1
 8006590:	4159      	adcs	r1, r3
 8006592:	4249      	negs	r1, r1
 8006594:	4008      	ands	r0, r1
 8006596:	e7f7      	b.n	8006588 <strchr+0xc>

08006598 <memchr>:
 8006598:	b2c9      	uxtb	r1, r1
 800659a:	1882      	adds	r2, r0, r2
 800659c:	4290      	cmp	r0, r2
 800659e:	d101      	bne.n	80065a4 <memchr+0xc>
 80065a0:	2000      	movs	r0, #0
 80065a2:	4770      	bx	lr
 80065a4:	7803      	ldrb	r3, [r0, #0]
 80065a6:	428b      	cmp	r3, r1
 80065a8:	d0fb      	beq.n	80065a2 <memchr+0xa>
 80065aa:	3001      	adds	r0, #1
 80065ac:	e7f6      	b.n	800659c <memchr+0x4>

080065ae <memmove>:
 80065ae:	b510      	push	{r4, lr}
 80065b0:	4288      	cmp	r0, r1
 80065b2:	d902      	bls.n	80065ba <memmove+0xc>
 80065b4:	188b      	adds	r3, r1, r2
 80065b6:	4298      	cmp	r0, r3
 80065b8:	d303      	bcc.n	80065c2 <memmove+0x14>
 80065ba:	2300      	movs	r3, #0
 80065bc:	e007      	b.n	80065ce <memmove+0x20>
 80065be:	5c8b      	ldrb	r3, [r1, r2]
 80065c0:	5483      	strb	r3, [r0, r2]
 80065c2:	3a01      	subs	r2, #1
 80065c4:	d2fb      	bcs.n	80065be <memmove+0x10>
 80065c6:	bd10      	pop	{r4, pc}
 80065c8:	5ccc      	ldrb	r4, [r1, r3]
 80065ca:	54c4      	strb	r4, [r0, r3]
 80065cc:	3301      	adds	r3, #1
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d1fa      	bne.n	80065c8 <memmove+0x1a>
 80065d2:	e7f8      	b.n	80065c6 <memmove+0x18>

080065d4 <_free_r>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	0005      	movs	r5, r0
 80065d8:	2900      	cmp	r1, #0
 80065da:	d010      	beq.n	80065fe <_free_r+0x2a>
 80065dc:	1f0c      	subs	r4, r1, #4
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	da00      	bge.n	80065e6 <_free_r+0x12>
 80065e4:	18e4      	adds	r4, r4, r3
 80065e6:	0028      	movs	r0, r5
 80065e8:	f000 f8d4 	bl	8006794 <__malloc_lock>
 80065ec:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <_free_r+0x90>)
 80065ee:	6813      	ldr	r3, [r2, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <_free_r+0x2c>
 80065f4:	6063      	str	r3, [r4, #4]
 80065f6:	6014      	str	r4, [r2, #0]
 80065f8:	0028      	movs	r0, r5
 80065fa:	f000 f8d3 	bl	80067a4 <__malloc_unlock>
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
 8006600:	42a3      	cmp	r3, r4
 8006602:	d908      	bls.n	8006616 <_free_r+0x42>
 8006604:	6821      	ldr	r1, [r4, #0]
 8006606:	1860      	adds	r0, r4, r1
 8006608:	4283      	cmp	r3, r0
 800660a:	d1f3      	bne.n	80065f4 <_free_r+0x20>
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	1841      	adds	r1, r0, r1
 8006612:	6021      	str	r1, [r4, #0]
 8006614:	e7ee      	b.n	80065f4 <_free_r+0x20>
 8006616:	001a      	movs	r2, r3
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <_free_r+0x4e>
 800661e:	42a3      	cmp	r3, r4
 8006620:	d9f9      	bls.n	8006616 <_free_r+0x42>
 8006622:	6811      	ldr	r1, [r2, #0]
 8006624:	1850      	adds	r0, r2, r1
 8006626:	42a0      	cmp	r0, r4
 8006628:	d10b      	bne.n	8006642 <_free_r+0x6e>
 800662a:	6820      	ldr	r0, [r4, #0]
 800662c:	1809      	adds	r1, r1, r0
 800662e:	1850      	adds	r0, r2, r1
 8006630:	6011      	str	r1, [r2, #0]
 8006632:	4283      	cmp	r3, r0
 8006634:	d1e0      	bne.n	80065f8 <_free_r+0x24>
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	1841      	adds	r1, r0, r1
 800663c:	6011      	str	r1, [r2, #0]
 800663e:	6053      	str	r3, [r2, #4]
 8006640:	e7da      	b.n	80065f8 <_free_r+0x24>
 8006642:	42a0      	cmp	r0, r4
 8006644:	d902      	bls.n	800664c <_free_r+0x78>
 8006646:	230c      	movs	r3, #12
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	e7d5      	b.n	80065f8 <_free_r+0x24>
 800664c:	6821      	ldr	r1, [r4, #0]
 800664e:	1860      	adds	r0, r4, r1
 8006650:	4283      	cmp	r3, r0
 8006652:	d103      	bne.n	800665c <_free_r+0x88>
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	1841      	adds	r1, r0, r1
 800665a:	6021      	str	r1, [r4, #0]
 800665c:	6063      	str	r3, [r4, #4]
 800665e:	6054      	str	r4, [r2, #4]
 8006660:	e7ca      	b.n	80065f8 <_free_r+0x24>
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	200000e4 	.word	0x200000e4

08006668 <_malloc_r>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	2303      	movs	r3, #3
 800666c:	1ccd      	adds	r5, r1, #3
 800666e:	439d      	bics	r5, r3
 8006670:	3508      	adds	r5, #8
 8006672:	0006      	movs	r6, r0
 8006674:	2d0c      	cmp	r5, #12
 8006676:	d21f      	bcs.n	80066b8 <_malloc_r+0x50>
 8006678:	250c      	movs	r5, #12
 800667a:	42a9      	cmp	r1, r5
 800667c:	d81e      	bhi.n	80066bc <_malloc_r+0x54>
 800667e:	0030      	movs	r0, r6
 8006680:	f000 f888 	bl	8006794 <__malloc_lock>
 8006684:	4925      	ldr	r1, [pc, #148]	; (800671c <_malloc_r+0xb4>)
 8006686:	680a      	ldr	r2, [r1, #0]
 8006688:	0014      	movs	r4, r2
 800668a:	2c00      	cmp	r4, #0
 800668c:	d11a      	bne.n	80066c4 <_malloc_r+0x5c>
 800668e:	4f24      	ldr	r7, [pc, #144]	; (8006720 <_malloc_r+0xb8>)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d104      	bne.n	80066a0 <_malloc_r+0x38>
 8006696:	0021      	movs	r1, r4
 8006698:	0030      	movs	r0, r6
 800669a:	f000 f869 	bl	8006770 <_sbrk_r>
 800669e:	6038      	str	r0, [r7, #0]
 80066a0:	0029      	movs	r1, r5
 80066a2:	0030      	movs	r0, r6
 80066a4:	f000 f864 	bl	8006770 <_sbrk_r>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d12b      	bne.n	8006704 <_malloc_r+0x9c>
 80066ac:	230c      	movs	r3, #12
 80066ae:	0030      	movs	r0, r6
 80066b0:	6033      	str	r3, [r6, #0]
 80066b2:	f000 f877 	bl	80067a4 <__malloc_unlock>
 80066b6:	e003      	b.n	80066c0 <_malloc_r+0x58>
 80066b8:	2d00      	cmp	r5, #0
 80066ba:	dade      	bge.n	800667a <_malloc_r+0x12>
 80066bc:	230c      	movs	r3, #12
 80066be:	6033      	str	r3, [r6, #0]
 80066c0:	2000      	movs	r0, #0
 80066c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	1b5b      	subs	r3, r3, r5
 80066c8:	d419      	bmi.n	80066fe <_malloc_r+0x96>
 80066ca:	2b0b      	cmp	r3, #11
 80066cc:	d903      	bls.n	80066d6 <_malloc_r+0x6e>
 80066ce:	6023      	str	r3, [r4, #0]
 80066d0:	18e4      	adds	r4, r4, r3
 80066d2:	6025      	str	r5, [r4, #0]
 80066d4:	e003      	b.n	80066de <_malloc_r+0x76>
 80066d6:	6863      	ldr	r3, [r4, #4]
 80066d8:	42a2      	cmp	r2, r4
 80066da:	d10e      	bne.n	80066fa <_malloc_r+0x92>
 80066dc:	600b      	str	r3, [r1, #0]
 80066de:	0030      	movs	r0, r6
 80066e0:	f000 f860 	bl	80067a4 <__malloc_unlock>
 80066e4:	0020      	movs	r0, r4
 80066e6:	2207      	movs	r2, #7
 80066e8:	300b      	adds	r0, #11
 80066ea:	1d23      	adds	r3, r4, #4
 80066ec:	4390      	bics	r0, r2
 80066ee:	1ac2      	subs	r2, r0, r3
 80066f0:	4298      	cmp	r0, r3
 80066f2:	d0e6      	beq.n	80066c2 <_malloc_r+0x5a>
 80066f4:	1a1b      	subs	r3, r3, r0
 80066f6:	50a3      	str	r3, [r4, r2]
 80066f8:	e7e3      	b.n	80066c2 <_malloc_r+0x5a>
 80066fa:	6053      	str	r3, [r2, #4]
 80066fc:	e7ef      	b.n	80066de <_malloc_r+0x76>
 80066fe:	0022      	movs	r2, r4
 8006700:	6864      	ldr	r4, [r4, #4]
 8006702:	e7c2      	b.n	800668a <_malloc_r+0x22>
 8006704:	2303      	movs	r3, #3
 8006706:	1cc4      	adds	r4, r0, #3
 8006708:	439c      	bics	r4, r3
 800670a:	42a0      	cmp	r0, r4
 800670c:	d0e1      	beq.n	80066d2 <_malloc_r+0x6a>
 800670e:	1a21      	subs	r1, r4, r0
 8006710:	0030      	movs	r0, r6
 8006712:	f000 f82d 	bl	8006770 <_sbrk_r>
 8006716:	1c43      	adds	r3, r0, #1
 8006718:	d1db      	bne.n	80066d2 <_malloc_r+0x6a>
 800671a:	e7c7      	b.n	80066ac <_malloc_r+0x44>
 800671c:	200000e4 	.word	0x200000e4
 8006720:	200000e8 	.word	0x200000e8

08006724 <_realloc_r>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	0007      	movs	r7, r0
 8006728:	000d      	movs	r5, r1
 800672a:	0016      	movs	r6, r2
 800672c:	2900      	cmp	r1, #0
 800672e:	d105      	bne.n	800673c <_realloc_r+0x18>
 8006730:	0011      	movs	r1, r2
 8006732:	f7ff ff99 	bl	8006668 <_malloc_r>
 8006736:	0004      	movs	r4, r0
 8006738:	0020      	movs	r0, r4
 800673a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800673c:	2a00      	cmp	r2, #0
 800673e:	d103      	bne.n	8006748 <_realloc_r+0x24>
 8006740:	f7ff ff48 	bl	80065d4 <_free_r>
 8006744:	0034      	movs	r4, r6
 8006746:	e7f7      	b.n	8006738 <_realloc_r+0x14>
 8006748:	f000 f834 	bl	80067b4 <_malloc_usable_size_r>
 800674c:	002c      	movs	r4, r5
 800674e:	42b0      	cmp	r0, r6
 8006750:	d2f2      	bcs.n	8006738 <_realloc_r+0x14>
 8006752:	0031      	movs	r1, r6
 8006754:	0038      	movs	r0, r7
 8006756:	f7ff ff87 	bl	8006668 <_malloc_r>
 800675a:	1e04      	subs	r4, r0, #0
 800675c:	d0ec      	beq.n	8006738 <_realloc_r+0x14>
 800675e:	0029      	movs	r1, r5
 8006760:	0032      	movs	r2, r6
 8006762:	f7ff fb37 	bl	8005dd4 <memcpy>
 8006766:	0029      	movs	r1, r5
 8006768:	0038      	movs	r0, r7
 800676a:	f7ff ff33 	bl	80065d4 <_free_r>
 800676e:	e7e3      	b.n	8006738 <_realloc_r+0x14>

08006770 <_sbrk_r>:
 8006770:	2300      	movs	r3, #0
 8006772:	b570      	push	{r4, r5, r6, lr}
 8006774:	4d06      	ldr	r5, [pc, #24]	; (8006790 <_sbrk_r+0x20>)
 8006776:	0004      	movs	r4, r0
 8006778:	0008      	movs	r0, r1
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	f7fa ffca 	bl	8001714 <_sbrk>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d103      	bne.n	800678c <_sbrk_r+0x1c>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d000      	beq.n	800678c <_sbrk_r+0x1c>
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	bd70      	pop	{r4, r5, r6, pc}
 800678e:	46c0      	nop			; (mov r8, r8)
 8006790:	20000354 	.word	0x20000354

08006794 <__malloc_lock>:
 8006794:	b510      	push	{r4, lr}
 8006796:	4802      	ldr	r0, [pc, #8]	; (80067a0 <__malloc_lock+0xc>)
 8006798:	f000 f814 	bl	80067c4 <__retarget_lock_acquire_recursive>
 800679c:	bd10      	pop	{r4, pc}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	2000035c 	.word	0x2000035c

080067a4 <__malloc_unlock>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	4802      	ldr	r0, [pc, #8]	; (80067b0 <__malloc_unlock+0xc>)
 80067a8:	f000 f80d 	bl	80067c6 <__retarget_lock_release_recursive>
 80067ac:	bd10      	pop	{r4, pc}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	2000035c 	.word	0x2000035c

080067b4 <_malloc_usable_size_r>:
 80067b4:	1f0b      	subs	r3, r1, #4
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	1f18      	subs	r0, r3, #4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da01      	bge.n	80067c2 <_malloc_usable_size_r+0xe>
 80067be:	580b      	ldr	r3, [r1, r0]
 80067c0:	18c0      	adds	r0, r0, r3
 80067c2:	4770      	bx	lr

080067c4 <__retarget_lock_acquire_recursive>:
 80067c4:	4770      	bx	lr

080067c6 <__retarget_lock_release_recursive>:
 80067c6:	4770      	bx	lr

080067c8 <_init>:
 80067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ca:	46c0      	nop			; (mov r8, r8)
 80067cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ce:	bc08      	pop	{r3}
 80067d0:	469e      	mov	lr, r3
 80067d2:	4770      	bx	lr

080067d4 <_fini>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	46c0      	nop			; (mov r8, r8)
 80067d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067da:	bc08      	pop	{r3}
 80067dc:	469e      	mov	lr, r3
 80067de:	4770      	bx	lr
