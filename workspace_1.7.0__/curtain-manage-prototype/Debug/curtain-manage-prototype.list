
curtain-manage-prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006314  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800674c  0800674c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800674c  0800674c  0001674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006754  08006754  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006758  08006758  00016758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800675c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000080  080067dc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  080067dc  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eae7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ec  00000000  00000000  0003eb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00042380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00043310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018af9  00000000  00000000  00044150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164e7  00000000  00000000  0005cc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c59  00000000  00000000  00073130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fcd89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000fcddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080063bc 	.word	0x080063bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	080063bc 	.word	0x080063bc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <getLightIntensity>:
bool GetDarkness(LDR *ldr)
{
	return ldr->isDark;
}

uint16_t getLightIntensity() {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80004c6:	2301      	movs	r3, #1
 80004c8:	425a      	negs	r2, r3
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <getLightIntensity+0x48>)
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fcb0 	bl	8001e34 <HAL_ADC_PollForConversion>

	uint16_t lightIntensity;
	/* Check if the continous conversion of regular channel is finished */
	if ((HAL_ADC_GetState(&hadc) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <getLightIntensity+0x48>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 fdf4 	bl	80020c4 <HAL_ADC_GetState>
 80004dc:	0002      	movs	r2, r0
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	401a      	ands	r2, r3
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d106      	bne.n	80004fa <getLightIntensity+0x3a>
	{
		/*##-6- Get the converted value of regular channel  ########################*/
		lightIntensity = HAL_ADC_GetValue(&hadc);
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <getLightIntensity+0x48>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fd3c 	bl	8001f6c <HAL_ADC_GetValue>
 80004f4:	0002      	movs	r2, r0
 80004f6:	1dbb      	adds	r3, r7, #6
 80004f8:	801a      	strh	r2, [r3, #0]
	}

	return lightIntensity;
 80004fa:	1dbb      	adds	r3, r7, #6
 80004fc:	881b      	ldrh	r3, [r3, #0]
}
 80004fe:	0018      	movs	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	b002      	add	sp, #8
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	200000b8 	.word	0x200000b8

0800050c <measureLDR>:

void measureLDR() {
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	af00      	add	r7, sp, #0
	messureFromLdr[ldrMeasureNumber - 1] = getLightIntensity();
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <measureLDR+0x38>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	1e5c      	subs	r4, r3, #1
 8000516:	f7ff ffd3 	bl	80004c0 <getLightIntensity>
 800051a:	0003      	movs	r3, r0
 800051c:	0019      	movs	r1, r3
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <measureLDR+0x3c>)
 8000520:	0062      	lsls	r2, r4, #1
 8000522:	52d1      	strh	r1, [r2, r3]
	ldrMeasureNumber++;
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <measureLDR+0x38>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <measureLDR+0x38>)
 800052e:	701a      	strb	r2, [r3, #0]

	if (measureIsAutoOfRange()) {
 8000530:	f000 f80c 	bl	800054c <measureIsAutoOfRange>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d002      	beq.n	800053e <measureLDR+0x32>
		ldrMeasureNumber = 1;
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <measureLDR+0x38>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
	}
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	bdb0      	pop	{r4, r5, r7, pc}
 8000544:	20000000 	.word	0x20000000
 8000548:	2000009c 	.word	0x2000009c

0800054c <measureIsAutoOfRange>:

bool measureIsAutoOfRange() {
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	return ldrMeasureNumber > NUMBER_OF_LDR_MEASURE;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <measureIsAutoOfRange+0x18>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2205      	movs	r2, #5
 8000556:	429a      	cmp	r2, r3
 8000558:	419b      	sbcs	r3, r3
 800055a:	425b      	negs	r3, r3
 800055c:	b2db      	uxtb	r3, r3
}
 800055e:	0018      	movs	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000000 	.word	0x20000000

08000568 <areNewMeassures>:

bool areNewMeassures() {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	return ldrMeasureNumber >= NUMBER_OF_LDR_MEASURE;
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <areNewMeassures+0x18>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2204      	movs	r2, #4
 8000572:	429a      	cmp	r2, r3
 8000574:	419b      	sbcs	r3, r3
 8000576:	425b      	negs	r3, r3
 8000578:	b2db      	uxtb	r3, r3
}
 800057a:	0018      	movs	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000000 	.word	0x20000000

08000584 <getAverageMeassure>:

uint16_t getAverageMeassure() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	averageMeasureFromLdr = 0;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <getAverageMeassure+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_LDR_MEASURE; i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	e00c      	b.n	80005b0 <getAverageMeassure+0x2c>
		averageMeasureFromLdr += messureFromLdr[i];
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <getAverageMeassure+0x50>)
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	0052      	lsls	r2, r2, #1
 800059c:	5ad2      	ldrh	r2, [r2, r3]
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <getAverageMeassure+0x4c>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	18d3      	adds	r3, r2, r3
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <getAverageMeassure+0x4c>)
 80005a8:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_LDR_MEASURE; i++) {
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3301      	adds	r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	ddef      	ble.n	8000596 <getAverageMeassure+0x12>
	}

	return (averageMeasureFromLdr/NUMBER_OF_LDR_MEASURE);
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <getAverageMeassure+0x4c>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	2105      	movs	r1, #5
 80005bc:	0018      	movs	r0, r3
 80005be:	f7ff fdb5 	bl	800012c <__udivsi3>
 80005c2:	0003      	movs	r3, r0
 80005c4:	b29b      	uxth	r3, r3
}
 80005c6:	0018      	movs	r0, r3
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	200000a6 	.word	0x200000a6
 80005d4:	2000009c 	.word	0x2000009c

080005d8 <isAboveUpperLimit>:

uint16_t convertLDRvalueToPercent(uint16_t ldrValue) {
	return ((ldrValue / maxLDRreading)*100);
}

bool isAboveUpperLimit() {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	return getAverageMeassure() > upperLDRControlLimit;
 80005dc:	f7ff ffd2 	bl	8000584 <getAverageMeassure>
 80005e0:	0003      	movs	r3, r0
 80005e2:	001a      	movs	r2, r3
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <isAboveUpperLimit+0x20>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	4293      	cmp	r3, r2
 80005ea:	419b      	sbcs	r3, r3
 80005ec:	425b      	negs	r3, r3
 80005ee:	b2db      	uxtb	r3, r3
}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	20000006 	.word	0x20000006

080005fc <isBelowLowerLimit>:

bool isBelowLowerLimit() {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	return getAverageMeassure() < lowerLDRControlLimit;
 8000600:	f7ff ffc0 	bl	8000584 <getAverageMeassure>
 8000604:	0003      	movs	r3, r0
 8000606:	001a      	movs	r2, r3
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <isBelowLowerLimit+0x20>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	429a      	cmp	r2, r3
 800060e:	419b      	sbcs	r3, r3
 8000610:	425b      	negs	r3, r3
 8000612:	b2db      	uxtb	r3, r3
}
 8000614:	0018      	movs	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	20000008 	.word	0x20000008

08000620 <setMinLDRreading>:

void setMinLDRreading(uint16_t minLDRreading_) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	0002      	movs	r2, r0
 8000628:	1dbb      	adds	r3, r7, #6
 800062a:	801a      	strh	r2, [r3, #0]
	minLDRreading = minLDRreading_;
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <setMinLDRreading+0x1c>)
 800062e:	1dba      	adds	r2, r7, #6
 8000630:	8812      	ldrh	r2, [r2, #0]
 8000632:	801a      	strh	r2, [r3, #0]
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000002 	.word	0x20000002

08000640 <setMaxLDRreading>:

void setMaxLDRreading(uint16_t maxLDRreading_) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	1dbb      	adds	r3, r7, #6
 800064a:	801a      	strh	r2, [r3, #0]
	maxLDRreading = maxLDRreading_;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <setMaxLDRreading+0x1c>)
 800064e:	1dba      	adds	r2, r7, #6
 8000650:	8812      	ldrh	r2, [r2, #0]
 8000652:	801a      	strh	r2, [r3, #0]
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b002      	add	sp, #8
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000004 	.word	0x20000004

08000660 <setUpperLDRControlLimit>:

void setUpperLDRControlLimit(uint16_t upperLDRContolLimit_) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	0002      	movs	r2, r0
 8000668:	1dbb      	adds	r3, r7, #6
 800066a:	801a      	strh	r2, [r3, #0]
	upperLDRControlLimit = upperLDRContolLimit_;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <setUpperLDRControlLimit+0x1c>)
 800066e:	1dba      	adds	r2, r7, #6
 8000670:	8812      	ldrh	r2, [r2, #0]
 8000672:	801a      	strh	r2, [r3, #0]
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000006 	.word	0x20000006

08000680 <setLowerLDRControlLimit>:

void setLowerLDRControlLimit(uint16_t lowerLDRControlLimit_) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	0002      	movs	r2, r0
 8000688:	1dbb      	adds	r3, r7, #6
 800068a:	801a      	strh	r2, [r3, #0]
	lowerLDRControlLimit = lowerLDRControlLimit_;
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <setLowerLDRControlLimit+0x1c>)
 800068e:	1dba      	adds	r2, r7, #6
 8000690:	8812      	ldrh	r2, [r2, #0]
 8000692:	801a      	strh	r2, [r3, #0]
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b002      	add	sp, #8
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000008 	.word	0x20000008

080006a0 <getMinLDRreading>:

uint16_t getMinLDRreading() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	return minLDRreading;
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <getMinLDRreading+0x10>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	20000002 	.word	0x20000002

080006b4 <getMaxLDRreading>:

uint16_t getMaxLDRreading() {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	return maxLDRreading;
 80006b8:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <getMaxLDRreading+0x10>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
}
 80006bc:	0018      	movs	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	20000004 	.word	0x20000004

080006c8 <getUpperLDRControlLimit>:

uint16_t getUpperLDRControlLimit() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	return upperLDRControlLimit;
 80006cc:	4b02      	ldr	r3, [pc, #8]	; (80006d8 <getUpperLDRControlLimit+0x10>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
}
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	20000006 	.word	0x20000006

080006dc <getLowerLDRControlLimit>:

uint16_t getLowerLDRControlLimit() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	return lowerLDRControlLimit;
 80006e0:	4b02      	ldr	r3, [pc, #8]	; (80006ec <getLowerLDRControlLimit+0x10>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
}
 80006e4:	0018      	movs	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	20000008 	.word	0x20000008

080006f0 <steerBlind>:

uint16_t blind_height = 3;
uint16_t current_blind_positon = 3;
uint16_t newBlindPosition = 3;

void steerBlind() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	if (canRollDownBlind()) {
 80006f4:	f000 f89e 	bl	8000834 <canRollDownBlind>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d002      	beq.n	8000702 <steerBlind+0x12>
		rollDownBlind();
 80006fc:	f000 f922 	bl	8000944 <rollDownBlind>
	} else if (canRollUpBlind()) {
		rollUpBlind();
	} else if (canStopRollingBlind()) {
		stopRollingBlind();
	}
}
 8000700:	e00c      	b.n	800071c <steerBlind+0x2c>
	} else if (canRollUpBlind()) {
 8000702:	f000 f883 	bl	800080c <canRollUpBlind>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d002      	beq.n	8000710 <steerBlind+0x20>
		rollUpBlind();
 800070a:	f000 f931 	bl	8000970 <rollUpBlind>
}
 800070e:	e005      	b.n	800071c <steerBlind+0x2c>
	} else if (canStopRollingBlind()) {
 8000710:	f000 f8a4 	bl	800085c <canStopRollingBlind>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <steerBlind+0x2c>
		stopRollingBlind();
 8000718:	f000 f93e 	bl	8000998 <stopRollingBlind>
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <increaseBlindPositionByLength>:

void increaseBlindPositionByLength(uint16_t length) {
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	0002      	movs	r2, r0
 800072c:	1dbb      	adds	r3, r7, #6
 800072e:	801a      	strh	r2, [r3, #0]
	uint16_t newBlindPosition_ = length + newBlindPosition;
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <increaseBlindPositionByLength+0x3c>)
 8000732:	8819      	ldrh	r1, [r3, #0]
 8000734:	240e      	movs	r4, #14
 8000736:	193b      	adds	r3, r7, r4
 8000738:	1dba      	adds	r2, r7, #6
 800073a:	8812      	ldrh	r2, [r2, #0]
 800073c:	188a      	adds	r2, r1, r2
 800073e:	801a      	strh	r2, [r3, #0]
	if (canSetBlindPosition(newBlindPosition_)) {
 8000740:	193b      	adds	r3, r7, r4
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	0018      	movs	r0, r3
 8000746:	f000 f80d 	bl	8000764 <canSetBlindPosition>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d004      	beq.n	8000758 <increaseBlindPositionByLength+0x34>
		setBlindPosition(newBlindPosition_);
 800074e:	193b      	adds	r3, r7, r4
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	0018      	movs	r0, r3
 8000754:	f000 f82a 	bl	80007ac <setBlindPosition>
	}
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b005      	add	sp, #20
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	2000000e 	.word	0x2000000e

08000764 <canSetBlindPosition>:

bool canSetBlindPosition(uint16_t newBlindPosition_) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	0002      	movs	r2, r0
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	801a      	strh	r2, [r3, #0]
	return !isLongerThanBlind(newBlindPosition_) && isPositiveLength(newBlindPosition_);
 8000770:	1dbb      	adds	r3, r7, #6
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	0018      	movs	r0, r3
 8000776:	f000 f8c5 	bl	8000904 <isLongerThanBlind>
 800077a:	0003      	movs	r3, r0
 800077c:	001a      	movs	r2, r3
 800077e:	2301      	movs	r3, #1
 8000780:	4053      	eors	r3, r2
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d008      	beq.n	800079a <canSetBlindPosition+0x36>
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	0018      	movs	r0, r3
 800078e:	f000 f8cd 	bl	800092c <isPositiveLength>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <canSetBlindPosition+0x36>
 8000796:	2301      	movs	r3, #1
 8000798:	e000      	b.n	800079c <canSetBlindPosition+0x38>
 800079a:	2300      	movs	r3, #0
 800079c:	1c1a      	adds	r2, r3, #0
 800079e:	2301      	movs	r3, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	b2db      	uxtb	r3, r3
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}

080007ac <setBlindPosition>:

void setBlindPosition(uint16_t newBlindPosition_) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	0002      	movs	r2, r0
 80007b4:	1dbb      	adds	r3, r7, #6
 80007b6:	801a      	strh	r2, [r3, #0]
	if (canSetBlindPosition(newBlindPosition_)) {
 80007b8:	1dbb      	adds	r3, r7, #6
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff ffd1 	bl	8000764 <canSetBlindPosition>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d003      	beq.n	80007ce <setBlindPosition+0x22>
		newBlindPosition = newBlindPosition_;
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <setBlindPosition+0x2c>)
 80007c8:	1dba      	adds	r2, r7, #6
 80007ca:	8812      	ldrh	r2, [r2, #0]
 80007cc:	801a      	strh	r2, [r3, #0]
	}
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b002      	add	sp, #8
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	2000000e 	.word	0x2000000e

080007dc <setBlindPositionToMax>:

void setBlindPositionToMax() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	newBlindPosition = blind_height;
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <setBlindPositionToMax+0x14>)
 80007e2:	881a      	ldrh	r2, [r3, #0]
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <setBlindPositionToMax+0x18>)
 80007e6:	801a      	strh	r2, [r3, #0]
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	2000000a 	.word	0x2000000a
 80007f4:	2000000e 	.word	0x2000000e

080007f8 <setBlindPositionToMin>:

void setBlindPositionToMin() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	newBlindPosition = 0;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <setBlindPositionToMin+0x10>)
 80007fe:	2200      	movs	r2, #0
 8000800:	801a      	strh	r2, [r3, #0]
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000000e 	.word	0x2000000e

0800080c <canRollUpBlind>:

bool canRollUpBlind() {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	return isBelowNewBlindPosition() && isRolledMaxUp();
 8000810:	f000 f854 	bl	80008bc <isBelowNewBlindPosition>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d005      	beq.n	8000824 <canRollUpBlind+0x18>
 8000818:	f000 f832 	bl	8000880 <isRolledMaxUp>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <canRollUpBlind+0x18>
 8000820:	2301      	movs	r3, #1
 8000822:	e000      	b.n	8000826 <canRollUpBlind+0x1a>
 8000824:	2300      	movs	r3, #0
 8000826:	1c1a      	adds	r2, r3, #0
 8000828:	2301      	movs	r3, #1
 800082a:	4013      	ands	r3, r2
 800082c:	b2db      	uxtb	r3, r3
}
 800082e:	0018      	movs	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <canRollDownBlind>:

bool canRollDownBlind() {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	return isAboveNewBlindPosition() && isRolledMaxDown();
 8000838:	f000 f852 	bl	80008e0 <isAboveNewBlindPosition>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d005      	beq.n	800084c <canRollDownBlind+0x18>
 8000840:	f000 f830 	bl	80008a4 <isRolledMaxDown>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <canRollDownBlind+0x18>
 8000848:	2301      	movs	r3, #1
 800084a:	e000      	b.n	800084e <canRollDownBlind+0x1a>
 800084c:	2300      	movs	r3, #0
 800084e:	1c1a      	adds	r2, r3, #0
 8000850:	2301      	movs	r3, #1
 8000852:	4013      	ands	r3, r2
 8000854:	b2db      	uxtb	r3, r3
}
 8000856:	0018      	movs	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <canStopRollingBlind>:

bool canStopRollingBlind() {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	return current_blind_positon == newBlindPosition;
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <canStopRollingBlind+0x1c>)
 8000862:	881a      	ldrh	r2, [r3, #0]
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <canStopRollingBlind+0x20>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	425a      	negs	r2, r3
 800086c:	4153      	adcs	r3, r2
 800086e:	b2db      	uxtb	r3, r3
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	2000000c 	.word	0x2000000c
 800087c:	2000000e 	.word	0x2000000e

08000880 <isRolledMaxUp>:

bool isRolledMaxUp() {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	return current_blind_positon < blind_height;
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <isRolledMaxUp+0x1c>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <isRolledMaxUp+0x20>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	425b      	negs	r3, r3
 8000892:	b2db      	uxtb	r3, r3
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	2000000c 	.word	0x2000000c
 80008a0:	2000000a 	.word	0x2000000a

080008a4 <isRolledMaxDown>:

bool isRolledMaxDown() {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	return current_blind_positon > 0;
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <isRolledMaxDown+0x14>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	4193      	sbcs	r3, r2
 80008b0:	b2db      	uxtb	r3, r3
}
 80008b2:	0018      	movs	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000000c 	.word	0x2000000c

080008bc <isBelowNewBlindPosition>:

bool isBelowNewBlindPosition() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	return current_blind_positon < newBlindPosition;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <isBelowNewBlindPosition+0x1c>)
 80008c2:	881a      	ldrh	r2, [r3, #0]
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <isBelowNewBlindPosition+0x20>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	419b      	sbcs	r3, r3
 80008cc:	425b      	negs	r3, r3
 80008ce:	b2db      	uxtb	r3, r3
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	2000000c 	.word	0x2000000c
 80008dc:	2000000e 	.word	0x2000000e

080008e0 <isAboveNewBlindPosition>:

bool isAboveNewBlindPosition() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	return current_blind_positon > newBlindPosition;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <isAboveNewBlindPosition+0x1c>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	4a05      	ldr	r2, [pc, #20]	; (8000900 <isAboveNewBlindPosition+0x20>)
 80008ea:	8812      	ldrh	r2, [r2, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	419b      	sbcs	r3, r3
 80008f0:	425b      	negs	r3, r3
 80008f2:	b2db      	uxtb	r3, r3
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	2000000c 	.word	0x2000000c
 8000900:	2000000e 	.word	0x2000000e

08000904 <isLongerThanBlind>:

bool isLongerThanBlind(uint16_t blindLength) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	0002      	movs	r2, r0
 800090c:	1dbb      	adds	r3, r7, #6
 800090e:	801a      	strh	r2, [r3, #0]
	return blindLength > blind_height;
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <isLongerThanBlind+0x24>)
 8000912:	881a      	ldrh	r2, [r3, #0]
 8000914:	1dbb      	adds	r3, r7, #6
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	419b      	sbcs	r3, r3
 800091c:	425b      	negs	r3, r3
 800091e:	b2db      	uxtb	r3, r3
}
 8000920:	0018      	movs	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000000a 	.word	0x2000000a

0800092c <isPositiveLength>:

bool isPositiveLength(uint16_t blindLength) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	0002      	movs	r2, r0
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	801a      	strh	r2, [r3, #0]
	return blindLength >= 0;
 8000938:	2301      	movs	r3, #1
}
 800093a:	0018      	movs	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <rollDownBlind>:

void rollDownBlind() {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1394);
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <rollDownBlind+0x20>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <rollDownBlind+0x24>)
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
	current_blind_positon--;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <rollDownBlind+0x28>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	3b01      	subs	r3, #1
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <rollDownBlind+0x28>)
 800095a:	801a      	strh	r2, [r3, #0]
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	2000017c 	.word	0x2000017c
 8000968:	00000572 	.word	0x00000572
 800096c:	2000000c 	.word	0x2000000c

08000970 <rollUpBlind>:

void rollUpBlind() {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1568);
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <rollUpBlind+0x20>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	22c4      	movs	r2, #196	; 0xc4
 800097a:	00d2      	lsls	r2, r2, #3
 800097c:	635a      	str	r2, [r3, #52]	; 0x34
	current_blind_positon++;
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <rollUpBlind+0x24>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b03      	ldr	r3, [pc, #12]	; (8000994 <rollUpBlind+0x24>)
 8000988:	801a      	strh	r2, [r3, #0]
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000017c 	.word	0x2000017c
 8000994:	2000000c 	.word	0x2000000c

08000998 <stopRollingBlind>:

void stopRollingBlind() {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
//	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1474);
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1460);
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <stopRollingBlind+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <stopRollingBlind+0x18>)
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	2000017c 	.word	0x2000017c
 80009b0:	000005b4 	.word	0x000005b4

080009b4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ba:	003b      	movs	r3, r7
 80009bc:	0018      	movs	r0, r3
 80009be:	2308      	movs	r3, #8
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f005 f809 	bl	80059da <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80009c8:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <MX_ADC_Init+0xe0>)
 80009ca:	4a33      	ldr	r2, [pc, #204]	; (8000a98 <MX_ADC_Init+0xe4>)
 80009cc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <MX_ADC_Init+0xe0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <MX_ADC_Init+0xe0>)
 80009d6:	22c0      	movs	r2, #192	; 0xc0
 80009d8:	0612      	lsls	r2, r2, #24
 80009da:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80009dc:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <MX_ADC_Init+0xe0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_ADC_Init+0xe0>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <MX_ADC_Init+0xe0>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_ADC_Init+0xe0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <MX_ADC_Init+0xe0>)
 80009f6:	2220      	movs	r2, #32
 80009f8:	2101      	movs	r1, #1
 80009fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_ADC_Init+0xe0>)
 80009fe:	2221      	movs	r2, #33	; 0x21
 8000a00:	2100      	movs	r1, #0
 8000a02:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a0c:	22c2      	movs	r2, #194	; 0xc2
 8000a0e:	32ff      	adds	r2, #255	; 0xff
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a14:	222c      	movs	r2, #44	; 0x2c
 8000a16:	2100      	movs	r1, #0
 8000a18:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 f832 	bl	8001aa4 <HAL_ADC_Init>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000a44:	f000 fb6a 	bl	800111c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000a48:	003b      	movs	r3, r7
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <MX_ADC_Init+0xe8>)
 8000a4c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a4e:	003b      	movs	r3, r7
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	0152      	lsls	r2, r2, #5
 8000a54:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a56:	003a      	movs	r2, r7
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fa91 	bl	8001f84 <HAL_ADC_ConfigChannel>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000a66:	f000 fb59 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f001 fbba 	bl	80021e8 <HAL_ADCEx_Calibration_Start>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC_Init+0xc8>
  {
    Error_Handler();
 8000a78:	f000 fb50 	bl	800111c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <MX_ADC_Init+0xe0>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f001 f984 	bl	8001d8c <HAL_ADC_Start>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC_Init+0xd8>
  {
    /* Start Conversation Error */
    Error_Handler();
 8000a88:	f000 fb48 	bl	800111c <Error_Handler>
   }

  /* USER CODE END ADC_Init 2 */

}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000b8 	.word	0x200000b8
 8000a98:	40012400 	.word	0x40012400
 8000a9c:	38004000 	.word	0x38004000

08000aa0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	240c      	movs	r4, #12
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	0018      	movs	r0, r3
 8000aae:	2314      	movs	r3, #20
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f004 ff91 	bl	80059da <memset>
  if(adcHandle->Instance==ADC1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <HAL_ADC_MspInit+0x70>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d121      	bne.n	8000b06 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_ADC_MspInit+0x74>)
 8000ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_ADC_MspInit+0x74>)
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0089      	lsls	r1, r1, #2
 8000acc:	430a      	orrs	r2, r1
 8000ace:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_ADC_MspInit+0x74>)
 8000ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_ADC_MspInit+0x74>)
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_ADC_MspInit+0x74>)
 8000ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2210      	movs	r2, #16
 8000aec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2203      	movs	r2, #3
 8000af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_ADC_MspInit+0x78>)
 8000afe:	0019      	movs	r1, r3
 8000b00:	0010      	movs	r0, r2
 8000b02:	f001 fd75 	bl	80025f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b009      	add	sp, #36	; 0x24
 8000b0c:	bd90      	pop	{r4, r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	40012400 	.word	0x40012400
 8000b14:	40021000 	.word	0x40021000
 8000b18:	50000800 	.word	0x50000800

08000b1c <msg_handler>:
uint8_t timer_count = 0;
char buffer[50];
char info[50];

void msg_handler(void)
{
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
	if (string_compare(buffer, "SERWO MAX UP", strlen("SERWO MAX UP"))) {
 8000b22:	49c7      	ldr	r1, [pc, #796]	; (8000e40 <msg_handler+0x324>)
 8000b24:	4bc7      	ldr	r3, [pc, #796]	; (8000e44 <msg_handler+0x328>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 fafc 	bl	8001126 <string_compare>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d009      	beq.n	8000b46 <msg_handler+0x2a>
		setBlindPositionToMax();
 8000b32:	f7ff fe53 	bl	80007dc <setBlindPositionToMax>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going up to min.\n", strlen("Servo going up to min.\n"), 500);
 8000b36:	23fa      	movs	r3, #250	; 0xfa
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	49c3      	ldr	r1, [pc, #780]	; (8000e48 <msg_handler+0x32c>)
 8000b3c:	48c3      	ldr	r0, [pc, #780]	; (8000e4c <msg_handler+0x330>)
 8000b3e:	2217      	movs	r2, #23
 8000b40:	f003 fd5c 	bl	80045fc <HAL_UART_Transmit>
 8000b44:	e16b      	b.n	8000e1e <msg_handler+0x302>
	} else if (string_compare(buffer, "SERWO MIN DOWN", strlen("SERWO MIN DOWN"))) {
 8000b46:	49c2      	ldr	r1, [pc, #776]	; (8000e50 <msg_handler+0x334>)
 8000b48:	4bbe      	ldr	r3, [pc, #760]	; (8000e44 <msg_handler+0x328>)
 8000b4a:	220e      	movs	r2, #14
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f000 faea 	bl	8001126 <string_compare>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d009      	beq.n	8000b6a <msg_handler+0x4e>
		setBlindPositionToMin();
 8000b56:	f7ff fe4f 	bl	80007f8 <setBlindPositionToMin>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going down to max.\n", strlen("Servo going down to max.\n"), 500);
 8000b5a:	23fa      	movs	r3, #250	; 0xfa
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	49bd      	ldr	r1, [pc, #756]	; (8000e54 <msg_handler+0x338>)
 8000b60:	48ba      	ldr	r0, [pc, #744]	; (8000e4c <msg_handler+0x330>)
 8000b62:	2219      	movs	r2, #25
 8000b64:	f003 fd4a 	bl	80045fc <HAL_UART_Transmit>
 8000b68:	e159      	b.n	8000e1e <msg_handler+0x302>
	} else if (string_compare(buffer, "SERWO UP", strlen("SERWO UP"))) {
 8000b6a:	49bb      	ldr	r1, [pc, #748]	; (8000e58 <msg_handler+0x33c>)
 8000b6c:	4bb5      	ldr	r3, [pc, #724]	; (8000e44 <msg_handler+0x328>)
 8000b6e:	2208      	movs	r2, #8
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fad8 	bl	8001126 <string_compare>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d00a      	beq.n	8000b90 <msg_handler+0x74>
		increaseBlindPositionByLength(1);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff fdd2 	bl	8000724 <increaseBlindPositionByLength>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going up by 1.\n", strlen("Servo going up by 1.\n"), 500);
 8000b80:	23fa      	movs	r3, #250	; 0xfa
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	49b5      	ldr	r1, [pc, #724]	; (8000e5c <msg_handler+0x340>)
 8000b86:	48b1      	ldr	r0, [pc, #708]	; (8000e4c <msg_handler+0x330>)
 8000b88:	2215      	movs	r2, #21
 8000b8a:	f003 fd37 	bl	80045fc <HAL_UART_Transmit>
 8000b8e:	e146      	b.n	8000e1e <msg_handler+0x302>
	} else if (string_compare(buffer, "SERWO DOWN", strlen("SERWO DOWN"))) {
 8000b90:	49b3      	ldr	r1, [pc, #716]	; (8000e60 <msg_handler+0x344>)
 8000b92:	4bac      	ldr	r3, [pc, #688]	; (8000e44 <msg_handler+0x328>)
 8000b94:	220a      	movs	r2, #10
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 fac5 	bl	8001126 <string_compare>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d00b      	beq.n	8000bb8 <msg_handler+0x9c>
		increaseBlindPositionByLength(-1);
 8000ba0:	4bb0      	ldr	r3, [pc, #704]	; (8000e64 <msg_handler+0x348>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff fdbe 	bl	8000724 <increaseBlindPositionByLength>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Servo going down by 1.\n", strlen("Servo going down by 1.\n"), 500);
 8000ba8:	23fa      	movs	r3, #250	; 0xfa
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	49ae      	ldr	r1, [pc, #696]	; (8000e68 <msg_handler+0x34c>)
 8000bae:	48a7      	ldr	r0, [pc, #668]	; (8000e4c <msg_handler+0x330>)
 8000bb0:	2217      	movs	r2, #23
 8000bb2:	f003 fd23 	bl	80045fc <HAL_UART_Transmit>
 8000bb6:	e132      	b.n	8000e1e <msg_handler+0x302>
	} else if (strncmp (buffer, "SET MIN LDR READING xxx", strlen("SET MIN LDR READING")) == 0) {
 8000bb8:	49ac      	ldr	r1, [pc, #688]	; (8000e6c <msg_handler+0x350>)
 8000bba:	4ba2      	ldr	r3, [pc, #648]	; (8000e44 <msg_handler+0x328>)
 8000bbc:	2213      	movs	r2, #19
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f004 ff34 	bl	8005a2c <strncmp>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d10c      	bne.n	8000be2 <msg_handler+0xc6>
		uint16_t ldrValue = getLastWordAsInt(buffer);
 8000bc8:	003c      	movs	r4, r7
 8000bca:	4b9e      	ldr	r3, [pc, #632]	; (8000e44 <msg_handler+0x328>)
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 faef 	bl	80011b0 <getLastWordAsInt>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	8023      	strh	r3, [r4, #0]
		setMinLDRreading(ldrValue);
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fd20 	bl	8000620 <setMinLDRreading>
 8000be0:	e11d      	b.n	8000e1e <msg_handler+0x302>
	} else if (strncmp (buffer, "SET MAX LDR READING xxx", strlen("SET MAX LDR READING")) == 0) {
 8000be2:	49a3      	ldr	r1, [pc, #652]	; (8000e70 <msg_handler+0x354>)
 8000be4:	4b97      	ldr	r3, [pc, #604]	; (8000e44 <msg_handler+0x328>)
 8000be6:	2213      	movs	r2, #19
 8000be8:	0018      	movs	r0, r3
 8000bea:	f004 ff1f 	bl	8005a2c <strncmp>
 8000bee:	1e03      	subs	r3, r0, #0
 8000bf0:	d10c      	bne.n	8000c0c <msg_handler+0xf0>
		uint16_t ldrValue = getLastWordAsInt(buffer);
 8000bf2:	1cbc      	adds	r4, r7, #2
 8000bf4:	4b93      	ldr	r3, [pc, #588]	; (8000e44 <msg_handler+0x328>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 fada 	bl	80011b0 <getLastWordAsInt>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	8023      	strh	r3, [r4, #0]
		setMaxLDRreading(ldrValue);
 8000c00:	1cbb      	adds	r3, r7, #2
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fd1b 	bl	8000640 <setMaxLDRreading>
 8000c0a:	e108      	b.n	8000e1e <msg_handler+0x302>
	} else if (strncmp (buffer, "SET UPPER LDR CONTROL LIMIT xxx", strlen("SET UPPER LDR CONTROL LIMIT")) == 0) {
 8000c0c:	4999      	ldr	r1, [pc, #612]	; (8000e74 <msg_handler+0x358>)
 8000c0e:	4b8d      	ldr	r3, [pc, #564]	; (8000e44 <msg_handler+0x328>)
 8000c10:	221b      	movs	r2, #27
 8000c12:	0018      	movs	r0, r3
 8000c14:	f004 ff0a 	bl	8005a2c <strncmp>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d10c      	bne.n	8000c36 <msg_handler+0x11a>
		uint16_t ldrValue = getLastWordAsInt(buffer);
 8000c1c:	1d3c      	adds	r4, r7, #4
 8000c1e:	4b89      	ldr	r3, [pc, #548]	; (8000e44 <msg_handler+0x328>)
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 fac5 	bl	80011b0 <getLastWordAsInt>
 8000c26:	0003      	movs	r3, r0
 8000c28:	8023      	strh	r3, [r4, #0]
		setUpperLDRControlLimit(ldrValue);
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff fd16 	bl	8000660 <setUpperLDRControlLimit>
 8000c34:	e0f3      	b.n	8000e1e <msg_handler+0x302>
	} else if (strncmp (buffer, "SET LOWER LDR CONTROL LIMIT xxx", strlen("SET LOWER LDR CONTROL LIMIT")) == 0) {
 8000c36:	4990      	ldr	r1, [pc, #576]	; (8000e78 <msg_handler+0x35c>)
 8000c38:	4b82      	ldr	r3, [pc, #520]	; (8000e44 <msg_handler+0x328>)
 8000c3a:	221b      	movs	r2, #27
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f004 fef5 	bl	8005a2c <strncmp>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d10c      	bne.n	8000c60 <msg_handler+0x144>
		uint16_t ldrValue = getLastWordAsInt(buffer);
 8000c46:	1dbc      	adds	r4, r7, #6
 8000c48:	4b7e      	ldr	r3, [pc, #504]	; (8000e44 <msg_handler+0x328>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fab0 	bl	80011b0 <getLastWordAsInt>
 8000c50:	0003      	movs	r3, r0
 8000c52:	8023      	strh	r3, [r4, #0]
		setLowerLDRControlLimit(ldrValue);
 8000c54:	1dbb      	adds	r3, r7, #6
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff fd11 	bl	8000680 <setLowerLDRControlLimit>
 8000c5e:	e0de      	b.n	8000e1e <msg_handler+0x302>
	} else if (string_compare(buffer, "PRINT MIN LDR READING", strlen("PRINT MIN LDR READING"))) {
 8000c60:	4986      	ldr	r1, [pc, #536]	; (8000e7c <msg_handler+0x360>)
 8000c62:	4b78      	ldr	r3, [pc, #480]	; (8000e44 <msg_handler+0x328>)
 8000c64:	2215      	movs	r2, #21
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fa5d 	bl	8001126 <string_compare>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d028      	beq.n	8000cc2 <msg_handler+0x1a6>
		uint16_t ldrValue = getMinLDRreading();
 8000c70:	2508      	movs	r5, #8
 8000c72:	197c      	adds	r4, r7, r5
 8000c74:	f7ff fd14 	bl	80006a0 <getMinLDRreading>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	8023      	strh	r3, [r4, #0]
		sprintf(info, "minLdrReading=%d", ldrValue);
 8000c7c:	197b      	adds	r3, r7, r5
 8000c7e:	881a      	ldrh	r2, [r3, #0]
 8000c80:	497f      	ldr	r1, [pc, #508]	; (8000e80 <msg_handler+0x364>)
 8000c82:	4b80      	ldr	r3, [pc, #512]	; (8000e84 <msg_handler+0x368>)
 8000c84:	0018      	movs	r0, r3
 8000c86:	f004 feb1 	bl	80059ec <siprintf>
		strcat(info, "\n");
 8000c8a:	4b7e      	ldr	r3, [pc, #504]	; (8000e84 <msg_handler+0x368>)
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff fa3b 	bl	8000108 <strlen>
 8000c92:	0003      	movs	r3, r0
 8000c94:	001a      	movs	r2, r3
 8000c96:	4b7b      	ldr	r3, [pc, #492]	; (8000e84 <msg_handler+0x368>)
 8000c98:	18d2      	adds	r2, r2, r3
 8000c9a:	4b7b      	ldr	r3, [pc, #492]	; (8000e88 <msg_handler+0x36c>)
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	f004 fe90 	bl	80059c8 <memcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
 8000ca8:	4b76      	ldr	r3, [pc, #472]	; (8000e84 <msg_handler+0x368>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff fa2c 	bl	8000108 <strlen>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	23fa      	movs	r3, #250	; 0xfa
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4972      	ldr	r1, [pc, #456]	; (8000e84 <msg_handler+0x368>)
 8000cba:	4864      	ldr	r0, [pc, #400]	; (8000e4c <msg_handler+0x330>)
 8000cbc:	f003 fc9e 	bl	80045fc <HAL_UART_Transmit>
 8000cc0:	e0ad      	b.n	8000e1e <msg_handler+0x302>
	} else if (string_compare(buffer, "PRINT MAX LDR READING", strlen("PRINT MAX LDR READING"))) {
 8000cc2:	4972      	ldr	r1, [pc, #456]	; (8000e8c <msg_handler+0x370>)
 8000cc4:	4b5f      	ldr	r3, [pc, #380]	; (8000e44 <msg_handler+0x328>)
 8000cc6:	2215      	movs	r2, #21
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 fa2c 	bl	8001126 <string_compare>
 8000cce:	1e03      	subs	r3, r0, #0
 8000cd0:	d028      	beq.n	8000d24 <msg_handler+0x208>
		uint16_t ldrValue = getMaxLDRreading();
 8000cd2:	250a      	movs	r5, #10
 8000cd4:	197c      	adds	r4, r7, r5
 8000cd6:	f7ff fced 	bl	80006b4 <getMaxLDRreading>
 8000cda:	0003      	movs	r3, r0
 8000cdc:	8023      	strh	r3, [r4, #0]
		sprintf(info, "maxLdrReading=%d", ldrValue);
 8000cde:	197b      	adds	r3, r7, r5
 8000ce0:	881a      	ldrh	r2, [r3, #0]
 8000ce2:	496b      	ldr	r1, [pc, #428]	; (8000e90 <msg_handler+0x374>)
 8000ce4:	4b67      	ldr	r3, [pc, #412]	; (8000e84 <msg_handler+0x368>)
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f004 fe80 	bl	80059ec <siprintf>
		strcat(info, "\n");
 8000cec:	4b65      	ldr	r3, [pc, #404]	; (8000e84 <msg_handler+0x368>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff fa0a 	bl	8000108 <strlen>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	4b62      	ldr	r3, [pc, #392]	; (8000e84 <msg_handler+0x368>)
 8000cfa:	18d2      	adds	r2, r2, r3
 8000cfc:	4b62      	ldr	r3, [pc, #392]	; (8000e88 <msg_handler+0x36c>)
 8000cfe:	0010      	movs	r0, r2
 8000d00:	0019      	movs	r1, r3
 8000d02:	2302      	movs	r3, #2
 8000d04:	001a      	movs	r2, r3
 8000d06:	f004 fe5f 	bl	80059c8 <memcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
 8000d0a:	4b5e      	ldr	r3, [pc, #376]	; (8000e84 <msg_handler+0x368>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff f9fb 	bl	8000108 <strlen>
 8000d12:	0003      	movs	r3, r0
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	23fa      	movs	r3, #250	; 0xfa
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	495a      	ldr	r1, [pc, #360]	; (8000e84 <msg_handler+0x368>)
 8000d1c:	484b      	ldr	r0, [pc, #300]	; (8000e4c <msg_handler+0x330>)
 8000d1e:	f003 fc6d 	bl	80045fc <HAL_UART_Transmit>
 8000d22:	e07c      	b.n	8000e1e <msg_handler+0x302>
	} else if (string_compare(buffer, "PRINT UPPER LDR CONTROL LIMIT", strlen("PRINT UPPER LDR CONTROL LIMIT"))) {
 8000d24:	495b      	ldr	r1, [pc, #364]	; (8000e94 <msg_handler+0x378>)
 8000d26:	4b47      	ldr	r3, [pc, #284]	; (8000e44 <msg_handler+0x328>)
 8000d28:	221d      	movs	r2, #29
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f9fb 	bl	8001126 <string_compare>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d028      	beq.n	8000d86 <msg_handler+0x26a>
		uint16_t ldrValue = getUpperLDRControlLimit();
 8000d34:	250c      	movs	r5, #12
 8000d36:	197c      	adds	r4, r7, r5
 8000d38:	f7ff fcc6 	bl	80006c8 <getUpperLDRControlLimit>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	8023      	strh	r3, [r4, #0]
		sprintf(info, "upperLdrControlLimit=%d", ldrValue);
 8000d40:	197b      	adds	r3, r7, r5
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	4954      	ldr	r1, [pc, #336]	; (8000e98 <msg_handler+0x37c>)
 8000d46:	4b4f      	ldr	r3, [pc, #316]	; (8000e84 <msg_handler+0x368>)
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f004 fe4f 	bl	80059ec <siprintf>
		strcat(info, "\n");
 8000d4e:	4b4d      	ldr	r3, [pc, #308]	; (8000e84 <msg_handler+0x368>)
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff f9d9 	bl	8000108 <strlen>
 8000d56:	0003      	movs	r3, r0
 8000d58:	001a      	movs	r2, r3
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	; (8000e84 <msg_handler+0x368>)
 8000d5c:	18d2      	adds	r2, r2, r3
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <msg_handler+0x36c>)
 8000d60:	0010      	movs	r0, r2
 8000d62:	0019      	movs	r1, r3
 8000d64:	2302      	movs	r3, #2
 8000d66:	001a      	movs	r2, r3
 8000d68:	f004 fe2e 	bl	80059c8 <memcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
 8000d6c:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <msg_handler+0x368>)
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff f9ca 	bl	8000108 <strlen>
 8000d74:	0003      	movs	r3, r0
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	23fa      	movs	r3, #250	; 0xfa
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4941      	ldr	r1, [pc, #260]	; (8000e84 <msg_handler+0x368>)
 8000d7e:	4833      	ldr	r0, [pc, #204]	; (8000e4c <msg_handler+0x330>)
 8000d80:	f003 fc3c 	bl	80045fc <HAL_UART_Transmit>
 8000d84:	e04b      	b.n	8000e1e <msg_handler+0x302>
	} else if (string_compare(buffer, "PRINT LOWER LDR CONTROL LIMIT", strlen("PRINT LOWER LDR CONTROL LIMIT"))) {
 8000d86:	4945      	ldr	r1, [pc, #276]	; (8000e9c <msg_handler+0x380>)
 8000d88:	4b2e      	ldr	r3, [pc, #184]	; (8000e44 <msg_handler+0x328>)
 8000d8a:	221d      	movs	r2, #29
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 f9ca 	bl	8001126 <string_compare>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d028      	beq.n	8000de8 <msg_handler+0x2cc>
		uint16_t ldrValue = getLowerLDRControlLimit();
 8000d96:	250e      	movs	r5, #14
 8000d98:	197c      	adds	r4, r7, r5
 8000d9a:	f7ff fc9f 	bl	80006dc <getLowerLDRControlLimit>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	8023      	strh	r3, [r4, #0]
		sprintf(info, "lowerLdrControlLimit=%d", ldrValue);
 8000da2:	197b      	adds	r3, r7, r5
 8000da4:	881a      	ldrh	r2, [r3, #0]
 8000da6:	493e      	ldr	r1, [pc, #248]	; (8000ea0 <msg_handler+0x384>)
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <msg_handler+0x368>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f004 fe1e 	bl	80059ec <siprintf>
		strcat(info, "\n");
 8000db0:	4b34      	ldr	r3, [pc, #208]	; (8000e84 <msg_handler+0x368>)
 8000db2:	0018      	movs	r0, r3
 8000db4:	f7ff f9a8 	bl	8000108 <strlen>
 8000db8:	0003      	movs	r3, r0
 8000dba:	001a      	movs	r2, r3
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <msg_handler+0x368>)
 8000dbe:	18d2      	adds	r2, r2, r3
 8000dc0:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <msg_handler+0x36c>)
 8000dc2:	0010      	movs	r0, r2
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	001a      	movs	r2, r3
 8000dca:	f004 fdfd 	bl	80059c8 <memcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 500);
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <msg_handler+0x368>)
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff f999 	bl	8000108 <strlen>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	23fa      	movs	r3, #250	; 0xfa
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4929      	ldr	r1, [pc, #164]	; (8000e84 <msg_handler+0x368>)
 8000de0:	481a      	ldr	r0, [pc, #104]	; (8000e4c <msg_handler+0x330>)
 8000de2:	f003 fc0b 	bl	80045fc <HAL_UART_Transmit>
 8000de6:	e01a      	b.n	8000e1e <msg_handler+0x302>
	} else {
		strcat(buffer, "\n");
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <msg_handler+0x328>)
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff f98c 	bl	8000108 <strlen>
 8000df0:	0003      	movs	r3, r0
 8000df2:	001a      	movs	r2, r3
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <msg_handler+0x328>)
 8000df6:	18d2      	adds	r2, r2, r3
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <msg_handler+0x36c>)
 8000dfa:	0010      	movs	r0, r2
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	2302      	movs	r3, #2
 8000e00:	001a      	movs	r2, r3
 8000e02:	f004 fde1 	bl	80059c8 <memcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 500);
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <msg_handler+0x328>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff f97d 	bl	8000108 <strlen>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	23fa      	movs	r3, #250	; 0xfa
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	490b      	ldr	r1, [pc, #44]	; (8000e44 <msg_handler+0x328>)
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <msg_handler+0x330>)
 8000e1a:	f003 fbef 	bl	80045fc <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <msg_handler+0x328>)
 8000e20:	2232      	movs	r2, #50	; 0x32
 8000e22:	2100      	movs	r1, #0
 8000e24:	0018      	movs	r0, r3
 8000e26:	f004 fdd8 	bl	80059da <memset>
	buffer_index = 0;
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <msg_handler+0x388>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <msg_handler+0x38c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]


}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	080063d4 	.word	0x080063d4
 8000e44:	20000148 	.word	0x20000148
 8000e48:	080063e4 	.word	0x080063e4
 8000e4c:	2000027c 	.word	0x2000027c
 8000e50:	080063fc 	.word	0x080063fc
 8000e54:	0800640c 	.word	0x0800640c
 8000e58:	08006428 	.word	0x08006428
 8000e5c:	08006434 	.word	0x08006434
 8000e60:	0800644c 	.word	0x0800644c
 8000e64:	0000ffff 	.word	0x0000ffff
 8000e68:	08006458 	.word	0x08006458
 8000e6c:	08006470 	.word	0x08006470
 8000e70:	08006488 	.word	0x08006488
 8000e74:	080064a0 	.word	0x080064a0
 8000e78:	080064c0 	.word	0x080064c0
 8000e7c:	080064e0 	.word	0x080064e0
 8000e80:	080064f8 	.word	0x080064f8
 8000e84:	20000114 	.word	0x20000114
 8000e88:	0800650c 	.word	0x0800650c
 8000e8c:	08006510 	.word	0x08006510
 8000e90:	08006528 	.word	0x08006528
 8000e94:	0800653c 	.word	0x0800653c
 8000e98:	0800655c 	.word	0x0800655c
 8000e9c:	08006574 	.word	0x08006574
 8000ea0:	08006594 	.word	0x08006594
 8000ea4:	200000a8 	.word	0x200000a8
 8000ea8:	200000a9 	.word	0x200000a9

08000eac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	240c      	movs	r4, #12
 8000eb4:	193b      	adds	r3, r7, r4
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	2314      	movs	r3, #20
 8000eba:	001a      	movs	r2, r3
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	f004 fd8c 	bl	80059da <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_GPIO_Init+0x84>)
 8000ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_GPIO_Init+0x84>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_GPIO_Init+0x84>)
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_GPIO_Init+0x84>)
 8000edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_GPIO_Init+0x84>)
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_GPIO_Init+0x84>)
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	2204      	movs	r2, #4
 8000eec:	4013      	ands	r3, r2
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ef2:	23a0      	movs	r3, #160	; 0xa0
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2120      	movs	r1, #32
 8000efa:	0018      	movs	r0, r3
 8000efc:	f001 fcf6 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f00:	0021      	movs	r1, r4
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2220      	movs	r2, #32
 8000f06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	187a      	adds	r2, r7, r1
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	05db      	lsls	r3, r3, #23
 8000f20:	0011      	movs	r1, r2
 8000f22:	0018      	movs	r0, r3
 8000f24:	f001 fb64 	bl	80025f0 <HAL_GPIO_Init>

}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b009      	add	sp, #36	; 0x24
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	40021000 	.word	0x40021000

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f000 fd20 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f000 f84c 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f7ff ffb4 	bl	8000eac <MX_GPIO_Init>
  MX_ADC_Init();
 8000f44:	f7ff fd36 	bl	80009b4 <MX_ADC_Init>
  MX_TIM3_Init();
 8000f48:	f000 fa70 	bl	800142c <MX_TIM3_Init>
  MX_TIM6_Init();
 8000f4c:	f000 faf8 	bl	8001540 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000f50:	f000 fb34 	bl	80015bc <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8000f54:	f000 fc32 	bl	80017bc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f58:	f000 fc00 	bl	800175c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f5c:	f000 fa10 	bl	8001380 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1200);
 8000f60:	2396      	movs	r3, #150	; 0x96
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fd79 	bl	8001a5c <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <main+0x88>)
 8000f6c:	2232      	movs	r2, #50	; 0x32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	0018      	movs	r0, r3
 8000f72:	f004 fd32 	bl	80059da <memset>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // to chyba do servo
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <main+0x8c>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f002 fd1a 	bl	80039b4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <main+0x90>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f002 fc7c 	bl	8003880 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <main+0x94>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <main+0x94>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2120      	movs	r1, #32
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <main+0x98>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <main+0x98>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]

  //SERVO
  HAL_TIM_Base_Start_IT(&htim6);
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <main+0x9c>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f002 fc68 	bl	8003880 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <main+0xa0>)
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 fc64 	bl	8003880 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <main+0x84>
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	20000148 	.word	0x20000148
 8000fc0:	2000017c 	.word	0x2000017c
 8000fc4:	2000023c 	.word	0x2000023c
 8000fc8:	2000027c 	.word	0x2000027c
 8000fcc:	20000300 	.word	0x20000300
 8000fd0:	200001bc 	.word	0x200001bc
 8000fd4:	200001fc 	.word	0x200001fc

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b09f      	sub	sp, #124	; 0x7c
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	2440      	movs	r4, #64	; 0x40
 8000fe0:	193b      	adds	r3, r7, r4
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	2338      	movs	r3, #56	; 0x38
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f004 fcf6 	bl	80059da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fee:	232c      	movs	r3, #44	; 0x2c
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	2314      	movs	r3, #20
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f004 fcee 	bl	80059da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	0018      	movs	r0, r3
 8001002:	2328      	movs	r3, #40	; 0x28
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f004 fce7 	bl	80059da <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <SystemClock_Config+0xcc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <SystemClock_Config+0xd0>)
 8001012:	401a      	ands	r2, r3
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <SystemClock_Config+0xcc>)
 8001016:	2180      	movs	r1, #128	; 0x80
 8001018:	0109      	lsls	r1, r1, #4
 800101a:	430a      	orrs	r2, r1
 800101c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800101e:	0021      	movs	r1, r4
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2202      	movs	r2, #2
 8001024:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2210      	movs	r2, #16
 8001030:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2200      	movs	r2, #0
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	187b      	adds	r3, r7, r1
 800103a:	0018      	movs	r0, r3
 800103c:	f001 fc74 	bl	8002928 <HAL_RCC_OscConfig>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001044:	f000 f86a 	bl	800111c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	212c      	movs	r1, #44	; 0x2c
 800104a:	187b      	adds	r3, r7, r1
 800104c:	220f      	movs	r2, #15
 800104e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2201      	movs	r2, #1
 8001054:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2100      	movs	r1, #0
 800106c:	0018      	movs	r0, r3
 800106e:	f002 f82f 	bl	80030d0 <HAL_RCC_ClockConfig>
 8001072:	1e03      	subs	r3, r0, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001076:	f000 f851 	bl	800111c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2203      	movs	r2, #3
 800107e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	0018      	movs	r0, r3
 8001090:	f002 fa42 	bl	8003518 <HAL_RCCEx_PeriphCLKConfig>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001098:	f000 f840 	bl	800111c <Error_Handler>
  }
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b01f      	add	sp, #124	; 0x7c
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	40007000 	.word	0x40007000
 80010a8:	ffffe7ff 	.word	0xffffe7ff

080010ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	05db      	lsls	r3, r3, #23
 80010bc:	429a      	cmp	r2, r3
 80010be:	d102      	bne.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		steerBlind();
 80010c0:	f7ff fb16 	bl	80006f0 <steerBlind>
		if (areNewMeassures()) {
			setBlindWithLDR();
		}
		measureLDR();
	}
}
 80010c4:	e00c      	b.n	80010e0 <HAL_TIM_PeriodElapsedCallback+0x34>
	} else if (htim->Instance == TIM6) {
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d107      	bne.n	80010e0 <HAL_TIM_PeriodElapsedCallback+0x34>
		if (areNewMeassures()) {
 80010d0:	f7ff fa4a 	bl	8000568 <areNewMeassures>
 80010d4:	1e03      	subs	r3, r0, #0
 80010d6:	d001      	beq.n	80010dc <HAL_TIM_PeriodElapsedCallback+0x30>
			setBlindWithLDR();
 80010d8:	f000 f808 	bl	80010ec <setBlindWithLDR>
		measureLDR();
 80010dc:	f7ff fa16 	bl	800050c <measureLDR>
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40001000 	.word	0x40001000

080010ec <setBlindWithLDR>:

void setBlindWithLDR() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	//if (getAverageMeassure() > 2000) {
	if (isAboveUpperLimit()) {
 80010f0:	f7ff fa72 	bl	80005d8 <isAboveUpperLimit>
 80010f4:	1e03      	subs	r3, r0, #0
 80010f6:	d005      	beq.n	8001104 <setBlindWithLDR+0x18>
		setBlindPosition(blind_height);
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <setBlindWithLDR+0x2c>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff fb55 	bl	80007ac <setBlindPosition>
	//} else if (getAverageMeassure() < 500) {
	} else if (isBelowLowerLimit()) {
		setBlindPosition(0);
	}

}
 8001102:	e006      	b.n	8001112 <setBlindWithLDR+0x26>
	} else if (isBelowLowerLimit()) {
 8001104:	f7ff fa7a 	bl	80005fc <isBelowLowerLimit>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d002      	beq.n	8001112 <setBlindWithLDR+0x26>
		setBlindPosition(0);
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fb4d 	bl	80007ac <setBlindPosition>
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000000a 	.word	0x2000000a

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>

08001126 <string_compare>:
#include "myutilities.h"

uint8_t string_compare(char array1[], char array2[], uint16_t length) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	1dbb      	adds	r3, r7, #6
 8001132:	801a      	strh	r2, [r3, #0]
	uint8_t comVAR = 0, i;
 8001134:	2317      	movs	r3, #23
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
	for (i=0; i<length; i++)
 800113c:	2316      	movs	r3, #22
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e01d      	b.n	8001182 <string_compare+0x5c>
	{
		if (array1[i] == array2[i]) comVAR++;
 8001146:	2116      	movs	r1, #22
 8001148:	187b      	adds	r3, r7, r1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	18d3      	adds	r3, r2, r3
 8001150:	781a      	ldrb	r2, [r3, #0]
 8001152:	187b      	adds	r3, r7, r1
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	18cb      	adds	r3, r1, r3
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d106      	bne.n	800116e <string_compare+0x48>
 8001160:	2117      	movs	r1, #23
 8001162:	187b      	adds	r3, r7, r1
 8001164:	781a      	ldrb	r2, [r3, #0]
 8001166:	187b      	adds	r3, r7, r1
 8001168:	3201      	adds	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e003      	b.n	8001176 <string_compare+0x50>
		else comVAR = 0;
 800116e:	2317      	movs	r3, #23
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
	for (i=0; i<length; i++)
 8001176:	2116      	movs	r1, #22
 8001178:	187b      	adds	r3, r7, r1
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	187b      	adds	r3, r7, r1
 800117e:	3201      	adds	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	2316      	movs	r3, #22
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	1dba      	adds	r2, r7, #6
 800118c:	8812      	ldrh	r2, [r2, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d8d9      	bhi.n	8001146 <string_compare+0x20>
	}
	if (comVAR == length) return 1;
 8001192:	2317      	movs	r3, #23
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	1dba      	adds	r2, r7, #6
 800119c:	8812      	ldrh	r2, [r2, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d101      	bne.n	80011a6 <string_compare+0x80>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <string_compare+0x82>
	else return 0;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b006      	add	sp, #24
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <getLastWordAsInt>:
char *getLastN(char *str, size_t n) {
    size_t len = strlen(str);
    return (char *)str + len - n;
}

uint16_t getLastWordAsInt(char *str) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    char *word = strrchr(str, ' ') + 1;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2120      	movs	r1, #32
 80011bc:	0018      	movs	r0, r3
 80011be:	f004 fc46 	bl	8005a4e <strrchr>
 80011c2:	0003      	movs	r3, r0
 80011c4:	3301      	adds	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
    return (uint16_t)atoi(word);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f004 fbcc 	bl	8005968 <atoi>
 80011d0:	0003      	movs	r3, r0
 80011d2:	b29b      	uxth	r3, r3
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b004      	add	sp, #16
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <HAL_MspInit+0x24>)
 80011e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_MspInit+0x24>)
 80011e6:	2101      	movs	r1, #1
 80011e8:	430a      	orrs	r2, r1
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <HAL_MspInit+0x24>)
 80011ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_MspInit+0x24>)
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	0549      	lsls	r1, r1, #21
 80011f6:	430a      	orrs	r2, r1
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001228:	f000 fbfc 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <TIM2_IRQHandler+0x14>)
 800123a:	0018      	movs	r0, r3
 800123c:	f002 fc4c 	bl	8003ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	200001fc 	.word	0x200001fc

0800124c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <TIM6_DAC_IRQHandler+0x14>)
 8001252:	0018      	movs	r0, r3
 8001254:	f002 fc40 	bl	8003ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	200001bc 	.word	0x200001bc

08001264 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if (strlen(buffer) > 0) timer_count++;
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <TIM7_IRQHandler+0x34>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <TIM7_IRQHandler+0x18>
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <TIM7_IRQHandler+0x38>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <TIM7_IRQHandler+0x38>)
 800127a:	701a      	strb	r2, [r3, #0]
	if (timer_count > 5) msg_handler();
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <TIM7_IRQHandler+0x38>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d901      	bls.n	8001288 <TIM7_IRQHandler+0x24>
 8001284:	f7ff fc4a 	bl	8000b1c <msg_handler>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <TIM7_IRQHandler+0x3c>)
 800128a:	0018      	movs	r0, r3
 800128c:	f002 fc24 	bl	8003ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	20000148 	.word	0x20000148
 800129c:	200000a9 	.word	0x200000a9
 80012a0:	2000023c 	.word	0x2000023c

080012a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_Receive(&huart1, (uint8_t*)&buffer[buffer_index++], 1, 10);
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <USART1_IRQHandler+0x40>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	b2d1      	uxtb	r1, r2
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <USART1_IRQHandler+0x40>)
 80012b2:	7011      	strb	r1, [r2, #0]
 80012b4:	001a      	movs	r2, r3
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <USART1_IRQHandler+0x44>)
 80012b8:	18d1      	adds	r1, r2, r3
 80012ba:	480c      	ldr	r0, [pc, #48]	; (80012ec <USART1_IRQHandler+0x48>)
 80012bc:	230a      	movs	r3, #10
 80012be:	2201      	movs	r2, #1
 80012c0:	f003 fa44 	bl	800474c <HAL_UART_Receive>

	if (buffer[buffer_index-1] == '\n') msg_handler();
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <USART1_IRQHandler+0x40>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <USART1_IRQHandler+0x44>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	2b0a      	cmp	r3, #10
 80012d0:	d101      	bne.n	80012d6 <USART1_IRQHandler+0x32>
 80012d2:	f7ff fc23 	bl	8000b1c <msg_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <USART1_IRQHandler+0x48>)
 80012d8:	0018      	movs	r0, r3
 80012da:	f003 fb25 	bl	8004928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000a8 	.word	0x200000a8
 80012e8:	20000148 	.word	0x20000148
 80012ec:	2000027c 	.word	0x2000027c

080012f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <USART2_IRQHandler+0x14>)
 80012f6:	0018      	movs	r0, r3
 80012f8:	f003 fb16 	bl	8004928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	20000300 	.word	0x20000300

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	18d3      	adds	r3, r2, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f004 fb1c 	bl	8005974 <__errno>
 800133c:	0003      	movs	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	2301      	movs	r3, #1
 8001344:	425b      	negs	r3, r3
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	18d2      	adds	r2, r2, r3
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <_sbrk+0x64>)
 8001358:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b006      	add	sp, #24
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20005000 	.word	0x20005000
 8001368:	00000400 	.word	0x00000400
 800136c:	200000ac 	.word	0x200000ac
 8001370:	20000398 	.word	0x20000398

08001374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001386:	2308      	movs	r3, #8
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	0018      	movs	r0, r3
 800138c:	2310      	movs	r3, #16
 800138e:	001a      	movs	r2, r3
 8001390:	2100      	movs	r1, #0
 8001392:	f004 fb22 	bl	80059da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001396:	003b      	movs	r3, r7
 8001398:	0018      	movs	r0, r3
 800139a:	2308      	movs	r3, #8
 800139c:	001a      	movs	r2, r3
 800139e:	2100      	movs	r1, #0
 80013a0:	f004 fb1b 	bl	80059da <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <MX_TIM2_Init+0xa0>)
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	05d2      	lsls	r2, r2, #23
 80013aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_TIM2_Init+0xa0>)
 80013ae:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <MX_TIM2_Init+0xa4>)
 80013b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_TIM2_Init+0xa0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8999;
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_TIM2_Init+0xa0>)
 80013ba:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <MX_TIM2_Init+0xa8>)
 80013bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_TIM2_Init+0xa0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_TIM2_Init+0xa0>)
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_TIM2_Init+0xa0>)
 80013cc:	0018      	movs	r0, r3
 80013ce:	f002 fa17 	bl	8003800 <HAL_TIM_Base_Init>
 80013d2:	1e03      	subs	r3, r0, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013d6:	f7ff fea1 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013da:	2108      	movs	r1, #8
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	0152      	lsls	r2, r2, #5
 80013e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e4:	187a      	adds	r2, r7, r1
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_TIM2_Init+0xa0>)
 80013e8:	0011      	movs	r1, r2
 80013ea:	0018      	movs	r0, r3
 80013ec:	f002 fd22 	bl	8003e34 <HAL_TIM_ConfigClockSource>
 80013f0:	1e03      	subs	r3, r0, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013f4:	f7ff fe92 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	003b      	movs	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	003b      	movs	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001404:	003a      	movs	r2, r7
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_TIM2_Init+0xa0>)
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f003 f826 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	1e03      	subs	r3, r0, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001414:	f7ff fe82 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b006      	add	sp, #24
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200001fc 	.word	0x200001fc
 8001424:	00003e7f 	.word	0x00003e7f
 8001428:	00002327 	.word	0x00002327

0800142c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	2318      	movs	r3, #24
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	0018      	movs	r0, r3
 8001438:	2310      	movs	r3, #16
 800143a:	001a      	movs	r2, r3
 800143c:	2100      	movs	r1, #0
 800143e:	f004 facc 	bl	80059da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001442:	2310      	movs	r3, #16
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	0018      	movs	r0, r3
 8001448:	2308      	movs	r3, #8
 800144a:	001a      	movs	r2, r3
 800144c:	2100      	movs	r1, #0
 800144e:	f004 fac4 	bl	80059da <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001452:	003b      	movs	r3, r7
 8001454:	0018      	movs	r0, r3
 8001456:	2310      	movs	r3, #16
 8001458:	001a      	movs	r2, r3
 800145a:	2100      	movs	r1, #0
 800145c:	f004 fabd 	bl	80059da <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001460:	4b34      	ldr	r3, [pc, #208]	; (8001534 <MX_TIM3_Init+0x108>)
 8001462:	4a35      	ldr	r2, [pc, #212]	; (8001538 <MX_TIM3_Init+0x10c>)
 8001464:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001466:	4b33      	ldr	r3, [pc, #204]	; (8001534 <MX_TIM3_Init+0x108>)
 8001468:	220f      	movs	r2, #15
 800146a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b31      	ldr	r3, [pc, #196]	; (8001534 <MX_TIM3_Init+0x108>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <MX_TIM3_Init+0x108>)
 8001474:	4a31      	ldr	r2, [pc, #196]	; (800153c <MX_TIM3_Init+0x110>)
 8001476:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <MX_TIM3_Init+0x108>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <MX_TIM3_Init+0x108>)
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <MX_TIM3_Init+0x108>)
 8001486:	0018      	movs	r0, r3
 8001488:	f002 f9ba 	bl	8003800 <HAL_TIM_Base_Init>
 800148c:	1e03      	subs	r3, r0, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001490:	f7ff fe44 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001494:	2118      	movs	r1, #24
 8001496:	187b      	adds	r3, r7, r1
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	0152      	lsls	r2, r2, #5
 800149c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800149e:	187a      	adds	r2, r7, r1
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <MX_TIM3_Init+0x108>)
 80014a2:	0011      	movs	r1, r2
 80014a4:	0018      	movs	r0, r3
 80014a6:	f002 fcc5 	bl	8003e34 <HAL_TIM_ConfigClockSource>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80014ae:	f7ff fe35 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <MX_TIM3_Init+0x108>)
 80014b4:	0018      	movs	r0, r3
 80014b6:	f002 fa35 	bl	8003924 <HAL_TIM_PWM_Init>
 80014ba:	1e03      	subs	r3, r0, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80014be:	f7ff fe2d 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c2:	2110      	movs	r1, #16
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d0:	187a      	adds	r2, r7, r1
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_TIM3_Init+0x108>)
 80014d4:	0011      	movs	r1, r2
 80014d6:	0018      	movs	r0, r3
 80014d8:	f002 ffc0 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80014e0:	f7ff fe1c 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e4:	003b      	movs	r3, r7
 80014e6:	2260      	movs	r2, #96	; 0x60
 80014e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80014ea:	003b      	movs	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f0:	003b      	movs	r3, r7
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f6:	003b      	movs	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fc:	0039      	movs	r1, r7
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MX_TIM3_Init+0x108>)
 8001500:	2200      	movs	r2, #0
 8001502:	0018      	movs	r0, r3
 8001504:	f002 fbd0 	bl	8003ca8 <HAL_TIM_PWM_ConfigChannel>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800150c:	f7ff fe06 	bl	800111c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_TIM3_Init+0x108>)
 8001512:	2104      	movs	r1, #4
 8001514:	0018      	movs	r0, r3
 8001516:	f002 ffff 	bl	8004518 <HAL_TIMEx_RemapConfig>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800151e:	f7ff fdfd 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <MX_TIM3_Init+0x108>)
 8001524:	0018      	movs	r0, r3
 8001526:	f000 f8dd 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b00a      	add	sp, #40	; 0x28
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	2000017c 	.word	0x2000017c
 8001538:	40000400 	.word	0x40000400
 800153c:	00004e1f 	.word	0x00004e1f

08001540 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001546:	003b      	movs	r3, r7
 8001548:	0018      	movs	r0, r3
 800154a:	2308      	movs	r3, #8
 800154c:	001a      	movs	r2, r3
 800154e:	2100      	movs	r1, #0
 8001550:	f004 fa43 	bl	80059da <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MX_TIM6_Init+0x6c>)
 8001556:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <MX_TIM6_Init+0x70>)
 8001558:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_TIM6_Init+0x6c>)
 800155c:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <MX_TIM6_Init+0x74>)
 800155e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_TIM6_Init+0x6c>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_TIM6_Init+0x6c>)
 8001568:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <MX_TIM6_Init+0x78>)
 800156a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_TIM6_Init+0x6c>)
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_TIM6_Init+0x6c>)
 8001574:	0018      	movs	r0, r3
 8001576:	f002 f943 	bl	8003800 <HAL_TIM_Base_Init>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800157e:	f7ff fdcd 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	003b      	movs	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	003b      	movs	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800158e:	003a      	movs	r2, r7
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_TIM6_Init+0x6c>)
 8001592:	0011      	movs	r1, r2
 8001594:	0018      	movs	r0, r3
 8001596:	f002 ff61 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800159e:	f7ff fdbd 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	200001bc 	.word	0x200001bc
 80015b0:	40001000 	.word	0x40001000
 80015b4:	00003e7f 	.word	0x00003e7f
 80015b8:	0000270f 	.word	0x0000270f

080015bc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c2:	003b      	movs	r3, r7
 80015c4:	0018      	movs	r0, r3
 80015c6:	2308      	movs	r3, #8
 80015c8:	001a      	movs	r2, r3
 80015ca:	2100      	movs	r1, #0
 80015cc:	f004 fa05 	bl	80059da <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_TIM7_Init+0x6c>)
 80015d2:	4a16      	ldr	r2, [pc, #88]	; (800162c <MX_TIM7_Init+0x70>)
 80015d4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_TIM7_Init+0x6c>)
 80015d8:	220f      	movs	r2, #15
 80015da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_TIM7_Init+0x6c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_TIM7_Init+0x6c>)
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <MX_TIM7_Init+0x74>)
 80015e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_TIM7_Init+0x6c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_TIM7_Init+0x6c>)
 80015f0:	0018      	movs	r0, r3
 80015f2:	f002 f905 	bl	8003800 <HAL_TIM_Base_Init>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80015fa:	f7ff fd8f 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fe:	003b      	movs	r3, r7
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001604:	003b      	movs	r3, r7
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800160a:	003a      	movs	r2, r7
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_TIM7_Init+0x6c>)
 800160e:	0011      	movs	r1, r2
 8001610:	0018      	movs	r0, r3
 8001612:	f002 ff23 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	1e03      	subs	r3, r0, #0
 8001618:	d001      	beq.n	800161e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800161a:	f7ff fd7f 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b002      	add	sp, #8
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	2000023c 	.word	0x2000023c
 800162c:	40001400 	.word	0x40001400
 8001630:	00004e1f 	.word	0x00004e1f

08001634 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	05db      	lsls	r3, r3, #23
 8001644:	429a      	cmp	r2, r3
 8001646:	d10e      	bne.n	8001666 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_TIM_Base_MspInit+0xa0>)
 800164a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800164c:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <HAL_TIM_Base_MspInit+0xa0>)
 800164e:	2101      	movs	r1, #1
 8001650:	430a      	orrs	r2, r1
 8001652:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	200f      	movs	r0, #15
 800165a:	f000 ff0f 	bl	800247c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800165e:	200f      	movs	r0, #15
 8001660:	f000 ff21 	bl	80024a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001664:	e032      	b.n	80016cc <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM3)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <HAL_TIM_Base_MspInit+0xa4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d106      	bne.n	800167e <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_TIM_Base_MspInit+0xa0>)
 8001672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_TIM_Base_MspInit+0xa0>)
 8001676:	2102      	movs	r1, #2
 8001678:	430a      	orrs	r2, r1
 800167a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800167c:	e026      	b.n	80016cc <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM6)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_TIM_Base_MspInit+0xa8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d10e      	bne.n	80016a6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_TIM_Base_MspInit+0xa0>)
 800168a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_TIM_Base_MspInit+0xa0>)
 800168e:	2110      	movs	r1, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2011      	movs	r0, #17
 800169a:	f000 feef 	bl	800247c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800169e:	2011      	movs	r0, #17
 80016a0:	f000 ff01 	bl	80024a6 <HAL_NVIC_EnableIRQ>
}
 80016a4:	e012      	b.n	80016cc <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM7)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_TIM_Base_MspInit+0xac>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d10d      	bne.n	80016cc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_TIM_Base_MspInit+0xa0>)
 80016b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_TIM_Base_MspInit+0xa0>)
 80016b6:	2120      	movs	r1, #32
 80016b8:	430a      	orrs	r2, r1
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2012      	movs	r0, #18
 80016c2:	f000 fedb 	bl	800247c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016c6:	2012      	movs	r0, #18
 80016c8:	f000 feed 	bl	80024a6 <HAL_NVIC_EnableIRQ>
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40000400 	.word	0x40000400
 80016dc:	40001000 	.word	0x40001000
 80016e0:	40001400 	.word	0x40001400

080016e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	240c      	movs	r4, #12
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	0018      	movs	r0, r3
 80016f2:	2314      	movs	r3, #20
 80016f4:	001a      	movs	r2, r3
 80016f6:	2100      	movs	r1, #0
 80016f8:	f004 f96f 	bl	80059da <memset>
  if(timHandle->Instance==TIM3)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <HAL_TIM_MspPostInit+0x70>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d122      	bne.n	800174c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_TIM_MspPostInit+0x74>)
 8001708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_TIM_MspPostInit+0x74>)
 800170c:	2101      	movs	r1, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_TIM_MspPostInit+0x74>)
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	2201      	movs	r2, #1
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800171e:	0021      	movs	r1, r4
 8001720:	187b      	adds	r3, r7, r1
 8001722:	2240      	movs	r2, #64	; 0x40
 8001724:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2202      	movs	r2, #2
 800172a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001738:	187b      	adds	r3, r7, r1
 800173a:	2202      	movs	r2, #2
 800173c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	187a      	adds	r2, r7, r1
 8001740:	23a0      	movs	r3, #160	; 0xa0
 8001742:	05db      	lsls	r3, r3, #23
 8001744:	0011      	movs	r1, r2
 8001746:	0018      	movs	r0, r3
 8001748:	f000 ff52 	bl	80025f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b009      	add	sp, #36	; 0x24
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	40000400 	.word	0x40000400
 8001758:	40021000 	.word	0x40021000

0800175c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_USART1_UART_Init+0x58>)
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <MX_USART1_UART_Init+0x5c>)
 8001764:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_USART1_UART_Init+0x58>)
 8001768:	2296      	movs	r2, #150	; 0x96
 800176a:	0192      	lsls	r2, r2, #6
 800176c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART1_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_USART1_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART1_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART1_UART_Init+0x58>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART1_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART1_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART1_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART1_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <MX_USART1_UART_Init+0x58>)
 80017a0:	0018      	movs	r0, r3
 80017a2:	f002 fed7 	bl	8004554 <HAL_UART_Init>
 80017a6:	1e03      	subs	r3, r0, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017aa:	f7ff fcb7 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000027c 	.word	0x2000027c
 80017b8:	40013800 	.word	0x40013800

080017bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_USART2_UART_Init+0x58>)
 80017c2:	4a15      	ldr	r2, [pc, #84]	; (8001818 <MX_USART2_UART_Init+0x5c>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_USART2_UART_Init+0x58>)
 80017c8:	2296      	movs	r2, #150	; 0x96
 80017ca:	0192      	lsls	r2, r2, #6
 80017cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_USART2_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_USART2_UART_Init+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_USART2_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_USART2_UART_Init+0x58>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_USART2_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_USART2_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_USART2_UART_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_USART2_UART_Init+0x58>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <MX_USART2_UART_Init+0x58>)
 8001800:	0018      	movs	r0, r3
 8001802:	f002 fea7 	bl	8004554 <HAL_UART_Init>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d001      	beq.n	800180e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800180a:	f7ff fc87 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000300 	.word	0x20000300
 8001818:	40004400 	.word	0x40004400

0800181c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b08b      	sub	sp, #44	; 0x2c
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	2414      	movs	r4, #20
 8001826:	193b      	adds	r3, r7, r4
 8001828:	0018      	movs	r0, r3
 800182a:	2314      	movs	r3, #20
 800182c:	001a      	movs	r2, r3
 800182e:	2100      	movs	r1, #0
 8001830:	f004 f8d3 	bl	80059da <memset>
  if(uartHandle->Instance==USART1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a38      	ldr	r2, [pc, #224]	; (800191c <HAL_UART_MspInit+0x100>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d133      	bne.n	80018a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_UART_MspInit+0x104>)
 8001840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_UART_MspInit+0x104>)
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	01c9      	lsls	r1, r1, #7
 8001848:	430a      	orrs	r2, r1
 800184a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	4b34      	ldr	r3, [pc, #208]	; (8001920 <HAL_UART_MspInit+0x104>)
 800184e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001850:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_UART_MspInit+0x104>)
 8001852:	2101      	movs	r1, #1
 8001854:	430a      	orrs	r2, r1
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
 8001858:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_UART_MspInit+0x104>)
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	2201      	movs	r2, #1
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001864:	193b      	adds	r3, r7, r4
 8001866:	22c0      	movs	r2, #192	; 0xc0
 8001868:	00d2      	lsls	r2, r2, #3
 800186a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	0021      	movs	r1, r4
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2202      	movs	r2, #2
 8001872:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	187b      	adds	r3, r7, r1
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	187b      	adds	r3, r7, r1
 800187c:	2203      	movs	r2, #3
 800187e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001880:	187b      	adds	r3, r7, r1
 8001882:	2204      	movs	r2, #4
 8001884:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	187a      	adds	r2, r7, r1
 8001888:	23a0      	movs	r3, #160	; 0xa0
 800188a:	05db      	lsls	r3, r3, #23
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f000 feae 	bl	80025f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	201b      	movs	r0, #27
 800189a:	f000 fdef 	bl	800247c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800189e:	201b      	movs	r0, #27
 80018a0:	f000 fe01 	bl	80024a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018a4:	e036      	b.n	8001914 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_UART_MspInit+0x108>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d131      	bne.n	8001914 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_UART_MspInit+0x104>)
 80018b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_UART_MspInit+0x104>)
 80018b6:	2180      	movs	r1, #128	; 0x80
 80018b8:	0289      	lsls	r1, r1, #10
 80018ba:	430a      	orrs	r2, r1
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_UART_MspInit+0x104>)
 80018c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_UART_MspInit+0x104>)
 80018c4:	2101      	movs	r1, #1
 80018c6:	430a      	orrs	r2, r1
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_UART_MspInit+0x104>)
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	2201      	movs	r2, #1
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d6:	2114      	movs	r1, #20
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	220c      	movs	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2202      	movs	r2, #2
 80018e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	2203      	movs	r2, #3
 80018ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2204      	movs	r2, #4
 80018f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	187a      	adds	r2, r7, r1
 80018f8:	23a0      	movs	r3, #160	; 0xa0
 80018fa:	05db      	lsls	r3, r3, #23
 80018fc:	0011      	movs	r1, r2
 80018fe:	0018      	movs	r0, r3
 8001900:	f000 fe76 	bl	80025f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	201c      	movs	r0, #28
 800190a:	f000 fdb7 	bl	800247c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800190e:	201c      	movs	r0, #28
 8001910:	f000 fdc9 	bl	80024a6 <HAL_NVIC_EnableIRQ>
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b00b      	add	sp, #44	; 0x2c
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	40013800 	.word	0x40013800
 8001920:	40021000 	.word	0x40021000
 8001924:	40004400 	.word	0x40004400

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800192a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopForever+0x6>)
  ldr r1, =_edata
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <LoopForever+0xe>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001944:	4c0b      	ldr	r4, [pc, #44]	; (8001974 <LoopForever+0x16>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001952:	f7ff fd0f 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f004 f813 	bl	8005980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff faeb 	bl	8000f34 <main>

0800195e <LoopForever>:

LoopForever:
    b LoopForever
 800195e:	e7fe      	b.n	800195e <LoopForever>
   ldr   r0, =_estack
 8001960:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800196c:	0800675c 	.word	0x0800675c
  ldr r2, =_sbss
 8001970:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001974:	20000398 	.word	0x20000398

08001978 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC1_COMP_IRQHandler>
	...

0800197c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_Init+0x3c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_Init+0x3c>)
 800198e:	2140      	movs	r1, #64	; 0x40
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001994:	2000      	movs	r0, #0
 8001996:	f000 f811 	bl	80019bc <HAL_InitTick>
 800199a:	1e03      	subs	r3, r0, #0
 800199c:	d003      	beq.n	80019a6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e001      	b.n	80019aa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019a6:	f7ff fc19 	bl	80011dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	781b      	ldrb	r3, [r3, #0]
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	40022000 	.word	0x40022000

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_InitTick+0x5c>)
 80019c6:	681c      	ldr	r4, [r3, #0]
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_InitTick+0x60>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	0019      	movs	r1, r3
 80019ce:	23fa      	movs	r3, #250	; 0xfa
 80019d0:	0098      	lsls	r0, r3, #2
 80019d2:	f7fe fbab 	bl	800012c <__udivsi3>
 80019d6:	0003      	movs	r3, r0
 80019d8:	0019      	movs	r1, r3
 80019da:	0020      	movs	r0, r4
 80019dc:	f7fe fba6 	bl	800012c <__udivsi3>
 80019e0:	0003      	movs	r3, r0
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 fd6f 	bl	80024c6 <HAL_SYSTICK_Config>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e00f      	b.n	8001a10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d80b      	bhi.n	8001a0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	2301      	movs	r3, #1
 80019fa:	425b      	negs	r3, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	0018      	movs	r0, r3
 8001a00:	f000 fd3c 	bl	800247c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_InitTick+0x64>)
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b003      	add	sp, #12
 8001a16:	bd90      	pop	{r4, r7, pc}
 8001a18:	20000010 	.word	0x20000010
 8001a1c:	20000018 	.word	0x20000018
 8001a20:	20000014 	.word	0x20000014

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_IncTick+0x1c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_IncTick+0x20>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	18d2      	adds	r2, r2, r3
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_IncTick+0x20>)
 8001a36:	601a      	str	r2, [r3, #0]
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	20000018 	.word	0x20000018
 8001a44:	20000384 	.word	0x20000384

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <HAL_GetTick+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	20000384 	.word	0x20000384

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff fff0 	bl	8001a48 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3301      	adds	r3, #1
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_Delay+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	001a      	movs	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	189b      	adds	r3, r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	f7ff ffe0 	bl	8001a48 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b004      	add	sp, #16
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	20000018 	.word	0x20000018

08001aa4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e159      	b.n	8001d6a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10a      	bne.n	8001ad4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2250      	movs	r2, #80	; 0x50
 8001ac8:	2100      	movs	r1, #0
 8001aca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f7fe ffe6 	bl	8000aa0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad8:	2210      	movs	r2, #16
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d005      	beq.n	8001aec <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001aea:	d00b      	beq.n	8001b04 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af0:	2210      	movs	r2, #16
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2250      	movs	r2, #80	; 0x50
 8001afc:	2100      	movs	r1, #0
 8001afe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e132      	b.n	8001d6a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	4a9a      	ldr	r2, [pc, #616]	; (8001d74 <HAL_ADC_Init+0x2d0>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d108      	bne.n	8001b34 <HAL_ADC_Init+0x90>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_ADC_Init+0x90>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_ADC_Init+0x92>
 8001b34:	2300      	movs	r3, #0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d149      	bne.n	8001bce <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	23c0      	movs	r3, #192	; 0xc0
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d00b      	beq.n	8001b5e <HAL_ADC_Init+0xba>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	05db      	lsls	r3, r3, #23
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d005      	beq.n	8001b5e <HAL_ADC_Init+0xba>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	061b      	lsls	r3, r3, #24
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d111      	bne.n	8001b82 <HAL_ADC_Init+0xde>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	0892      	lsrs	r2, r2, #2
 8001b6c:	611a      	str	r2, [r3, #16]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6919      	ldr	r1, [r3, #16]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	611a      	str	r2, [r3, #16]
 8001b80:	e014      	b.n	8001bac <HAL_ADC_Init+0x108>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	0892      	lsrs	r2, r2, #2
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	4b79      	ldr	r3, [pc, #484]	; (8001d78 <HAL_ADC_Init+0x2d4>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_ADC_Init+0x2d4>)
 8001b98:	4978      	ldr	r1, [pc, #480]	; (8001d7c <HAL_ADC_Init+0x2d8>)
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_ADC_Init+0x2d4>)
 8001ba0:	6819      	ldr	r1, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4b74      	ldr	r3, [pc, #464]	; (8001d78 <HAL_ADC_Init+0x2d4>)
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2118      	movs	r1, #24
 8001bb8:	438a      	bics	r2, r1
 8001bba:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68d9      	ldr	r1, [r3, #12]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001bce:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_ADC_Init+0x2d4>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b69      	ldr	r3, [pc, #420]	; (8001d78 <HAL_ADC_Init+0x2d4>)
 8001bd4:	496a      	ldr	r1, [pc, #424]	; (8001d80 <HAL_ADC_Init+0x2dc>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_ADC_Init+0x2d4>)
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be2:	065a      	lsls	r2, r3, #25
 8001be4:	4b64      	ldr	r3, [pc, #400]	; (8001d78 <HAL_ADC_Init+0x2d4>)
 8001be6:	430a      	orrs	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	055b      	lsls	r3, r3, #21
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d108      	bne.n	8001c0a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	0549      	lsls	r1, r1, #21
 8001c06:	430a      	orrs	r2, r1
 8001c08:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	495b      	ldr	r1, [pc, #364]	; (8001d84 <HAL_ADC_Init+0x2e0>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68d9      	ldr	r1, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d101      	bne.n	8001c30 <HAL_ADC_Init+0x18c>
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	e000      	b.n	8001c32 <HAL_ADC_Init+0x18e>
 8001c30:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c32:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2020      	movs	r0, #32
 8001c38:	5c1b      	ldrb	r3, [r3, r0]
 8001c3a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c3c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	202c      	movs	r0, #44	; 0x2c
 8001c42:	5c1b      	ldrb	r3, [r3, r0]
 8001c44:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c46:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c4c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001c54:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c5c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c6a:	23c2      	movs	r3, #194	; 0xc2
 8001c6c:	33ff      	adds	r3, #255	; 0xff
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d00b      	beq.n	8001c8a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68d9      	ldr	r1, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2221      	movs	r2, #33	; 0x21
 8001c8e:	5c9b      	ldrb	r3, [r3, r2]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d11a      	bne.n	8001cca <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2220      	movs	r2, #32
 8001c98:	5c9b      	ldrb	r3, [r3, r2]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0249      	lsls	r1, r1, #9
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	e00b      	b.n	8001cca <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d11f      	bne.n	8001d12 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	492a      	ldr	r1, [pc, #168]	; (8001d88 <HAL_ADC_Init+0x2e4>)
 8001cde:	400a      	ands	r2, r1
 8001ce0:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6919      	ldr	r1, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001cf0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001cf6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	611a      	str	r2, [r3, #16]
 8001d10:	e00e      	b.n	8001d30 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2107      	movs	r1, #7
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6959      	ldr	r1, [r3, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	4393      	bics	r3, r2
 8001d60:	2201      	movs	r2, #1
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b002      	add	sp, #8
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	fffffefd 	.word	0xfffffefd
 8001d78:	40012708 	.word	0x40012708
 8001d7c:	ffc3ffff 	.word	0xffc3ffff
 8001d80:	fdffffff 	.word	0xfdffffff
 8001d84:	fffe0219 	.word	0xfffe0219
 8001d88:	fffffc03 	.word	0xfffffc03

08001d8c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d94:	230f      	movs	r3, #15
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	d138      	bne.n	8001e1a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2250      	movs	r2, #80	; 0x50
 8001dac:	5c9b      	ldrb	r3, [r3, r2]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_Start+0x2a>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e038      	b.n	8001e28 <HAL_ADC_Start+0x9c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2250      	movs	r2, #80	; 0x50
 8001dba:	2101      	movs	r1, #1
 8001dbc:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d007      	beq.n	8001dd6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001dc6:	230f      	movs	r3, #15
 8001dc8:	18fc      	adds	r4, r7, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 f983 	bl	80020d8 <ADC_Enable>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dd6:	230f      	movs	r3, #15
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d120      	bne.n	8001e22 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de4:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_ADC_Start+0xa4>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	0052      	lsls	r2, r2, #1
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2250      	movs	r2, #80	; 0x50
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	221c      	movs	r2, #28
 8001e06:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2104      	movs	r1, #4
 8001e14:	430a      	orrs	r2, r1
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	e003      	b.n	8001e22 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e1a:	230f      	movs	r3, #15
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	2202      	movs	r2, #2
 8001e20:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e22:	230f      	movs	r3, #15
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	781b      	ldrb	r3, [r3, #0]
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b005      	add	sp, #20
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	fffff0fe 	.word	0xfffff0fe

08001e34 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d102      	bne.n	8001e54 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001e4e:	2308      	movs	r3, #8
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e014      	b.n	8001e7e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10b      	bne.n	8001e7a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	2220      	movs	r2, #32
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2250      	movs	r2, #80	; 0x50
 8001e72:	2100      	movs	r1, #0
 8001e74:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e072      	b.n	8001f60 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001e7a:	230c      	movs	r3, #12
 8001e7c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e7e:	f7ff fde3 	bl	8001a48 <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e86:	e01f      	b.n	8001ec8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	d01c      	beq.n	8001ec8 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_ADC_PollForConversion+0x70>
 8001e94:	f7ff fdd8 	bl	8001a48 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d211      	bcs.n	8001ec8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4013      	ands	r3, r2
 8001eae:	d10b      	bne.n	8001ec8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2250      	movs	r2, #80	; 0x50
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e04b      	b.n	8001f60 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d0d9      	beq.n	8001e88 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	0092      	lsls	r2, r2, #2
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	23c0      	movs	r3, #192	; 0xc0
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	4013      	ands	r3, r2
 8001eee:	d12e      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d129      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2208      	movs	r2, #8
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d122      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	4013      	ands	r3, r2
 8001f12:	d110      	bne.n	8001f36 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	210c      	movs	r1, #12
 8001f20:	438a      	bics	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_ADC_PollForConversion+0x134>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
 8001f34:	e00b      	b.n	8001f4e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	2201      	movs	r2, #1
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b004      	add	sp, #16
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	fffffefe 	.word	0xfffffefe

08001f6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2250      	movs	r2, #80	; 0x50
 8001f92:	5c9b      	ldrb	r3, [r3, r2]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x18>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e085      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x124>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2250      	movs	r2, #80	; 0x50
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2204      	movs	r2, #4
 8001fac:	4013      	ands	r3, r2
 8001fae:	d00b      	beq.n	8001fc8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2250      	movs	r2, #80	; 0x50
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e06f      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a38      	ldr	r2, [pc, #224]	; (80020b0 <HAL_ADC_ConfigChannel+0x12c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d035      	beq.n	800203e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	035b      	lsls	r3, r3, #13
 8001fde:	0b5a      	lsrs	r2, r3, #13
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	02db      	lsls	r3, r3, #11
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d009      	beq.n	8002008 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001ff4:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	0409      	lsls	r1, r1, #16
 8001ffe:	430a      	orrs	r2, r1
 8002000:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002002:	200a      	movs	r0, #10
 8002004:	f000 f8d0 	bl	80021a8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	4013      	ands	r3, r2
 8002012:	d006      	beq.n	8002022 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	03c9      	lsls	r1, r1, #15
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	025b      	lsls	r3, r3, #9
 800202a:	4013      	ands	r3, r2
 800202c:	d037      	beq.n	800209e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800202e:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 8002034:	2180      	movs	r1, #128	; 0x80
 8002036:	0449      	lsls	r1, r1, #17
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e02f      	b.n	800209e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	035b      	lsls	r3, r3, #13
 800204a:	0b5b      	lsrs	r3, r3, #13
 800204c:	43d9      	mvns	r1, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	400a      	ands	r2, r1
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	02db      	lsls	r3, r3, #11
 800205e:	4013      	ands	r3, r2
 8002060:	d005      	beq.n	800206e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 8002068:	4913      	ldr	r1, [pc, #76]	; (80020b8 <HAL_ADC_ConfigChannel+0x134>)
 800206a:	400a      	ands	r2, r1
 800206c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	029b      	lsls	r3, r3, #10
 8002076:	4013      	ands	r3, r2
 8002078:	d005      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <HAL_ADC_ConfigChannel+0x138>)
 8002082:	400a      	ands	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	025b      	lsls	r3, r3, #9
 800208e:	4013      	ands	r3, r2
 8002090:	d005      	beq.n	800209e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <HAL_ADC_ConfigChannel+0x130>)
 8002098:	4909      	ldr	r1, [pc, #36]	; (80020c0 <HAL_ADC_ConfigChannel+0x13c>)
 800209a:	400a      	ands	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2250      	movs	r2, #80	; 0x50
 80020a2:	2100      	movs	r1, #0
 80020a4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	00001001 	.word	0x00001001
 80020b4:	40012708 	.word	0x40012708
 80020b8:	ff7fffff 	.word	0xff7fffff
 80020bc:	ffbfffff 	.word	0xffbfffff
 80020c0:	feffffff 	.word	0xfeffffff

080020c4 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC handle state */
  return hadc->State;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2203      	movs	r2, #3
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d108      	bne.n	8002104 <ADC_Enable+0x2c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <ADC_Enable+0x2c>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <ADC_Enable+0x2e>
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d146      	bne.n	8002198 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <ADC_Enable+0xcc>)
 8002112:	4013      	ands	r3, r2
 8002114:	d00d      	beq.n	8002132 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	2210      	movs	r2, #16
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	2201      	movs	r2, #1
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e033      	b.n	800219a <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	430a      	orrs	r2, r1
 8002140:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002142:	2001      	movs	r0, #1
 8002144:	f000 f830 	bl	80021a8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002148:	f7ff fc7e 	bl	8001a48 <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002150:	e01b      	b.n	800218a <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002152:	f7ff fc79 	bl	8001a48 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b0a      	cmp	r3, #10
 800215e:	d914      	bls.n	800218a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2201      	movs	r2, #1
 8002168:	4013      	ands	r3, r2
 800216a:	2b01      	cmp	r3, #1
 800216c:	d00d      	beq.n	800218a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	2210      	movs	r2, #16
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	2201      	movs	r2, #1
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e007      	b.n	800219a <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	4013      	ands	r3, r2
 8002194:	2b01      	cmp	r3, #1
 8002196:	d1dc      	bne.n	8002152 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b004      	add	sp, #16
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	80000017 	.word	0x80000017

080021a8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <ADC_DelayMicroSecond+0x38>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	490b      	ldr	r1, [pc, #44]	; (80021e4 <ADC_DelayMicroSecond+0x3c>)
 80021b6:	0018      	movs	r0, r3
 80021b8:	f7fd ffb8 	bl	800012c <__udivsi3>
 80021bc:	0003      	movs	r3, r0
 80021be:	001a      	movs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4353      	muls	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80021c6:	e002      	b.n	80021ce <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f9      	bne.n	80021c8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	46bd      	mov	sp, r7
 80021da:	b004      	add	sp, #16
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	20000010 	.word	0x20000010
 80021e4:	000f4240 	.word	0x000f4240

080021e8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f2:	2317      	movs	r3, #23
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2250      	movs	r2, #80	; 0x50
 8002206:	5c9b      	ldrb	r3, [r3, r2]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_ADCEx_Calibration_Start+0x28>
 800220c:	2302      	movs	r3, #2
 800220e:	e083      	b.n	8002318 <HAL_ADCEx_Calibration_Start+0x130>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2250      	movs	r2, #80	; 0x50
 8002214:	2101      	movs	r1, #1
 8002216:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2203      	movs	r2, #3
 8002220:	4013      	ands	r3, r2
 8002222:	2b01      	cmp	r3, #1
 8002224:	d108      	bne.n	8002238 <HAL_ADCEx_Calibration_Start+0x50>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2201      	movs	r2, #1
 800222e:	4013      	ands	r3, r2
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_ADCEx_Calibration_Start+0x50>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_ADCEx_Calibration_Start+0x52>
 8002238:	2300      	movs	r3, #0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d15b      	bne.n	80022f6 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	4a37      	ldr	r2, [pc, #220]	; (8002320 <HAL_ADCEx_Calibration_Start+0x138>)
 8002244:	4013      	ands	r3, r2
 8002246:	2202      	movs	r2, #2
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2203      	movs	r2, #3
 8002256:	4013      	ands	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2103      	movs	r1, #3
 8002266:	438a      	bics	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	0609      	lsls	r1, r1, #24
 8002278:	430a      	orrs	r2, r1
 800227a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800227c:	f7ff fbe4 	bl	8001a48 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002284:	e01d      	b.n	80022c2 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002286:	f7ff fbdf 	bl	8001a48 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b0a      	cmp	r3, #10
 8002292:	d916      	bls.n	80022c2 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0fdb      	lsrs	r3, r3, #31
 800229c:	07da      	lsls	r2, r3, #31
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d10d      	bne.n	80022c2 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	2212      	movs	r2, #18
 80022ac:	4393      	bics	r3, r2
 80022ae:	2210      	movs	r2, #16
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2250      	movs	r2, #80	; 0x50
 80022ba:	2100      	movs	r1, #0
 80022bc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e02a      	b.n	8002318 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	0fdb      	lsrs	r3, r3, #31
 80022ca:	07da      	lsls	r2, r3, #31
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	061b      	lsls	r3, r3, #24
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d0d8      	beq.n	8002286 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68d9      	ldr	r1, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	2203      	movs	r2, #3
 80022ea:	4393      	bics	r3, r2
 80022ec:	2201      	movs	r2, #1
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54
 80022f4:	e009      	b.n	800230a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	2220      	movs	r2, #32
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8002302:	2317      	movs	r3, #23
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2250      	movs	r2, #80	; 0x50
 800230e:	2100      	movs	r1, #0
 8002310:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002312:	2317      	movs	r3, #23
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	781b      	ldrb	r3, [r3, #0]
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b006      	add	sp, #24
 800231e:	bd80      	pop	{r7, pc}
 8002320:	fffffefd 	.word	0xfffffefd

08002324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	0002      	movs	r2, r0
 800232c:	1dfb      	adds	r3, r7, #7
 800232e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b7f      	cmp	r3, #127	; 0x7f
 8002336:	d809      	bhi.n	800234c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002338:	1dfb      	adds	r3, r7, #7
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	001a      	movs	r2, r3
 800233e:	231f      	movs	r3, #31
 8002340:	401a      	ands	r2, r3
 8002342:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_EnableIRQ+0x30>)
 8002344:	2101      	movs	r1, #1
 8002346:	4091      	lsls	r1, r2
 8002348:	000a      	movs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
  }
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	0002      	movs	r2, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b7f      	cmp	r3, #127	; 0x7f
 800236c:	d828      	bhi.n	80023c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800236e:	4a2f      	ldr	r2, [pc, #188]	; (800242c <__NVIC_SetPriority+0xd4>)
 8002370:	1dfb      	adds	r3, r7, #7
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b25b      	sxtb	r3, r3
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	33c0      	adds	r3, #192	; 0xc0
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	589b      	ldr	r3, [r3, r2]
 800237e:	1dfa      	adds	r2, r7, #7
 8002380:	7812      	ldrb	r2, [r2, #0]
 8002382:	0011      	movs	r1, r2
 8002384:	2203      	movs	r2, #3
 8002386:	400a      	ands	r2, r1
 8002388:	00d2      	lsls	r2, r2, #3
 800238a:	21ff      	movs	r1, #255	; 0xff
 800238c:	4091      	lsls	r1, r2
 800238e:	000a      	movs	r2, r1
 8002390:	43d2      	mvns	r2, r2
 8002392:	401a      	ands	r2, r3
 8002394:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	019b      	lsls	r3, r3, #6
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	401a      	ands	r2, r3
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	0018      	movs	r0, r3
 80023a4:	2303      	movs	r3, #3
 80023a6:	4003      	ands	r3, r0
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <__NVIC_SetPriority+0xd4>)
 80023ae:	1dfb      	adds	r3, r7, #7
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b25b      	sxtb	r3, r3
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	430a      	orrs	r2, r1
 80023b8:	33c0      	adds	r3, #192	; 0xc0
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023be:	e031      	b.n	8002424 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c0:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <__NVIC_SetPriority+0xd8>)
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	0019      	movs	r1, r3
 80023c8:	230f      	movs	r3, #15
 80023ca:	400b      	ands	r3, r1
 80023cc:	3b08      	subs	r3, #8
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3306      	adds	r3, #6
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	3304      	adds	r3, #4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	1dfa      	adds	r2, r7, #7
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	0011      	movs	r1, r2
 80023e0:	2203      	movs	r2, #3
 80023e2:	400a      	ands	r2, r1
 80023e4:	00d2      	lsls	r2, r2, #3
 80023e6:	21ff      	movs	r1, #255	; 0xff
 80023e8:	4091      	lsls	r1, r2
 80023ea:	000a      	movs	r2, r1
 80023ec:	43d2      	mvns	r2, r2
 80023ee:	401a      	ands	r2, r3
 80023f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	22ff      	movs	r2, #255	; 0xff
 80023f8:	401a      	ands	r2, r3
 80023fa:	1dfb      	adds	r3, r7, #7
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	0018      	movs	r0, r3
 8002400:	2303      	movs	r3, #3
 8002402:	4003      	ands	r3, r0
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002408:	4809      	ldr	r0, [pc, #36]	; (8002430 <__NVIC_SetPriority+0xd8>)
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	001c      	movs	r4, r3
 8002410:	230f      	movs	r3, #15
 8002412:	4023      	ands	r3, r4
 8002414:	3b08      	subs	r3, #8
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	430a      	orrs	r2, r1
 800241a:	3306      	adds	r3, #6
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	18c3      	adds	r3, r0, r3
 8002420:	3304      	adds	r3, #4
 8002422:	601a      	str	r2, [r3, #0]
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b003      	add	sp, #12
 800242a:	bd90      	pop	{r4, r7, pc}
 800242c:	e000e100 	.word	0xe000e100
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	1e5a      	subs	r2, r3, #1
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	045b      	lsls	r3, r3, #17
 8002444:	429a      	cmp	r2, r3
 8002446:	d301      	bcc.n	800244c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002448:	2301      	movs	r3, #1
 800244a:	e010      	b.n	800246e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <SysTick_Config+0x44>)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	3a01      	subs	r2, #1
 8002452:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002454:	2301      	movs	r3, #1
 8002456:	425b      	negs	r3, r3
 8002458:	2103      	movs	r1, #3
 800245a:	0018      	movs	r0, r3
 800245c:	f7ff ff7c 	bl	8002358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <SysTick_Config+0x44>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <SysTick_Config+0x44>)
 8002468:	2207      	movs	r2, #7
 800246a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800246c:	2300      	movs	r3, #0
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	e000e010 	.word	0xe000e010

0800247c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	210f      	movs	r1, #15
 8002488:	187b      	adds	r3, r7, r1
 800248a:	1c02      	adds	r2, r0, #0
 800248c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	187b      	adds	r3, r7, r1
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b25b      	sxtb	r3, r3
 8002496:	0011      	movs	r1, r2
 8002498:	0018      	movs	r0, r3
 800249a:	f7ff ff5d 	bl	8002358 <__NVIC_SetPriority>
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b004      	add	sp, #16
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	0002      	movs	r2, r0
 80024ae:	1dfb      	adds	r3, r7, #7
 80024b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7ff ff33 	bl	8002324 <__NVIC_EnableIRQ>
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b002      	add	sp, #8
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7ff ffaf 	bl	8002434 <SysTick_Config>
 80024d6:	0003      	movs	r3, r0
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	230f      	movs	r3, #15
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2225      	movs	r2, #37	; 0x25
 80024f4:	5c9b      	ldrb	r3, [r3, r2]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d008      	beq.n	800250e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2204      	movs	r2, #4
 8002500:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2224      	movs	r2, #36	; 0x24
 8002506:	2100      	movs	r1, #0
 8002508:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e024      	b.n	8002558 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	210e      	movs	r1, #14
 800251a:	438a      	bics	r2, r1
 800251c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	438a      	bics	r2, r1
 800252c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	221c      	movs	r2, #28
 8002534:	401a      	ands	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	2101      	movs	r1, #1
 800253c:	4091      	lsls	r1, r2
 800253e:	000a      	movs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2225      	movs	r2, #37	; 0x25
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2224      	movs	r2, #36	; 0x24
 800254e:	2100      	movs	r1, #0
 8002550:	5499      	strb	r1, [r3, r2]

    return status;
 8002552:	230f      	movs	r3, #15
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b004      	add	sp, #16
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002568:	210f      	movs	r1, #15
 800256a:	187b      	adds	r3, r7, r1
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2225      	movs	r2, #37	; 0x25
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d006      	beq.n	800258a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2204      	movs	r2, #4
 8002580:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002582:	187b      	adds	r3, r7, r1
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	e02a      	b.n	80025e0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	210e      	movs	r1, #14
 8002596:	438a      	bics	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	438a      	bics	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	221c      	movs	r2, #28
 80025b0:	401a      	ands	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2101      	movs	r1, #1
 80025b8:	4091      	lsls	r1, r2
 80025ba:	000a      	movs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2225      	movs	r2, #37	; 0x25
 80025c2:	2101      	movs	r1, #1
 80025c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2224      	movs	r2, #36	; 0x24
 80025ca:	2100      	movs	r1, #0
 80025cc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	0010      	movs	r0, r2
 80025de:	4798      	blx	r3
    }
  }
  return status;
 80025e0:	230f      	movs	r3, #15
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	781b      	ldrb	r3, [r3, #0]
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b004      	add	sp, #16
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002606:	e155      	b.n	80028b4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2101      	movs	r1, #1
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4091      	lsls	r1, r2
 8002612:	000a      	movs	r2, r1
 8002614:	4013      	ands	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d100      	bne.n	8002620 <HAL_GPIO_Init+0x30>
 800261e:	e146      	b.n	80028ae <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2203      	movs	r2, #3
 8002626:	4013      	ands	r3, r2
 8002628:	2b01      	cmp	r3, #1
 800262a:	d005      	beq.n	8002638 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2203      	movs	r2, #3
 8002632:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002634:	2b02      	cmp	r3, #2
 8002636:	d130      	bne.n	800269a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	409a      	lsls	r2, r3
 8002646:	0013      	movs	r3, r2
 8002648:	43da      	mvns	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	409a      	lsls	r2, r3
 800265a:	0013      	movs	r3, r2
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266e:	2201      	movs	r2, #1
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
 8002674:	0013      	movs	r3, r2
 8002676:	43da      	mvns	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	2201      	movs	r2, #1
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
 800268c:	0013      	movs	r3, r2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2203      	movs	r2, #3
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d017      	beq.n	80026d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	409a      	lsls	r2, r3
 80026b4:	0013      	movs	r3, r2
 80026b6:	43da      	mvns	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	409a      	lsls	r2, r3
 80026c8:	0013      	movs	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2203      	movs	r2, #3
 80026dc:	4013      	ands	r3, r2
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d123      	bne.n	800272a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	08da      	lsrs	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3208      	adds	r2, #8
 80026ea:	0092      	lsls	r2, r2, #2
 80026ec:	58d3      	ldr	r3, [r2, r3]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2207      	movs	r2, #7
 80026f4:	4013      	ands	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	409a      	lsls	r2, r3
 80026fc:	0013      	movs	r3, r2
 80026fe:	43da      	mvns	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2107      	movs	r1, #7
 800270e:	400b      	ands	r3, r1
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	409a      	lsls	r2, r3
 8002714:	0013      	movs	r3, r2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	0092      	lsls	r2, r2, #2
 8002726:	6939      	ldr	r1, [r7, #16]
 8002728:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	2203      	movs	r2, #3
 8002736:	409a      	lsls	r2, r3
 8002738:	0013      	movs	r3, r2
 800273a:	43da      	mvns	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2203      	movs	r2, #3
 8002748:	401a      	ands	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	409a      	lsls	r2, r3
 8002750:	0013      	movs	r3, r2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	23c0      	movs	r3, #192	; 0xc0
 8002764:	029b      	lsls	r3, r3, #10
 8002766:	4013      	ands	r3, r2
 8002768:	d100      	bne.n	800276c <HAL_GPIO_Init+0x17c>
 800276a:	e0a0      	b.n	80028ae <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276c:	4b57      	ldr	r3, [pc, #348]	; (80028cc <HAL_GPIO_Init+0x2dc>)
 800276e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002770:	4b56      	ldr	r3, [pc, #344]	; (80028cc <HAL_GPIO_Init+0x2dc>)
 8002772:	2101      	movs	r1, #1
 8002774:	430a      	orrs	r2, r1
 8002776:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002778:	4a55      	ldr	r2, [pc, #340]	; (80028d0 <HAL_GPIO_Init+0x2e0>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	589b      	ldr	r3, [r3, r2]
 8002784:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2203      	movs	r2, #3
 800278a:	4013      	ands	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	409a      	lsls	r2, r3
 8002792:	0013      	movs	r3, r2
 8002794:	43da      	mvns	r2, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	23a0      	movs	r3, #160	; 0xa0
 80027a0:	05db      	lsls	r3, r3, #23
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d01f      	beq.n	80027e6 <HAL_GPIO_Init+0x1f6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4a      	ldr	r2, [pc, #296]	; (80028d4 <HAL_GPIO_Init+0x2e4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d019      	beq.n	80027e2 <HAL_GPIO_Init+0x1f2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a49      	ldr	r2, [pc, #292]	; (80028d8 <HAL_GPIO_Init+0x2e8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0x1ee>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a48      	ldr	r2, [pc, #288]	; (80028dc <HAL_GPIO_Init+0x2ec>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00d      	beq.n	80027da <HAL_GPIO_Init+0x1ea>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a47      	ldr	r2, [pc, #284]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_Init+0x1e6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a46      	ldr	r2, [pc, #280]	; (80028e4 <HAL_GPIO_Init+0x2f4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_GPIO_Init+0x1e2>
 80027ce:	2305      	movs	r3, #5
 80027d0:	e00a      	b.n	80027e8 <HAL_GPIO_Init+0x1f8>
 80027d2:	2306      	movs	r3, #6
 80027d4:	e008      	b.n	80027e8 <HAL_GPIO_Init+0x1f8>
 80027d6:	2304      	movs	r3, #4
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x1f8>
 80027da:	2303      	movs	r3, #3
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x1f8>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x1f8>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x1f8>
 80027e6:	2300      	movs	r3, #0
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	2103      	movs	r1, #3
 80027ec:	400a      	ands	r2, r1
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f8:	4935      	ldr	r1, [pc, #212]	; (80028d0 <HAL_GPIO_Init+0x2e0>)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002806:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <HAL_GPIO_Init+0x2f8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43da      	mvns	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	025b      	lsls	r3, r3, #9
 800281e:	4013      	ands	r3, r2
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800282a:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <HAL_GPIO_Init+0x2f8>)
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_GPIO_Init+0x2f8>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43da      	mvns	r2, r3
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	029b      	lsls	r3, r3, #10
 8002848:	4013      	ands	r3, r2
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002854:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_GPIO_Init+0x2f8>)
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_GPIO_Init+0x2f8>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43da      	mvns	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	035b      	lsls	r3, r3, #13
 8002872:	4013      	ands	r3, r2
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800287e:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_GPIO_Init+0x2f8>)
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_GPIO_Init+0x2f8>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	43da      	mvns	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	039b      	lsls	r3, r3, #14
 800289c:	4013      	ands	r3, r2
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <HAL_GPIO_Init+0x2f8>)
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3301      	adds	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	40da      	lsrs	r2, r3
 80028bc:	1e13      	subs	r3, r2, #0
 80028be:	d000      	beq.n	80028c2 <HAL_GPIO_Init+0x2d2>
 80028c0:	e6a2      	b.n	8002608 <HAL_GPIO_Init+0x18>
  }
}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b006      	add	sp, #24
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010000 	.word	0x40010000
 80028d4:	50000400 	.word	0x50000400
 80028d8:	50000800 	.word	0x50000800
 80028dc:	50000c00 	.word	0x50000c00
 80028e0:	50001000 	.word	0x50001000
 80028e4:	50001c00 	.word	0x50001c00
 80028e8:	40010400 	.word	0x40010400

080028ec <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	0008      	movs	r0, r1
 80028f6:	0011      	movs	r1, r2
 80028f8:	1cbb      	adds	r3, r7, #2
 80028fa:	1c02      	adds	r2, r0, #0
 80028fc:	801a      	strh	r2, [r3, #0]
 80028fe:	1c7b      	adds	r3, r7, #1
 8002900:	1c0a      	adds	r2, r1, #0
 8002902:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002904:	1c7b      	adds	r3, r7, #1
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d004      	beq.n	8002916 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800290c:	1cbb      	adds	r3, r7, #2
 800290e:	881a      	ldrh	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002914:	e003      	b.n	800291e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002916:	1cbb      	adds	r3, r7, #2
 8002918:	881a      	ldrh	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b002      	add	sp, #8
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	f000 fbbf 	bl	80030ba <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800293c:	4bc9      	ldr	r3, [pc, #804]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	220c      	movs	r2, #12
 8002942:	4013      	ands	r3, r2
 8002944:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002946:	4bc7      	ldr	r3, [pc, #796]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	025b      	lsls	r3, r3, #9
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	4013      	ands	r3, r2
 800295a:	d100      	bne.n	800295e <HAL_RCC_OscConfig+0x36>
 800295c:	e07e      	b.n	8002a5c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	2b08      	cmp	r3, #8
 8002962:	d007      	beq.n	8002974 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d112      	bne.n	8002990 <HAL_RCC_OscConfig+0x68>
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	025b      	lsls	r3, r3, #9
 8002970:	429a      	cmp	r2, r3
 8002972:	d10d      	bne.n	8002990 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	4bbb      	ldr	r3, [pc, #748]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	029b      	lsls	r3, r3, #10
 800297c:	4013      	ands	r3, r2
 800297e:	d100      	bne.n	8002982 <HAL_RCC_OscConfig+0x5a>
 8002980:	e06b      	b.n	8002a5a <HAL_RCC_OscConfig+0x132>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d167      	bne.n	8002a5a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f000 fb95 	bl	80030ba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	025b      	lsls	r3, r3, #9
 8002998:	429a      	cmp	r2, r3
 800299a:	d107      	bne.n	80029ac <HAL_RCC_OscConfig+0x84>
 800299c:	4bb1      	ldr	r3, [pc, #708]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4bb0      	ldr	r3, [pc, #704]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 80029a2:	2180      	movs	r1, #128	; 0x80
 80029a4:	0249      	lsls	r1, r1, #9
 80029a6:	430a      	orrs	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e027      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	23a0      	movs	r3, #160	; 0xa0
 80029b2:	02db      	lsls	r3, r3, #11
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d10e      	bne.n	80029d6 <HAL_RCC_OscConfig+0xae>
 80029b8:	4baa      	ldr	r3, [pc, #680]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4ba9      	ldr	r3, [pc, #676]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 80029be:	2180      	movs	r1, #128	; 0x80
 80029c0:	02c9      	lsls	r1, r1, #11
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	4ba7      	ldr	r3, [pc, #668]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4ba6      	ldr	r3, [pc, #664]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	0249      	lsls	r1, r1, #9
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e012      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029d6:	4ba3      	ldr	r3, [pc, #652]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4ba2      	ldr	r3, [pc, #648]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 80029dc:	49a2      	ldr	r1, [pc, #648]	; (8002c68 <HAL_RCC_OscConfig+0x340>)
 80029de:	400a      	ands	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	4ba0      	ldr	r3, [pc, #640]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	025b      	lsls	r3, r3, #9
 80029ea:	4013      	ands	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4b9c      	ldr	r3, [pc, #624]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b9b      	ldr	r3, [pc, #620]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 80029f6:	499d      	ldr	r1, [pc, #628]	; (8002c6c <HAL_RCC_OscConfig+0x344>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d015      	beq.n	8002a30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7ff f820 	bl	8001a48 <HAL_GetTick>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a0c:	e009      	b.n	8002a22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0e:	f7ff f81b 	bl	8001a48 <HAL_GetTick>
 8002a12:	0002      	movs	r2, r0
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b64      	cmp	r3, #100	; 0x64
 8002a1a:	d902      	bls.n	8002a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	f000 fb4c 	bl	80030ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a22:	4b90      	ldr	r3, [pc, #576]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	029b      	lsls	r3, r3, #10
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d0ef      	beq.n	8002a0e <HAL_RCC_OscConfig+0xe6>
 8002a2e:	e015      	b.n	8002a5c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff f80a 	bl	8001a48 <HAL_GetTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3a:	f7ff f805 	bl	8001a48 <HAL_GetTick>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	; 0x64
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e336      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a4c:	4b85      	ldr	r3, [pc, #532]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	029b      	lsls	r3, r3, #10
 8002a54:	4013      	ands	r3, r2
 8002a56:	d1f0      	bne.n	8002a3a <HAL_RCC_OscConfig+0x112>
 8002a58:	e000      	b.n	8002a5c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2202      	movs	r2, #2
 8002a62:	4013      	ands	r3, r2
 8002a64:	d100      	bne.n	8002a68 <HAL_RCC_OscConfig+0x140>
 8002a66:	e099      	b.n	8002b9c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	2220      	movs	r2, #32
 8002a72:	4013      	ands	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002a76:	4b7b      	ldr	r3, [pc, #492]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b7a      	ldr	r3, [pc, #488]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002a7c:	2120      	movs	r1, #32
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	2220      	movs	r2, #32
 8002a86:	4393      	bics	r3, r2
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b0c      	cmp	r3, #12
 8002a94:	d13e      	bne.n	8002b14 <HAL_RCC_OscConfig+0x1ec>
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d13b      	bne.n	8002b14 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002a9c:	4b71      	ldr	r3, [pc, #452]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x188>
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e304      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b6c      	ldr	r3, [pc, #432]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a6e      	ldr	r2, [pc, #440]	; (8002c70 <HAL_RCC_OscConfig+0x348>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	0019      	movs	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	021a      	lsls	r2, r3, #8
 8002ac0:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ac6:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2209      	movs	r2, #9
 8002acc:	4393      	bics	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	4b64      	ldr	r3, [pc, #400]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ad8:	f000 fc42 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 8002adc:	0001      	movs	r1, r0
 8002ade:	4b61      	ldr	r3, [pc, #388]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	4a62      	ldr	r2, [pc, #392]	; (8002c74 <HAL_RCC_OscConfig+0x34c>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	000a      	movs	r2, r1
 8002aee:	40da      	lsrs	r2, r3
 8002af0:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <HAL_RCC_OscConfig+0x350>)
 8002af2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002af4:	4b61      	ldr	r3, [pc, #388]	; (8002c7c <HAL_RCC_OscConfig+0x354>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2513      	movs	r5, #19
 8002afa:	197c      	adds	r4, r7, r5
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7fe ff5d 	bl	80019bc <HAL_InitTick>
 8002b02:	0003      	movs	r3, r0
 8002b04:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002b06:	197b      	adds	r3, r7, r5
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d046      	beq.n	8002b9c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002b0e:	197b      	adds	r3, r7, r5
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	e2d2      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d027      	beq.n	8002b6a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b1a:	4b52      	ldr	r3, [pc, #328]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2209      	movs	r2, #9
 8002b20:	4393      	bics	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	4b4f      	ldr	r3, [pc, #316]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe ff8c 	bl	8001a48 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe ff87 	bl	8001a48 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e2b8      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b48:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d0f1      	beq.n	8002b36 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b44      	ldr	r3, [pc, #272]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a46      	ldr	r2, [pc, #280]	; (8002c70 <HAL_RCC_OscConfig+0x348>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	021a      	lsls	r2, r3, #8
 8002b62:	4b40      	ldr	r3, [pc, #256]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	e018      	b.n	8002b9c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002b70:	2101      	movs	r1, #1
 8002b72:	438a      	bics	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe ff67 	bl	8001a48 <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b80:	f7fe ff62 	bl	8001a48 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e293      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b92:	4b34      	ldr	r3, [pc, #208]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2204      	movs	r2, #4
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d1f1      	bne.n	8002b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d100      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x280>
 8002ba6:	e0a2      	b.n	8002cee <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d140      	bne.n	8002c30 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bae:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x29e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e279      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc6:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4a2d      	ldr	r2, [pc, #180]	; (8002c80 <HAL_RCC_OscConfig+0x358>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd4:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	0a19      	lsrs	r1, r3, #8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	061a      	lsls	r2, r3, #24
 8002be8:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	0b5b      	lsrs	r3, r3, #13
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	0212      	lsls	r2, r2, #8
 8002bfa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	210f      	movs	r1, #15
 8002c04:	400b      	ands	r3, r1
 8002c06:	491b      	ldr	r1, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x34c>)
 8002c08:	5ccb      	ldrb	r3, [r1, r3]
 8002c0a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_RCC_OscConfig+0x350>)
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_RCC_OscConfig+0x354>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2513      	movs	r5, #19
 8002c16:	197c      	adds	r4, r7, r5
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7fe fecf 	bl	80019bc <HAL_InitTick>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002c22:	197b      	adds	r3, r7, r5
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d061      	beq.n	8002cee <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002c2a:	197b      	adds	r3, r7, r5
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	e244      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d040      	beq.n	8002cba <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_OscConfig+0x33c>)
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	0049      	lsls	r1, r1, #1
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7fe feff 	bl	8001a48 <HAL_GetTick>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c4e:	e019      	b.n	8002c84 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c50:	f7fe fefa 	bl	8001a48 <HAL_GetTick>
 8002c54:	0002      	movs	r2, r0
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d912      	bls.n	8002c84 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e22b      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	40021000 	.word	0x40021000
 8002c68:	fffeffff 	.word	0xfffeffff
 8002c6c:	fffbffff 	.word	0xfffbffff
 8002c70:	ffffe0ff 	.word	0xffffe0ff
 8002c74:	080065ac 	.word	0x080065ac
 8002c78:	20000010 	.word	0x20000010
 8002c7c:	20000014 	.word	0x20000014
 8002c80:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c84:	4bca      	ldr	r3, [pc, #808]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d0df      	beq.n	8002c50 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c90:	4bc7      	ldr	r3, [pc, #796]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4ac7      	ldr	r2, [pc, #796]	; (8002fb4 <HAL_RCC_OscConfig+0x68c>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9e:	4bc4      	ldr	r3, [pc, #784]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca4:	4bc2      	ldr	r3, [pc, #776]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	0a19      	lsrs	r1, r3, #8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	061a      	lsls	r2, r3, #24
 8002cb2:	4bbf      	ldr	r3, [pc, #764]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
 8002cb8:	e019      	b.n	8002cee <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cba:	4bbd      	ldr	r3, [pc, #756]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4bbc      	ldr	r3, [pc, #752]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002cc0:	49bd      	ldr	r1, [pc, #756]	; (8002fb8 <HAL_RCC_OscConfig+0x690>)
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fe febf 	bl	8001a48 <HAL_GetTick>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cd0:	f7fe feba 	bl	8001a48 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1eb      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ce2:	4bb3      	ldr	r3, [pc, #716]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4013      	ands	r3, r2
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d036      	beq.n	8002d66 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d019      	beq.n	8002d34 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d00:	4bab      	ldr	r3, [pc, #684]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d04:	4baa      	ldr	r3, [pc, #680]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002d06:	2101      	movs	r1, #1
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0c:	f7fe fe9c 	bl	8001a48 <HAL_GetTick>
 8002d10:	0003      	movs	r3, r0
 8002d12:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d16:	f7fe fe97 	bl	8001a48 <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e1c8      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d28:	4ba1      	ldr	r3, [pc, #644]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d0f1      	beq.n	8002d16 <HAL_RCC_OscConfig+0x3ee>
 8002d32:	e018      	b.n	8002d66 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d34:	4b9e      	ldr	r3, [pc, #632]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d38:	4b9d      	ldr	r3, [pc, #628]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d40:	f7fe fe82 	bl	8001a48 <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fe7d 	bl	8001a48 <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e1ae      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d5c:	4b94      	ldr	r3, [pc, #592]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	d1f1      	bne.n	8002d4a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d100      	bne.n	8002d72 <HAL_RCC_OscConfig+0x44a>
 8002d70:	e0ae      	b.n	8002ed0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d72:	2023      	movs	r0, #35	; 0x23
 8002d74:	183b      	adds	r3, r7, r0
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7a:	4b8d      	ldr	r3, [pc, #564]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	055b      	lsls	r3, r3, #21
 8002d82:	4013      	ands	r3, r2
 8002d84:	d109      	bne.n	8002d9a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	4b8a      	ldr	r3, [pc, #552]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8a:	4b89      	ldr	r3, [pc, #548]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	0549      	lsls	r1, r1, #21
 8002d90:	430a      	orrs	r2, r1
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d94:	183b      	adds	r3, r7, r0
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9a:	4b88      	ldr	r3, [pc, #544]	; (8002fbc <HAL_RCC_OscConfig+0x694>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4013      	ands	r3, r2
 8002da4:	d11a      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da6:	4b85      	ldr	r3, [pc, #532]	; (8002fbc <HAL_RCC_OscConfig+0x694>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b84      	ldr	r3, [pc, #528]	; (8002fbc <HAL_RCC_OscConfig+0x694>)
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	0049      	lsls	r1, r1, #1
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db4:	f7fe fe48 	bl	8001a48 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbe:	f7fe fe43 	bl	8001a48 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	; 0x64
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e174      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	4b7a      	ldr	r3, [pc, #488]	; (8002fbc <HAL_RCC_OscConfig+0x694>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4d0>
 8002de8:	4b71      	ldr	r3, [pc, #452]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002dea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dec:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002dee:	2180      	movs	r1, #128	; 0x80
 8002df0:	0049      	lsls	r1, r1, #1
 8002df2:	430a      	orrs	r2, r1
 8002df4:	651a      	str	r2, [r3, #80]	; 0x50
 8002df6:	e031      	b.n	8002e5c <HAL_RCC_OscConfig+0x534>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RCC_OscConfig+0x4f2>
 8002e00:	4b6b      	ldr	r3, [pc, #428]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e04:	4b6a      	ldr	r3, [pc, #424]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e06:	496c      	ldr	r1, [pc, #432]	; (8002fb8 <HAL_RCC_OscConfig+0x690>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	651a      	str	r2, [r3, #80]	; 0x50
 8002e0c:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e10:	4b67      	ldr	r3, [pc, #412]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e12:	496b      	ldr	r1, [pc, #428]	; (8002fc0 <HAL_RCC_OscConfig+0x698>)
 8002e14:	400a      	ands	r2, r1
 8002e16:	651a      	str	r2, [r3, #80]	; 0x50
 8002e18:	e020      	b.n	8002e5c <HAL_RCC_OscConfig+0x534>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	23a0      	movs	r3, #160	; 0xa0
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d10e      	bne.n	8002e44 <HAL_RCC_OscConfig+0x51c>
 8002e26:	4b62      	ldr	r3, [pc, #392]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e2a:	4b61      	ldr	r3, [pc, #388]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	00c9      	lsls	r1, r1, #3
 8002e30:	430a      	orrs	r2, r1
 8002e32:	651a      	str	r2, [r3, #80]	; 0x50
 8002e34:	4b5e      	ldr	r3, [pc, #376]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e38:	4b5d      	ldr	r3, [pc, #372]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e3a:	2180      	movs	r1, #128	; 0x80
 8002e3c:	0049      	lsls	r1, r1, #1
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	651a      	str	r2, [r3, #80]	; 0x50
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0x534>
 8002e44:	4b5a      	ldr	r3, [pc, #360]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e48:	4b59      	ldr	r3, [pc, #356]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e4a:	495b      	ldr	r1, [pc, #364]	; (8002fb8 <HAL_RCC_OscConfig+0x690>)
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	651a      	str	r2, [r3, #80]	; 0x50
 8002e50:	4b57      	ldr	r3, [pc, #348]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e54:	4b56      	ldr	r3, [pc, #344]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e56:	495a      	ldr	r1, [pc, #360]	; (8002fc0 <HAL_RCC_OscConfig+0x698>)
 8002e58:	400a      	ands	r2, r1
 8002e5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d015      	beq.n	8002e90 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fdf0 	bl	8001a48 <HAL_GetTick>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e6c:	e009      	b.n	8002e82 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe fdeb 	bl	8001a48 <HAL_GetTick>
 8002e72:	0002      	movs	r2, r0
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	4a52      	ldr	r2, [pc, #328]	; (8002fc4 <HAL_RCC_OscConfig+0x69c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e11b      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e82:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002e84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d0ef      	beq.n	8002e6e <HAL_RCC_OscConfig+0x546>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e90:	f7fe fdda 	bl	8001a48 <HAL_GetTick>
 8002e94:	0003      	movs	r3, r0
 8002e96:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e98:	e009      	b.n	8002eae <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe fdd5 	bl	8001a48 <HAL_GetTick>
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	4a47      	ldr	r2, [pc, #284]	; (8002fc4 <HAL_RCC_OscConfig+0x69c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e105      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eae:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d1ef      	bne.n	8002e9a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eba:	2323      	movs	r3, #35	; 0x23
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec4:	4b3a      	ldr	r3, [pc, #232]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec8:	4b39      	ldr	r3, [pc, #228]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002eca:	493f      	ldr	r1, [pc, #252]	; (8002fc8 <HAL_RCC_OscConfig+0x6a0>)
 8002ecc:	400a      	ands	r2, r1
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d049      	beq.n	8002f6e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d026      	beq.n	8002f30 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002ee2:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8002efa:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_RCC_OscConfig+0x6a4>)
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	4b33      	ldr	r3, [pc, #204]	; (8002fcc <HAL_RCC_OscConfig+0x6a4>)
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	0189      	lsls	r1, r1, #6
 8002f04:	430a      	orrs	r2, r1
 8002f06:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe fd9e 	bl	8001a48 <HAL_GetTick>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f12:	f7fe fd99 	bl	8001a48 <HAL_GetTick>
 8002f16:	0002      	movs	r2, r0
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0ca      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f24:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d0f1      	beq.n	8002f12 <HAL_RCC_OscConfig+0x5ea>
 8002f2e:	e01e      	b.n	8002f6e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002f30:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002f36:	2101      	movs	r1, #1
 8002f38:	438a      	bics	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	4b23      	ldr	r3, [pc, #140]	; (8002fcc <HAL_RCC_OscConfig+0x6a4>)
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_RCC_OscConfig+0x6a4>)
 8002f42:	4923      	ldr	r1, [pc, #140]	; (8002fd0 <HAL_RCC_OscConfig+0x6a8>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe fd7e 	bl	8001a48 <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f52:	f7fe fd79 	bl	8001a48 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0aa      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d1f1      	bne.n	8002f52 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d100      	bne.n	8002f78 <HAL_RCC_OscConfig+0x650>
 8002f76:	e09f      	b.n	80030b8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d100      	bne.n	8002f80 <HAL_RCC_OscConfig+0x658>
 8002f7e:	e078      	b.n	8003072 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d159      	bne.n	800303c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <HAL_RCC_OscConfig+0x688>)
 8002f8e:	4911      	ldr	r1, [pc, #68]	; (8002fd4 <HAL_RCC_OscConfig+0x6ac>)
 8002f90:	400a      	ands	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe fd58 	bl	8001a48 <HAL_GetTick>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f9c:	e01c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fe fd53 	bl	8001a48 <HAL_GetTick>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d915      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e084      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	ffff1fff 	.word	0xffff1fff
 8002fb8:	fffffeff 	.word	0xfffffeff
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	fffffbff 	.word	0xfffffbff
 8002fc4:	00001388 	.word	0x00001388
 8002fc8:	efffffff 	.word	0xefffffff
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	ffffdfff 	.word	0xffffdfff
 8002fd4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fd8:	4b3a      	ldr	r3, [pc, #232]	; (80030c4 <HAL_RCC_OscConfig+0x79c>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	049b      	lsls	r3, r3, #18
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d1dc      	bne.n	8002f9e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe4:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <HAL_RCC_OscConfig+0x79c>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a37      	ldr	r2, [pc, #220]	; (80030c8 <HAL_RCC_OscConfig+0x7a0>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <HAL_RCC_OscConfig+0x79c>)
 8003000:	430a      	orrs	r2, r1
 8003002:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <HAL_RCC_OscConfig+0x79c>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <HAL_RCC_OscConfig+0x79c>)
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	0449      	lsls	r1, r1, #17
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe fd19 	bl	8001a48 <HAL_GetTick>
 8003016:	0003      	movs	r3, r0
 8003018:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe fd14 	bl	8001a48 <HAL_GetTick>
 8003020:	0002      	movs	r2, r0
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e045      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800302e:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_RCC_OscConfig+0x79c>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	049b      	lsls	r3, r3, #18
 8003036:	4013      	ands	r3, r2
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x6f4>
 800303a:	e03d      	b.n	80030b8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <HAL_RCC_OscConfig+0x79c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <HAL_RCC_OscConfig+0x79c>)
 8003042:	4922      	ldr	r1, [pc, #136]	; (80030cc <HAL_RCC_OscConfig+0x7a4>)
 8003044:	400a      	ands	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7fe fcfe 	bl	8001a48 <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003052:	f7fe fcf9 	bl	8001a48 <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e02a      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003064:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <HAL_RCC_OscConfig+0x79c>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	049b      	lsls	r3, r3, #18
 800306c:	4013      	ands	r3, r2
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x72a>
 8003070:	e022      	b.n	80030b8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e01d      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_RCC_OscConfig+0x79c>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	025b      	lsls	r3, r3, #9
 800308a:	401a      	ands	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	429a      	cmp	r2, r3
 8003092:	d10f      	bne.n	80030b4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	23f0      	movs	r3, #240	; 0xf0
 8003098:	039b      	lsls	r3, r3, #14
 800309a:	401a      	ands	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	23c0      	movs	r3, #192	; 0xc0
 80030a8:	041b      	lsls	r3, r3, #16
 80030aa:	401a      	ands	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b00a      	add	sp, #40	; 0x28
 80030c0:	bdb0      	pop	{r4, r5, r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	40021000 	.word	0x40021000
 80030c8:	ff02ffff 	.word	0xff02ffff
 80030cc:	feffffff 	.word	0xfeffffff

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b5b0      	push	{r4, r5, r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e128      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b96      	ldr	r3, [pc, #600]	; (8003340 <HAL_RCC_ClockConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2201      	movs	r2, #1
 80030ea:	4013      	ands	r3, r2
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d91e      	bls.n	8003130 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b93      	ldr	r3, [pc, #588]	; (8003340 <HAL_RCC_ClockConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2201      	movs	r2, #1
 80030f8:	4393      	bics	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	4b90      	ldr	r3, [pc, #576]	; (8003340 <HAL_RCC_ClockConfig+0x270>)
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003104:	f7fe fca0 	bl	8001a48 <HAL_GetTick>
 8003108:	0003      	movs	r3, r0
 800310a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310c:	e009      	b.n	8003122 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310e:	f7fe fc9b 	bl	8001a48 <HAL_GetTick>
 8003112:	0002      	movs	r2, r0
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	4a8a      	ldr	r2, [pc, #552]	; (8003344 <HAL_RCC_ClockConfig+0x274>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e109      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b87      	ldr	r3, [pc, #540]	; (8003340 <HAL_RCC_ClockConfig+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2201      	movs	r2, #1
 8003128:	4013      	ands	r3, r2
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d1ee      	bne.n	800310e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2202      	movs	r2, #2
 8003136:	4013      	ands	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313a:	4b83      	ldr	r3, [pc, #524]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	22f0      	movs	r2, #240	; 0xf0
 8003140:	4393      	bics	r3, r2
 8003142:	0019      	movs	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	4b7f      	ldr	r3, [pc, #508]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 800314a:	430a      	orrs	r2, r1
 800314c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2201      	movs	r2, #1
 8003154:	4013      	ands	r3, r2
 8003156:	d100      	bne.n	800315a <HAL_RCC_ClockConfig+0x8a>
 8003158:	e089      	b.n	800326e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003162:	4b79      	ldr	r3, [pc, #484]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	029b      	lsls	r3, r3, #10
 800316a:	4013      	ands	r3, r2
 800316c:	d120      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0e1      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b03      	cmp	r3, #3
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800317a:	4b73      	ldr	r3, [pc, #460]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	049b      	lsls	r3, r3, #18
 8003182:	4013      	ands	r3, r2
 8003184:	d114      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0d5      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d106      	bne.n	80031a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003192:	4b6d      	ldr	r3, [pc, #436]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2204      	movs	r2, #4
 8003198:	4013      	ands	r3, r2
 800319a:	d109      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0ca      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031a0:	4b69      	ldr	r3, [pc, #420]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0c2      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b0:	4b65      	ldr	r3, [pc, #404]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2203      	movs	r2, #3
 80031b6:	4393      	bics	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	4b62      	ldr	r3, [pc, #392]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c4:	f7fe fc40 	bl	8001a48 <HAL_GetTick>
 80031c8:	0003      	movs	r3, r0
 80031ca:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d111      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031d4:	e009      	b.n	80031ea <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d6:	f7fe fc37 	bl	8001a48 <HAL_GetTick>
 80031da:	0002      	movs	r2, r0
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_RCC_ClockConfig+0x274>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0a5      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ea:	4b57      	ldr	r3, [pc, #348]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	220c      	movs	r2, #12
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d1ef      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x106>
 80031f6:	e03a      	b.n	800326e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d111      	bne.n	8003224 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003200:	e009      	b.n	8003216 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003202:	f7fe fc21 	bl	8001a48 <HAL_GetTick>
 8003206:	0002      	movs	r2, r0
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	4a4d      	ldr	r2, [pc, #308]	; (8003344 <HAL_RCC_ClockConfig+0x274>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e08f      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003216:	4b4c      	ldr	r3, [pc, #304]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	220c      	movs	r2, #12
 800321c:	4013      	ands	r3, r2
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d1ef      	bne.n	8003202 <HAL_RCC_ClockConfig+0x132>
 8003222:	e024      	b.n	800326e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d11b      	bne.n	8003264 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800322c:	e009      	b.n	8003242 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322e:	f7fe fc0b 	bl	8001a48 <HAL_GetTick>
 8003232:	0002      	movs	r2, r0
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	4a42      	ldr	r2, [pc, #264]	; (8003344 <HAL_RCC_ClockConfig+0x274>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e079      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003242:	4b41      	ldr	r3, [pc, #260]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	220c      	movs	r2, #12
 8003248:	4013      	ands	r3, r2
 800324a:	2b04      	cmp	r3, #4
 800324c:	d1ef      	bne.n	800322e <HAL_RCC_ClockConfig+0x15e>
 800324e:	e00e      	b.n	800326e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fe fbfa 	bl	8001a48 <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	4a3a      	ldr	r2, [pc, #232]	; (8003344 <HAL_RCC_ClockConfig+0x274>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e068      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003264:	4b38      	ldr	r3, [pc, #224]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	220c      	movs	r2, #12
 800326a:	4013      	ands	r3, r2
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800326e:	4b34      	ldr	r3, [pc, #208]	; (8003340 <HAL_RCC_ClockConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2201      	movs	r2, #1
 8003274:	4013      	ands	r3, r2
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d21e      	bcs.n	80032ba <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327c:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_RCC_ClockConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2201      	movs	r2, #1
 8003282:	4393      	bics	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	4b2e      	ldr	r3, [pc, #184]	; (8003340 <HAL_RCC_ClockConfig+0x270>)
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800328e:	f7fe fbdb 	bl	8001a48 <HAL_GetTick>
 8003292:	0003      	movs	r3, r0
 8003294:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	e009      	b.n	80032ac <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003298:	f7fe fbd6 	bl	8001a48 <HAL_GetTick>
 800329c:	0002      	movs	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	4a28      	ldr	r2, [pc, #160]	; (8003344 <HAL_RCC_ClockConfig+0x274>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e044      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ac:	4b24      	ldr	r3, [pc, #144]	; (8003340 <HAL_RCC_ClockConfig+0x270>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2201      	movs	r2, #1
 80032b2:	4013      	ands	r3, r2
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d1ee      	bne.n	8003298 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2204      	movs	r2, #4
 80032c0:	4013      	ands	r3, r2
 80032c2:	d009      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a20      	ldr	r2, [pc, #128]	; (800334c <HAL_RCC_ClockConfig+0x27c>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	0019      	movs	r1, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2208      	movs	r2, #8
 80032de:	4013      	ands	r3, r2
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032e2:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4a1a      	ldr	r2, [pc, #104]	; (8003350 <HAL_RCC_ClockConfig+0x280>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	0019      	movs	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	00da      	lsls	r2, r3, #3
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 80032f4:	430a      	orrs	r2, r1
 80032f6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032f8:	f000 f832 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 80032fc:	0001      	movs	r1, r0
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_RCC_ClockConfig+0x278>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	220f      	movs	r2, #15
 8003306:	4013      	ands	r3, r2
 8003308:	4a12      	ldr	r2, [pc, #72]	; (8003354 <HAL_RCC_ClockConfig+0x284>)
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	000a      	movs	r2, r1
 800330e:	40da      	lsrs	r2, r3
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_RCC_ClockConfig+0x288>)
 8003312:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_RCC_ClockConfig+0x28c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	250b      	movs	r5, #11
 800331a:	197c      	adds	r4, r7, r5
 800331c:	0018      	movs	r0, r3
 800331e:	f7fe fb4d 	bl	80019bc <HAL_InitTick>
 8003322:	0003      	movs	r3, r0
 8003324:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003326:	197b      	adds	r3, r7, r5
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800332e:	197b      	adds	r3, r7, r5
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	e000      	b.n	8003336 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b004      	add	sp, #16
 800333c:	bdb0      	pop	{r4, r5, r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	40022000 	.word	0x40022000
 8003344:	00001388 	.word	0x00001388
 8003348:	40021000 	.word	0x40021000
 800334c:	fffff8ff 	.word	0xfffff8ff
 8003350:	ffffc7ff 	.word	0xffffc7ff
 8003354:	080065ac 	.word	0x080065ac
 8003358:	20000010 	.word	0x20000010
 800335c:	20000014 	.word	0x20000014

08003360 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	b5b0      	push	{r4, r5, r7, lr}
 8003362:	b08e      	sub	sp, #56	; 0x38
 8003364:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003366:	4b4c      	ldr	r3, [pc, #304]	; (8003498 <HAL_RCC_GetSysClockFreq+0x138>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800336c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336e:	230c      	movs	r3, #12
 8003370:	4013      	ands	r3, r2
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d014      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003376:	d900      	bls.n	800337a <HAL_RCC_GetSysClockFreq+0x1a>
 8003378:	e07b      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x112>
 800337a:	2b04      	cmp	r3, #4
 800337c:	d002      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x24>
 800337e:	2b08      	cmp	r3, #8
 8003380:	d00b      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x3a>
 8003382:	e076      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003384:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_RCC_GetSysClockFreq+0x138>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2210      	movs	r2, #16
 800338a:	4013      	ands	r3, r2
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800338e:	4b43      	ldr	r3, [pc, #268]	; (800349c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003392:	e07c      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003394:	4b42      	ldr	r3, [pc, #264]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003398:	e079      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b42      	ldr	r3, [pc, #264]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x144>)
 800339c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800339e:	e076      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	0c9a      	lsrs	r2, r3, #18
 80033a4:	230f      	movs	r3, #15
 80033a6:	401a      	ands	r2, r3
 80033a8:	4b3f      	ldr	r3, [pc, #252]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x148>)
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	0d9a      	lsrs	r2, r3, #22
 80033b2:	2303      	movs	r3, #3
 80033b4:	4013      	ands	r3, r2
 80033b6:	3301      	adds	r3, #1
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ba:	4b37      	ldr	r3, [pc, #220]	; (8003498 <HAL_RCC_GetSysClockFreq+0x138>)
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	025b      	lsls	r3, r3, #9
 80033c2:	4013      	ands	r3, r2
 80033c4:	d01a      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	4a35      	ldr	r2, [pc, #212]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x144>)
 80033d0:	2300      	movs	r3, #0
 80033d2:	69b8      	ldr	r0, [r7, #24]
 80033d4:	69f9      	ldr	r1, [r7, #28]
 80033d6:	f7fc ff55 	bl	8000284 <__aeabi_lmul>
 80033da:	0002      	movs	r2, r0
 80033dc:	000b      	movs	r3, r1
 80033de:	0010      	movs	r0, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f7fc ff29 	bl	8000244 <__aeabi_uldivmod>
 80033f2:	0002      	movs	r2, r0
 80033f4:	000b      	movs	r3, r1
 80033f6:	0013      	movs	r3, r2
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
 80033fa:	e037      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80033fc:	4b26      	ldr	r3, [pc, #152]	; (8003498 <HAL_RCC_GetSysClockFreq+0x138>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2210      	movs	r2, #16
 8003402:	4013      	ands	r3, r2
 8003404:	d01a      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4a23      	ldr	r2, [pc, #140]	; (800349c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003410:	2300      	movs	r3, #0
 8003412:	68b8      	ldr	r0, [r7, #8]
 8003414:	68f9      	ldr	r1, [r7, #12]
 8003416:	f7fc ff35 	bl	8000284 <__aeabi_lmul>
 800341a:	0002      	movs	r2, r0
 800341c:	000b      	movs	r3, r1
 800341e:	0010      	movs	r0, r2
 8003420:	0019      	movs	r1, r3
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f7fc ff09 	bl	8000244 <__aeabi_uldivmod>
 8003432:	0002      	movs	r2, r0
 8003434:	000b      	movs	r3, r1
 8003436:	0013      	movs	r3, r2
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
 800343a:	e017      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	0018      	movs	r0, r3
 8003440:	2300      	movs	r3, #0
 8003442:	0019      	movs	r1, r3
 8003444:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003446:	2300      	movs	r3, #0
 8003448:	f7fc ff1c 	bl	8000284 <__aeabi_lmul>
 800344c:	0002      	movs	r2, r0
 800344e:	000b      	movs	r3, r1
 8003450:	0010      	movs	r0, r2
 8003452:	0019      	movs	r1, r3
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	001c      	movs	r4, r3
 8003458:	2300      	movs	r3, #0
 800345a:	001d      	movs	r5, r3
 800345c:	0022      	movs	r2, r4
 800345e:	002b      	movs	r3, r5
 8003460:	f7fc fef0 	bl	8000244 <__aeabi_uldivmod>
 8003464:	0002      	movs	r2, r0
 8003466:	000b      	movs	r3, r1
 8003468:	0013      	movs	r3, r2
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800346c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003470:	e00d      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_GetSysClockFreq+0x138>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0b5b      	lsrs	r3, r3, #13
 8003478:	2207      	movs	r2, #7
 800347a:	4013      	ands	r3, r2
 800347c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	3301      	adds	r3, #1
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	0212      	lsls	r2, r2, #8
 8003486:	409a      	lsls	r2, r3
 8003488:	0013      	movs	r3, r2
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800348c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b00e      	add	sp, #56	; 0x38
 8003496:	bdb0      	pop	{r4, r5, r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	003d0900 	.word	0x003d0900
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	007a1200 	.word	0x007a1200
 80034a8:	080065c4 	.word	0x080065c4

080034ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b0:	4b02      	ldr	r3, [pc, #8]	; (80034bc <HAL_RCC_GetHCLKFreq+0x10>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	20000010 	.word	0x20000010

080034c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c4:	f7ff fff2 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034c8:	0001      	movs	r1, r0
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	2207      	movs	r2, #7
 80034d2:	4013      	ands	r3, r2
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034d6:	5cd3      	ldrb	r3, [r2, r3]
 80034d8:	40d9      	lsrs	r1, r3
 80034da:	000b      	movs	r3, r1
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	40021000 	.word	0x40021000
 80034e8:	080065bc 	.word	0x080065bc

080034ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f0:	f7ff ffdc 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034f4:	0001      	movs	r1, r0
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	0adb      	lsrs	r3, r3, #11
 80034fc:	2207      	movs	r2, #7
 80034fe:	4013      	ands	r3, r2
 8003500:	4a04      	ldr	r2, [pc, #16]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	40d9      	lsrs	r1, r3
 8003506:	000b      	movs	r3, r1
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	40021000 	.word	0x40021000
 8003514:	080065bc 	.word	0x080065bc

08003518 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003520:	2317      	movs	r3, #23
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2220      	movs	r2, #32
 800352e:	4013      	ands	r3, r2
 8003530:	d106      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	4013      	ands	r3, r2
 800353c:	d100      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800353e:	e0d9      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003540:	4ba4      	ldr	r3, [pc, #656]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	055b      	lsls	r3, r3, #21
 8003548:	4013      	ands	r3, r2
 800354a:	d10a      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4ba1      	ldr	r3, [pc, #644]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800354e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003550:	4ba0      	ldr	r3, [pc, #640]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	0549      	lsls	r1, r1, #21
 8003556:	430a      	orrs	r2, r1
 8003558:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800355a:	2317      	movs	r3, #23
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003562:	4b9d      	ldr	r3, [pc, #628]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4013      	ands	r3, r2
 800356c:	d11a      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800356e:	4b9a      	ldr	r3, [pc, #616]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b99      	ldr	r3, [pc, #612]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003574:	2180      	movs	r1, #128	; 0x80
 8003576:	0049      	lsls	r1, r1, #1
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357c:	f7fe fa64 	bl	8001a48 <HAL_GetTick>
 8003580:	0003      	movs	r3, r0
 8003582:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	e008      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003586:	f7fe fa5f 	bl	8001a48 <HAL_GetTick>
 800358a:	0002      	movs	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b64      	cmp	r3, #100	; 0x64
 8003592:	d901      	bls.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e118      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	4b8f      	ldr	r3, [pc, #572]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4013      	ands	r3, r2
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80035a4:	4b8b      	ldr	r3, [pc, #556]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	23c0      	movs	r3, #192	; 0xc0
 80035aa:	039b      	lsls	r3, r3, #14
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	23c0      	movs	r3, #192	; 0xc0
 80035b6:	039b      	lsls	r3, r3, #14
 80035b8:	4013      	ands	r3, r2
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d107      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	23c0      	movs	r3, #192	; 0xc0
 80035c6:	039b      	lsls	r3, r3, #14
 80035c8:	4013      	ands	r3, r2
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d013      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	23c0      	movs	r3, #192	; 0xc0
 80035d6:	029b      	lsls	r3, r3, #10
 80035d8:	401a      	ands	r2, r3
 80035da:	23c0      	movs	r3, #192	; 0xc0
 80035dc:	029b      	lsls	r3, r3, #10
 80035de:	429a      	cmp	r2, r3
 80035e0:	d10a      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80035e2:	4b7c      	ldr	r3, [pc, #496]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	029b      	lsls	r3, r3, #10
 80035ea:	401a      	ands	r2, r3
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	029b      	lsls	r3, r3, #10
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d101      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0e8      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80035f8:	4b76      	ldr	r3, [pc, #472]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035fc:	23c0      	movs	r3, #192	; 0xc0
 80035fe:	029b      	lsls	r3, r3, #10
 8003600:	4013      	ands	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d049      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	23c0      	movs	r3, #192	; 0xc0
 8003610:	029b      	lsls	r3, r3, #10
 8003612:	4013      	ands	r3, r2
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	429a      	cmp	r2, r3
 8003618:	d004      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2220      	movs	r2, #32
 8003620:	4013      	ands	r3, r2
 8003622:	d10d      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	23c0      	movs	r3, #192	; 0xc0
 800362a:	029b      	lsls	r3, r3, #10
 800362c:	4013      	ands	r3, r2
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	429a      	cmp	r2, r3
 8003632:	d034      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4013      	ands	r3, r2
 800363e:	d02e      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003640:	4b64      	ldr	r3, [pc, #400]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	4a65      	ldr	r2, [pc, #404]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003646:	4013      	ands	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800364a:	4b62      	ldr	r3, [pc, #392]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800364c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800364e:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	0309      	lsls	r1, r1, #12
 8003654:	430a      	orrs	r2, r1
 8003656:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003658:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800365a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800365c:	4b5d      	ldr	r3, [pc, #372]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800365e:	4960      	ldr	r1, [pc, #384]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003660:	400a      	ands	r2, r1
 8003662:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003664:	4b5b      	ldr	r3, [pc, #364]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4013      	ands	r3, r2
 8003672:	d014      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe f9e8 	bl	8001a48 <HAL_GetTick>
 8003678:	0003      	movs	r3, r0
 800367a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800367c:	e009      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fe f9e3 	bl	8001a48 <HAL_GetTick>
 8003682:	0002      	movs	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	4a56      	ldr	r2, [pc, #344]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e09b      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003692:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4013      	ands	r3, r2
 800369c:	d0ef      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	23c0      	movs	r3, #192	; 0xc0
 80036a4:	029b      	lsls	r3, r3, #10
 80036a6:	401a      	ands	r2, r3
 80036a8:	23c0      	movs	r3, #192	; 0xc0
 80036aa:	029b      	lsls	r3, r3, #10
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d10c      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80036b0:	4b48      	ldr	r3, [pc, #288]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a4c      	ldr	r2, [pc, #304]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	23c0      	movs	r3, #192	; 0xc0
 80036c0:	039b      	lsls	r3, r3, #14
 80036c2:	401a      	ands	r2, r3
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036c6:	430a      	orrs	r2, r1
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	4b42      	ldr	r3, [pc, #264]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	23c0      	movs	r3, #192	; 0xc0
 80036d4:	029b      	lsls	r3, r3, #10
 80036d6:	401a      	ands	r2, r3
 80036d8:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036da:	430a      	orrs	r2, r1
 80036dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036de:	2317      	movs	r3, #23
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e8:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ec:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036ee:	493f      	ldr	r1, [pc, #252]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036f0:	400a      	ands	r2, r1
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2201      	movs	r2, #1
 80036fa:	4013      	ands	r3, r2
 80036fc:	d009      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036fe:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	2203      	movs	r2, #3
 8003704:	4393      	bics	r3, r2
 8003706:	0019      	movs	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800370e:	430a      	orrs	r2, r1
 8003710:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2202      	movs	r2, #2
 8003718:	4013      	ands	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800371c:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800371e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003720:	220c      	movs	r2, #12
 8003722:	4393      	bics	r3, r2
 8003724:	0019      	movs	r1, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800372c:	430a      	orrs	r2, r1
 800372e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2204      	movs	r2, #4
 8003736:	4013      	ands	r3, r2
 8003738:	d009      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800373a:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	4a2c      	ldr	r2, [pc, #176]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003740:	4013      	ands	r3, r2
 8003742:	0019      	movs	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800374a:	430a      	orrs	r2, r1
 800374c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2208      	movs	r2, #8
 8003754:	4013      	ands	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800375a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375c:	4a25      	ldr	r2, [pc, #148]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800375e:	4013      	ands	r3, r2
 8003760:	0019      	movs	r1, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003768:	430a      	orrs	r2, r1
 800376a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4013      	ands	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800377a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377c:	4a17      	ldr	r2, [pc, #92]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800377e:	4013      	ands	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69da      	ldr	r2, [r3, #28]
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003788:	430a      	orrs	r2, r1
 800378a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2240      	movs	r2, #64	; 0x40
 8003792:	4013      	ands	r3, r2
 8003794:	d009      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003796:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379a:	4a17      	ldr	r2, [pc, #92]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800379c:	4013      	ands	r3, r2
 800379e:	0019      	movs	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037a6:	430a      	orrs	r2, r1
 80037a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	4013      	ands	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80037b4:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b8:	4a10      	ldr	r2, [pc, #64]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037c4:	430a      	orrs	r2, r1
 80037c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b006      	add	sp, #24
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40007000 	.word	0x40007000
 80037dc:	fffcffff 	.word	0xfffcffff
 80037e0:	fff7ffff 	.word	0xfff7ffff
 80037e4:	00001388 	.word	0x00001388
 80037e8:	ffcfffff 	.word	0xffcfffff
 80037ec:	efffffff 	.word	0xefffffff
 80037f0:	fffff3ff 	.word	0xfffff3ff
 80037f4:	ffffcfff 	.word	0xffffcfff
 80037f8:	fbffffff 	.word	0xfbffffff
 80037fc:	fff3ffff 	.word	0xfff3ffff

08003800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e032      	b.n	8003878 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2239      	movs	r2, #57	; 0x39
 8003816:	5c9b      	ldrb	r3, [r3, r2]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d107      	bne.n	800382e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2238      	movs	r2, #56	; 0x38
 8003822:	2100      	movs	r1, #0
 8003824:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0018      	movs	r0, r3
 800382a:	f7fd ff03 	bl	8001634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2239      	movs	r2, #57	; 0x39
 8003832:	2102      	movs	r1, #2
 8003834:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	0019      	movs	r1, r3
 8003840:	0010      	movs	r0, r2
 8003842:	f000 fbeb 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	223e      	movs	r2, #62	; 0x3e
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	223a      	movs	r2, #58	; 0x3a
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	223b      	movs	r2, #59	; 0x3b
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	223c      	movs	r2, #60	; 0x3c
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	223d      	movs	r2, #61	; 0x3d
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2239      	movs	r2, #57	; 0x39
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2239      	movs	r2, #57	; 0x39
 800388c:	5c9b      	ldrb	r3, [r3, r2]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d001      	beq.n	8003898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e03b      	b.n	8003910 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2239      	movs	r2, #57	; 0x39
 800389c:	2102      	movs	r1, #2
 800389e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2101      	movs	r1, #1
 80038ac:	430a      	orrs	r2, r1
 80038ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	05db      	lsls	r3, r3, #23
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d00e      	beq.n	80038da <HAL_TIM_Base_Start_IT+0x5a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a15      	ldr	r2, [pc, #84]	; (8003918 <HAL_TIM_Base_Start_IT+0x98>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d009      	beq.n	80038da <HAL_TIM_Base_Start_IT+0x5a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a14      	ldr	r2, [pc, #80]	; (800391c <HAL_TIM_Base_Start_IT+0x9c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <HAL_TIM_Base_Start_IT+0x5a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a12      	ldr	r2, [pc, #72]	; (8003920 <HAL_TIM_Base_Start_IT+0xa0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d111      	bne.n	80038fe <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2207      	movs	r2, #7
 80038e2:	4013      	ands	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b06      	cmp	r3, #6
 80038ea:	d010      	beq.n	800390e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2101      	movs	r1, #1
 80038f8:	430a      	orrs	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fc:	e007      	b.n	800390e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2101      	movs	r1, #1
 800390a:	430a      	orrs	r2, r1
 800390c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b004      	add	sp, #16
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40000400 	.word	0x40000400
 800391c:	40010800 	.word	0x40010800
 8003920:	40011400 	.word	0x40011400

08003924 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e032      	b.n	800399c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2239      	movs	r2, #57	; 0x39
 800393a:	5c9b      	ldrb	r3, [r3, r2]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d107      	bne.n	8003952 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2238      	movs	r2, #56	; 0x38
 8003946:	2100      	movs	r1, #0
 8003948:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	0018      	movs	r0, r3
 800394e:	f000 f829 	bl	80039a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2239      	movs	r2, #57	; 0x39
 8003956:	2102      	movs	r1, #2
 8003958:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3304      	adds	r3, #4
 8003962:	0019      	movs	r1, r3
 8003964:	0010      	movs	r0, r2
 8003966:	f000 fb59 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	223e      	movs	r2, #62	; 0x3e
 800396e:	2101      	movs	r1, #1
 8003970:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	223a      	movs	r2, #58	; 0x3a
 8003976:	2101      	movs	r1, #1
 8003978:	5499      	strb	r1, [r3, r2]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	223b      	movs	r2, #59	; 0x3b
 800397e:	2101      	movs	r1, #1
 8003980:	5499      	strb	r1, [r3, r2]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	223c      	movs	r2, #60	; 0x3c
 8003986:	2101      	movs	r1, #1
 8003988:	5499      	strb	r1, [r3, r2]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	223d      	movs	r2, #61	; 0x3d
 800398e:	2101      	movs	r1, #1
 8003990:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2239      	movs	r2, #57	; 0x39
 8003996:	2101      	movs	r1, #1
 8003998:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	0018      	movs	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	b002      	add	sp, #8
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039ac:	46c0      	nop			; (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d108      	bne.n	80039d6 <HAL_TIM_PWM_Start+0x22>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	223a      	movs	r2, #58	; 0x3a
 80039c8:	5c9b      	ldrb	r3, [r3, r2]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	1e5a      	subs	r2, r3, #1
 80039d0:	4193      	sbcs	r3, r2
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	e01f      	b.n	8003a16 <HAL_TIM_PWM_Start+0x62>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d108      	bne.n	80039ee <HAL_TIM_PWM_Start+0x3a>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	223b      	movs	r2, #59	; 0x3b
 80039e0:	5c9b      	ldrb	r3, [r3, r2]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	1e5a      	subs	r2, r3, #1
 80039e8:	4193      	sbcs	r3, r2
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	e013      	b.n	8003a16 <HAL_TIM_PWM_Start+0x62>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d108      	bne.n	8003a06 <HAL_TIM_PWM_Start+0x52>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	223c      	movs	r2, #60	; 0x3c
 80039f8:	5c9b      	ldrb	r3, [r3, r2]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	1e5a      	subs	r2, r3, #1
 8003a00:	4193      	sbcs	r3, r2
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	e007      	b.n	8003a16 <HAL_TIM_PWM_Start+0x62>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	223d      	movs	r2, #61	; 0x3d
 8003a0a:	5c9b      	ldrb	r3, [r3, r2]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	1e5a      	subs	r2, r3, #1
 8003a12:	4193      	sbcs	r3, r2
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e052      	b.n	8003ac4 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <HAL_TIM_PWM_Start+0x7a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	223a      	movs	r2, #58	; 0x3a
 8003a28:	2102      	movs	r1, #2
 8003a2a:	5499      	strb	r1, [r3, r2]
 8003a2c:	e013      	b.n	8003a56 <HAL_TIM_PWM_Start+0xa2>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d104      	bne.n	8003a3e <HAL_TIM_PWM_Start+0x8a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	223b      	movs	r2, #59	; 0x3b
 8003a38:	2102      	movs	r1, #2
 8003a3a:	5499      	strb	r1, [r3, r2]
 8003a3c:	e00b      	b.n	8003a56 <HAL_TIM_PWM_Start+0xa2>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_PWM_Start+0x9a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	223c      	movs	r2, #60	; 0x3c
 8003a48:	2102      	movs	r1, #2
 8003a4a:	5499      	strb	r1, [r3, r2]
 8003a4c:	e003      	b.n	8003a56 <HAL_TIM_PWM_Start+0xa2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	223d      	movs	r2, #61	; 0x3d
 8003a52:	2102      	movs	r1, #2
 8003a54:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6839      	ldr	r1, [r7, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f000 fcd8 	bl	8004414 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	05db      	lsls	r3, r3, #23
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d00e      	beq.n	8003a8e <HAL_TIM_PWM_Start+0xda>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a15      	ldr	r2, [pc, #84]	; (8003acc <HAL_TIM_PWM_Start+0x118>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_TIM_PWM_Start+0xda>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <HAL_TIM_PWM_Start+0x11c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_TIM_PWM_Start+0xda>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <HAL_TIM_PWM_Start+0x120>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d111      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2207      	movs	r2, #7
 8003a96:	4013      	ands	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b06      	cmp	r3, #6
 8003a9e:	d010      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2101      	movs	r1, #1
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab0:	e007      	b.n	8003ac2 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2101      	movs	r1, #1
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b004      	add	sp, #16
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40010800 	.word	0x40010800
 8003ad4:	40011400 	.word	0x40011400

08003ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d124      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2202      	movs	r2, #2
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d11d      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2203      	movs	r2, #3
 8003b02:	4252      	negs	r2, r2
 8003b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2203      	movs	r2, #3
 8003b14:	4013      	ands	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 fa66 	bl	8003fec <HAL_TIM_IC_CaptureCallback>
 8003b20:	e007      	b.n	8003b32 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fa59 	bl	8003fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f000 fa65 	bl	8003ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d125      	bne.n	8003b92 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11e      	bne.n	8003b92 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2205      	movs	r2, #5
 8003b5a:	4252      	negs	r2, r2
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	23c0      	movs	r3, #192	; 0xc0
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f000 fa39 	bl	8003fec <HAL_TIM_IC_CaptureCallback>
 8003b7a:	e007      	b.n	8003b8c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f000 fa2c 	bl	8003fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0018      	movs	r0, r3
 8003b88:	f000 fa38 	bl	8003ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d124      	bne.n	8003bea <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d11d      	bne.n	8003bea <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2209      	movs	r2, #9
 8003bb4:	4252      	negs	r2, r2
 8003bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2204      	movs	r2, #4
 8003bbc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d004      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f000 fa0d 	bl	8003fec <HAL_TIM_IC_CaptureCallback>
 8003bd2:	e007      	b.n	8003be4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 fa00 	bl	8003fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 fa0c 	bl	8003ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d125      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2210      	movs	r2, #16
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d11e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2211      	movs	r2, #17
 8003c0c:	4252      	negs	r2, r2
 8003c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2208      	movs	r2, #8
 8003c14:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	23c0      	movs	r3, #192	; 0xc0
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4013      	ands	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 f9e0 	bl	8003fec <HAL_TIM_IC_CaptureCallback>
 8003c2c:	e007      	b.n	8003c3e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	0018      	movs	r0, r3
 8003c32:	f000 f9d3 	bl	8003fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 f9df 	bl	8003ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d10f      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d108      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2202      	movs	r2, #2
 8003c66:	4252      	negs	r2, r2
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f7fd fa1d 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2240      	movs	r2, #64	; 0x40
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2240      	movs	r2, #64	; 0x40
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d108      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2241      	movs	r2, #65	; 0x41
 8003c94:	4252      	negs	r2, r2
 8003c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f000 f9b6 	bl	800400c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb4:	2317      	movs	r3, #23
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2238      	movs	r2, #56	; 0x38
 8003cc0:	5c9b      	ldrb	r3, [r3, r2]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_PWM_ConfigChannel+0x22>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e0ad      	b.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2238      	movs	r2, #56	; 0x38
 8003cce:	2101      	movs	r1, #1
 8003cd0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d100      	bne.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x32>
 8003cd8:	e076      	b.n	8003dc8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	d900      	bls.n	8003ce2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003ce0:	e095      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d04e      	beq.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d900      	bls.n	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003cee:	e08e      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x56>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d021      	beq.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003cfc:	e087      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	0011      	movs	r1, r2
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 f9e6 	bl	80040d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2108      	movs	r1, #8
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2104      	movs	r1, #4
 8003d28:	438a      	bics	r2, r1
 8003d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	619a      	str	r2, [r3, #24]
      break;
 8003d3e:	e06b      	b.n	8003e18 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	0011      	movs	r1, r2
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f000 fa01 	bl	8004150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	0109      	lsls	r1, r1, #4
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4931      	ldr	r1, [pc, #196]	; (8003e30 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6999      	ldr	r1, [r3, #24]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	619a      	str	r2, [r3, #24]
      break;
 8003d84:	e048      	b.n	8003e18 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	0011      	movs	r1, r2
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f000 fa20 	bl	80041d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2108      	movs	r1, #8
 8003da0:	430a      	orrs	r2, r1
 8003da2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	69da      	ldr	r2, [r3, #28]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2104      	movs	r1, #4
 8003db0:	438a      	bics	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69d9      	ldr	r1, [r3, #28]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	61da      	str	r2, [r3, #28]
      break;
 8003dc6:	e027      	b.n	8003e18 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	0011      	movs	r1, r2
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f000 fa3f 	bl	8004254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2180      	movs	r1, #128	; 0x80
 8003de2:	0109      	lsls	r1, r1, #4
 8003de4:	430a      	orrs	r2, r1
 8003de6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	490f      	ldr	r1, [pc, #60]	; (8003e30 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003df4:	400a      	ands	r2, r1
 8003df6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69d9      	ldr	r1, [r3, #28]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	61da      	str	r2, [r3, #28]
      break;
 8003e0c:	e004      	b.n	8003e18 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003e0e:	2317      	movs	r3, #23
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
      break;
 8003e16:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2238      	movs	r2, #56	; 0x38
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	5499      	strb	r1, [r3, r2]

  return status;
 8003e20:	2317      	movs	r3, #23
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	781b      	ldrb	r3, [r3, #0]
}
 8003e26:	0018      	movs	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b006      	add	sp, #24
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	fffffbff 	.word	0xfffffbff

08003e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	230f      	movs	r3, #15
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2238      	movs	r2, #56	; 0x38
 8003e4a:	5c9b      	ldrb	r3, [r3, r2]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIM_ConfigClockSource+0x20>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e0bc      	b.n	8003fce <HAL_TIM_ConfigClockSource+0x19a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2238      	movs	r2, #56	; 0x38
 8003e58:	2101      	movs	r1, #1
 8003e5a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2239      	movs	r2, #57	; 0x39
 8003e60:	2102      	movs	r1, #2
 8003e62:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2277      	movs	r2, #119	; 0x77
 8003e70:	4393      	bics	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4a58      	ldr	r2, [pc, #352]	; (8003fd8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2280      	movs	r2, #128	; 0x80
 8003e8a:	0192      	lsls	r2, r2, #6
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d040      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0xde>
 8003e90:	2280      	movs	r2, #128	; 0x80
 8003e92:	0192      	lsls	r2, r2, #6
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d900      	bls.n	8003e9a <HAL_TIM_ConfigClockSource+0x66>
 8003e98:	e088      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	0152      	lsls	r2, r2, #5
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d100      	bne.n	8003ea4 <HAL_TIM_ConfigClockSource+0x70>
 8003ea2:	e088      	b.n	8003fb6 <HAL_TIM_ConfigClockSource+0x182>
 8003ea4:	2280      	movs	r2, #128	; 0x80
 8003ea6:	0152      	lsls	r2, r2, #5
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d900      	bls.n	8003eae <HAL_TIM_ConfigClockSource+0x7a>
 8003eac:	e07e      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
 8003eae:	2b70      	cmp	r3, #112	; 0x70
 8003eb0:	d018      	beq.n	8003ee4 <HAL_TIM_ConfigClockSource+0xb0>
 8003eb2:	d900      	bls.n	8003eb6 <HAL_TIM_ConfigClockSource+0x82>
 8003eb4:	e07a      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
 8003eb6:	2b60      	cmp	r3, #96	; 0x60
 8003eb8:	d04f      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x126>
 8003eba:	d900      	bls.n	8003ebe <HAL_TIM_ConfigClockSource+0x8a>
 8003ebc:	e076      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
 8003ebe:	2b50      	cmp	r3, #80	; 0x50
 8003ec0:	d03b      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0x106>
 8003ec2:	d900      	bls.n	8003ec6 <HAL_TIM_ConfigClockSource+0x92>
 8003ec4:	e072      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
 8003ec6:	2b40      	cmp	r3, #64	; 0x40
 8003ec8:	d057      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x146>
 8003eca:	d900      	bls.n	8003ece <HAL_TIM_ConfigClockSource+0x9a>
 8003ecc:	e06e      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
 8003ece:	2b30      	cmp	r3, #48	; 0x30
 8003ed0:	d063      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x166>
 8003ed2:	d86b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d060      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x166>
 8003ed8:	d868      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d05d      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x166>
 8003ede:	2b10      	cmp	r3, #16
 8003ee0:	d05b      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x166>
 8003ee2:	e063      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6899      	ldr	r1, [r3, #8]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f000 fa6e 	bl	80043d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2277      	movs	r2, #119	; 0x77
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	609a      	str	r2, [r3, #8]
      break;
 8003f10:	e052      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6899      	ldr	r1, [r3, #8]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f000 fa57 	bl	80043d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2180      	movs	r1, #128	; 0x80
 8003f32:	01c9      	lsls	r1, r1, #7
 8003f34:	430a      	orrs	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
      break;
 8003f38:	e03e      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	001a      	movs	r2, r3
 8003f48:	f000 f9ca 	bl	80042e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2150      	movs	r1, #80	; 0x50
 8003f52:	0018      	movs	r0, r3
 8003f54:	f000 fa24 	bl	80043a0 <TIM_ITRx_SetConfig>
      break;
 8003f58:	e02e      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	001a      	movs	r2, r3
 8003f68:	f000 f9e8 	bl	800433c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2160      	movs	r1, #96	; 0x60
 8003f72:	0018      	movs	r0, r3
 8003f74:	f000 fa14 	bl	80043a0 <TIM_ITRx_SetConfig>
      break;
 8003f78:	e01e      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	001a      	movs	r2, r3
 8003f88:	f000 f9aa 	bl	80042e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2140      	movs	r1, #64	; 0x40
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 fa04 	bl	80043a0 <TIM_ITRx_SetConfig>
      break;
 8003f98:	e00e      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	0010      	movs	r0, r2
 8003fa6:	f000 f9fb 	bl	80043a0 <TIM_ITRx_SetConfig>
      break;
 8003faa:	e005      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003fac:	230f      	movs	r3, #15
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
      break;
 8003fb4:	e000      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003fb6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2239      	movs	r2, #57	; 0x39
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2238      	movs	r2, #56	; 0x38
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	5499      	strb	r1, [r3, r2]

  return status;
 8003fc8:	230f      	movs	r3, #15
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	781b      	ldrb	r3, [r3, #0]
}
 8003fce:	0018      	movs	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b004      	add	sp, #16
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	ffff00ff 	.word	0xffff00ff

08003fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b002      	add	sp, #8
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	46bd      	mov	sp, r7
 8004008:	b002      	add	sp, #8
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	46bd      	mov	sp, r7
 8004018:	b002      	add	sp, #8
 800401a:	bd80      	pop	{r7, pc}

0800401c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	05db      	lsls	r3, r3, #23
 8004032:	429a      	cmp	r2, r3
 8004034:	d00b      	beq.n	800404e <TIM_Base_SetConfig+0x32>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a23      	ldr	r2, [pc, #140]	; (80040c8 <TIM_Base_SetConfig+0xac>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <TIM_Base_SetConfig+0x32>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a22      	ldr	r2, [pc, #136]	; (80040cc <TIM_Base_SetConfig+0xb0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_Base_SetConfig+0x32>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <TIM_Base_SetConfig+0xb4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d108      	bne.n	8004060 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2270      	movs	r2, #112	; 0x70
 8004052:	4393      	bics	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	05db      	lsls	r3, r3, #23
 8004066:	429a      	cmp	r2, r3
 8004068:	d00b      	beq.n	8004082 <TIM_Base_SetConfig+0x66>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <TIM_Base_SetConfig+0xac>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <TIM_Base_SetConfig+0x66>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a15      	ldr	r2, [pc, #84]	; (80040cc <TIM_Base_SetConfig+0xb0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_Base_SetConfig+0x66>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <TIM_Base_SetConfig+0xb4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d108      	bne.n	8004094 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <TIM_Base_SetConfig+0xb8>)
 8004086:	4013      	ands	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2280      	movs	r2, #128	; 0x80
 8004098:	4393      	bics	r3, r2
 800409a:	001a      	movs	r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	615a      	str	r2, [r3, #20]
}
 80040c0:	46c0      	nop			; (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b004      	add	sp, #16
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40010800 	.word	0x40010800
 80040d0:	40011400 	.word	0x40011400
 80040d4:	fffffcff 	.word	0xfffffcff

080040d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	2201      	movs	r2, #1
 80040e8:	4393      	bics	r3, r2
 80040ea:	001a      	movs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2270      	movs	r2, #112	; 0x70
 8004106:	4393      	bics	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2203      	movs	r2, #3
 800410e:	4393      	bics	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2202      	movs	r2, #2
 8004120:	4393      	bics	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	621a      	str	r2, [r3, #32]
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b006      	add	sp, #24
 800414e:	bd80      	pop	{r7, pc}

08004150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	2210      	movs	r2, #16
 8004160:	4393      	bics	r3, r2
 8004162:	001a      	movs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a13      	ldr	r2, [pc, #76]	; (80041cc <TIM_OC2_SetConfig+0x7c>)
 800417e:	4013      	ands	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <TIM_OC2_SetConfig+0x80>)
 8004186:	4013      	ands	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2220      	movs	r2, #32
 800419a:	4393      	bics	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	621a      	str	r2, [r3, #32]
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b006      	add	sp, #24
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	ffff8fff 	.word	0xffff8fff
 80041d0:	fffffcff 	.word	0xfffffcff

080041d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	4a1a      	ldr	r2, [pc, #104]	; (800424c <TIM_OC3_SetConfig+0x78>)
 80041e4:	401a      	ands	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2270      	movs	r2, #112	; 0x70
 8004200:	4393      	bics	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2203      	movs	r2, #3
 8004208:	4393      	bics	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	4a0d      	ldr	r2, [pc, #52]	; (8004250 <TIM_OC3_SetConfig+0x7c>)
 800421a:	4013      	ands	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b006      	add	sp, #24
 800424a:	bd80      	pop	{r7, pc}
 800424c:	fffffeff 	.word	0xfffffeff
 8004250:	fffffdff 	.word	0xfffffdff

08004254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <TIM_OC4_SetConfig+0x7c>)
 8004264:	401a      	ands	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <TIM_OC4_SetConfig+0x80>)
 8004280:	4013      	ands	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <TIM_OC4_SetConfig+0x84>)
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4a10      	ldr	r2, [pc, #64]	; (80042dc <TIM_OC4_SetConfig+0x88>)
 800429c:	4013      	ands	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	031b      	lsls	r3, r3, #12
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b006      	add	sp, #24
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	ffffefff 	.word	0xffffefff
 80042d4:	ffff8fff 	.word	0xffff8fff
 80042d8:	fffffcff 	.word	0xfffffcff
 80042dc:	ffffdfff 	.word	0xffffdfff

080042e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	2201      	movs	r2, #1
 80042f8:	4393      	bics	r3, r2
 80042fa:	001a      	movs	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	22f0      	movs	r2, #240	; 0xf0
 800430a:	4393      	bics	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	220a      	movs	r2, #10
 800431c:	4393      	bics	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	621a      	str	r2, [r3, #32]
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b006      	add	sp, #24
 800433a:	bd80      	pop	{r7, pc}

0800433c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	2210      	movs	r2, #16
 800434e:	4393      	bics	r3, r2
 8004350:	001a      	movs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	4a0d      	ldr	r2, [pc, #52]	; (800439c <TIM_TI2_ConfigInputStage+0x60>)
 8004366:	4013      	ands	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	031b      	lsls	r3, r3, #12
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	22a0      	movs	r2, #160	; 0xa0
 8004378:	4393      	bics	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	46bd      	mov	sp, r7
 8004396:	b006      	add	sp, #24
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	ffff0fff 	.word	0xffff0fff

080043a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2270      	movs	r2, #112	; 0x70
 80043b4:	4393      	bics	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	2207      	movs	r2, #7
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	609a      	str	r2, [r3, #8]
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b004      	add	sp, #16
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <TIM_ETR_SetConfig+0x3c>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	021a      	lsls	r2, r3, #8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	609a      	str	r2, [r3, #8]
}
 8004408:	46c0      	nop			; (mov r8, r8)
 800440a:	46bd      	mov	sp, r7
 800440c:	b006      	add	sp, #24
 800440e:	bd80      	pop	{r7, pc}
 8004410:	ffff00ff 	.word	0xffff00ff

08004414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	221f      	movs	r2, #31
 8004424:	4013      	ands	r3, r2
 8004426:	2201      	movs	r2, #1
 8004428:	409a      	lsls	r2, r3
 800442a:	0013      	movs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	43d2      	mvns	r2, r2
 8004436:	401a      	ands	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1a      	ldr	r2, [r3, #32]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	211f      	movs	r1, #31
 8004444:	400b      	ands	r3, r1
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4099      	lsls	r1, r3
 800444a:	000b      	movs	r3, r1
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	b006      	add	sp, #24
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2238      	movs	r2, #56	; 0x38
 800446a:	5c9b      	ldrb	r3, [r3, r2]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004470:	2302      	movs	r3, #2
 8004472:	e047      	b.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2238      	movs	r2, #56	; 0x38
 8004478:	2101      	movs	r1, #1
 800447a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2239      	movs	r2, #57	; 0x39
 8004480:	2102      	movs	r1, #2
 8004482:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2270      	movs	r2, #112	; 0x70
 8004498:	4393      	bics	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	2380      	movs	r3, #128	; 0x80
 80044b4:	05db      	lsls	r3, r3, #23
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d00e      	beq.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a13      	ldr	r2, [pc, #76]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d009      	beq.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a11      	ldr	r2, [pc, #68]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a10      	ldr	r2, [pc, #64]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10c      	bne.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2280      	movs	r2, #128	; 0x80
 80044dc:	4393      	bics	r3, r2
 80044de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2239      	movs	r2, #57	; 0x39
 80044f6:	2101      	movs	r1, #1
 80044f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2238      	movs	r2, #56	; 0x38
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b004      	add	sp, #16
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40000400 	.word	0x40000400
 8004510:	40010800 	.word	0x40010800
 8004514:	40011400 	.word	0x40011400

08004518 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2238      	movs	r2, #56	; 0x38
 8004526:	5c9b      	ldrb	r3, [r3, r2]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_TIMEx_RemapConfig+0x18>
 800452c:	2302      	movs	r3, #2
 800452e:	e00c      	b.n	800454a <HAL_TIMEx_RemapConfig+0x32>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2238      	movs	r2, #56	; 0x38
 8004534:	2101      	movs	r1, #1
 8004536:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2238      	movs	r2, #56	; 0x38
 8004544:	2100      	movs	r1, #0
 8004546:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	0018      	movs	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	b002      	add	sp, #8
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e044      	b.n	80045f0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2274      	movs	r2, #116	; 0x74
 8004572:	2100      	movs	r1, #0
 8004574:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f7fd f94f 	bl	800181c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2224      	movs	r2, #36	; 0x24
 8004582:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2101      	movs	r1, #1
 8004590:	438a      	bics	r2, r1
 8004592:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	0018      	movs	r0, r3
 8004598:	f000 fcbc 	bl	8004f14 <UART_SetConfig>
 800459c:	0003      	movs	r3, r0
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e024      	b.n	80045f0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f000 ff6d 	bl	8005490 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	490d      	ldr	r1, [pc, #52]	; (80045f8 <HAL_UART_Init+0xa4>)
 80045c2:	400a      	ands	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	212a      	movs	r1, #42	; 0x2a
 80045d2:	438a      	bics	r2, r1
 80045d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2101      	movs	r1, #1
 80045e2:	430a      	orrs	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f001 f805 	bl	80055f8 <UART_CheckIdleState>
 80045ee:	0003      	movs	r3, r0
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b002      	add	sp, #8
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	ffffb7ff 	.word	0xffffb7ff

080045fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	1dbb      	adds	r3, r7, #6
 800460a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004610:	2b20      	cmp	r3, #32
 8004612:	d000      	beq.n	8004616 <HAL_UART_Transmit+0x1a>
 8004614:	e095      	b.n	8004742 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_UART_Transmit+0x28>
 800461c:	1dbb      	adds	r3, r7, #6
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e08d      	b.n	8004744 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	015b      	lsls	r3, r3, #5
 8004630:	429a      	cmp	r2, r3
 8004632:	d109      	bne.n	8004648 <HAL_UART_Transmit+0x4c>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d105      	bne.n	8004648 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2201      	movs	r2, #1
 8004640:	4013      	ands	r3, r2
 8004642:	d001      	beq.n	8004648 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e07d      	b.n	8004744 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2274      	movs	r2, #116	; 0x74
 800464c:	5c9b      	ldrb	r3, [r3, r2]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_UART_Transmit+0x5a>
 8004652:	2302      	movs	r3, #2
 8004654:	e076      	b.n	8004744 <HAL_UART_Transmit+0x148>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2274      	movs	r2, #116	; 0x74
 800465a:	2101      	movs	r1, #1
 800465c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2280      	movs	r2, #128	; 0x80
 8004662:	2100      	movs	r1, #0
 8004664:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2221      	movs	r2, #33	; 0x21
 800466a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800466c:	f7fd f9ec 	bl	8001a48 <HAL_GetTick>
 8004670:	0003      	movs	r3, r0
 8004672:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1dba      	adds	r2, r7, #6
 8004678:	2150      	movs	r1, #80	; 0x50
 800467a:	8812      	ldrh	r2, [r2, #0]
 800467c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1dba      	adds	r2, r7, #6
 8004682:	2152      	movs	r1, #82	; 0x52
 8004684:	8812      	ldrh	r2, [r2, #0]
 8004686:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	015b      	lsls	r3, r3, #5
 8004690:	429a      	cmp	r2, r3
 8004692:	d108      	bne.n	80046a6 <HAL_UART_Transmit+0xaa>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d104      	bne.n	80046a6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	e003      	b.n	80046ae <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2274      	movs	r2, #116	; 0x74
 80046b2:	2100      	movs	r1, #0
 80046b4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80046b6:	e02c      	b.n	8004712 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	0013      	movs	r3, r2
 80046c2:	2200      	movs	r2, #0
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	f000 ffdf 	bl	8005688 <UART_WaitOnFlagUntilTimeout>
 80046ca:	1e03      	subs	r3, r0, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e038      	b.n	8004744 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	001a      	movs	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	05d2      	lsls	r2, r2, #23
 80046e4:	0dd2      	lsrs	r2, r2, #23
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	3302      	adds	r3, #2
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e007      	b.n	8004700 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	781a      	ldrb	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2252      	movs	r2, #82	; 0x52
 8004704:	5a9b      	ldrh	r3, [r3, r2]
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b299      	uxth	r1, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2252      	movs	r2, #82	; 0x52
 8004710:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2252      	movs	r2, #82	; 0x52
 8004716:	5a9b      	ldrh	r3, [r3, r2]
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1cc      	bne.n	80046b8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	0013      	movs	r3, r2
 8004728:	2200      	movs	r2, #0
 800472a:	2140      	movs	r1, #64	; 0x40
 800472c:	f000 ffac 	bl	8005688 <UART_WaitOnFlagUntilTimeout>
 8004730:	1e03      	subs	r3, r0, #0
 8004732:	d001      	beq.n	8004738 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e005      	b.n	8004744 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e000      	b.n	8004744 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004742:	2302      	movs	r3, #2
  }
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b008      	add	sp, #32
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	1dbb      	adds	r3, r7, #6
 800475a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004760:	2b20      	cmp	r3, #32
 8004762:	d000      	beq.n	8004766 <HAL_UART_Receive+0x1a>
 8004764:	e0d9      	b.n	800491a <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_UART_Receive+0x28>
 800476c:	1dbb      	adds	r3, r7, #6
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0d1      	b.n	800491c <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	015b      	lsls	r3, r3, #5
 8004780:	429a      	cmp	r2, r3
 8004782:	d109      	bne.n	8004798 <HAL_UART_Receive+0x4c>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2201      	movs	r2, #1
 8004790:	4013      	ands	r3, r2
 8004792:	d001      	beq.n	8004798 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0c1      	b.n	800491c <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2274      	movs	r2, #116	; 0x74
 800479c:	5c9b      	ldrb	r3, [r3, r2]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Receive+0x5a>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e0ba      	b.n	800491c <HAL_UART_Receive+0x1d0>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2274      	movs	r2, #116	; 0x74
 80047aa:	2101      	movs	r1, #1
 80047ac:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	2100      	movs	r1, #0
 80047b4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2222      	movs	r2, #34	; 0x22
 80047ba:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c2:	f7fd f941 	bl	8001a48 <HAL_GetTick>
 80047c6:	0003      	movs	r3, r0
 80047c8:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1dba      	adds	r2, r7, #6
 80047ce:	2158      	movs	r1, #88	; 0x58
 80047d0:	8812      	ldrh	r2, [r2, #0]
 80047d2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1dba      	adds	r2, r7, #6
 80047d8:	215a      	movs	r1, #90	; 0x5a
 80047da:	8812      	ldrh	r2, [r2, #0]
 80047dc:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	015b      	lsls	r3, r3, #5
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d10d      	bne.n	8004806 <HAL_UART_Receive+0xba>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d104      	bne.n	80047fc <HAL_UART_Receive+0xb0>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	225c      	movs	r2, #92	; 0x5c
 80047f6:	494b      	ldr	r1, [pc, #300]	; (8004924 <HAL_UART_Receive+0x1d8>)
 80047f8:	5299      	strh	r1, [r3, r2]
 80047fa:	e02e      	b.n	800485a <HAL_UART_Receive+0x10e>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	225c      	movs	r2, #92	; 0x5c
 8004800:	21ff      	movs	r1, #255	; 0xff
 8004802:	5299      	strh	r1, [r3, r2]
 8004804:	e029      	b.n	800485a <HAL_UART_Receive+0x10e>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10d      	bne.n	800482a <HAL_UART_Receive+0xde>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <HAL_UART_Receive+0xd4>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	225c      	movs	r2, #92	; 0x5c
 800481a:	21ff      	movs	r1, #255	; 0xff
 800481c:	5299      	strh	r1, [r3, r2]
 800481e:	e01c      	b.n	800485a <HAL_UART_Receive+0x10e>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	225c      	movs	r2, #92	; 0x5c
 8004824:	217f      	movs	r1, #127	; 0x7f
 8004826:	5299      	strh	r1, [r3, r2]
 8004828:	e017      	b.n	800485a <HAL_UART_Receive+0x10e>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	055b      	lsls	r3, r3, #21
 8004832:	429a      	cmp	r2, r3
 8004834:	d10d      	bne.n	8004852 <HAL_UART_Receive+0x106>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d104      	bne.n	8004848 <HAL_UART_Receive+0xfc>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	225c      	movs	r2, #92	; 0x5c
 8004842:	217f      	movs	r1, #127	; 0x7f
 8004844:	5299      	strh	r1, [r3, r2]
 8004846:	e008      	b.n	800485a <HAL_UART_Receive+0x10e>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	225c      	movs	r2, #92	; 0x5c
 800484c:	213f      	movs	r1, #63	; 0x3f
 800484e:	5299      	strh	r1, [r3, r2]
 8004850:	e003      	b.n	800485a <HAL_UART_Receive+0x10e>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	225c      	movs	r2, #92	; 0x5c
 8004856:	2100      	movs	r1, #0
 8004858:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800485a:	2312      	movs	r3, #18
 800485c:	18fb      	adds	r3, r7, r3
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	215c      	movs	r1, #92	; 0x5c
 8004862:	5a52      	ldrh	r2, [r2, r1]
 8004864:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	2380      	movs	r3, #128	; 0x80
 800486c:	015b      	lsls	r3, r3, #5
 800486e:	429a      	cmp	r2, r3
 8004870:	d108      	bne.n	8004884 <HAL_UART_Receive+0x138>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d104      	bne.n	8004884 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	61bb      	str	r3, [r7, #24]
 8004882:	e003      	b.n	800488c <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004888:	2300      	movs	r3, #0
 800488a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2274      	movs	r2, #116	; 0x74
 8004890:	2100      	movs	r1, #0
 8004892:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004894:	e036      	b.n	8004904 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	0013      	movs	r3, r2
 80048a0:	2200      	movs	r2, #0
 80048a2:	2120      	movs	r1, #32
 80048a4:	f000 fef0 	bl	8005688 <UART_WaitOnFlagUntilTimeout>
 80048a8:	1e03      	subs	r3, r0, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e035      	b.n	800491c <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10e      	bne.n	80048d4 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2212      	movs	r2, #18
 80048c0:	18ba      	adds	r2, r7, r2
 80048c2:	8812      	ldrh	r2, [r2, #0]
 80048c4:	4013      	ands	r3, r2
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	3302      	adds	r3, #2
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e00e      	b.n	80048f2 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2212      	movs	r2, #18
 80048de:	18ba      	adds	r2, r7, r2
 80048e0:	8812      	ldrh	r2, [r2, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	4013      	ands	r3, r2
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	3301      	adds	r3, #1
 80048f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	225a      	movs	r2, #90	; 0x5a
 80048f6:	5a9b      	ldrh	r3, [r3, r2]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b299      	uxth	r1, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	225a      	movs	r2, #90	; 0x5a
 8004902:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	225a      	movs	r2, #90	; 0x5a
 8004908:	5a9b      	ldrh	r3, [r3, r2]
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1c2      	bne.n	8004896 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e000      	b.n	800491c <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
  }
}
 800491c:	0018      	movs	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	b008      	add	sp, #32
 8004922:	bd80      	pop	{r7, pc}
 8004924:	000001ff 	.word	0x000001ff

08004928 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004928:	b590      	push	{r4, r7, lr}
 800492a:	b0ab      	sub	sp, #172	; 0xac
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	22a4      	movs	r2, #164	; 0xa4
 8004938:	18b9      	adds	r1, r7, r2
 800493a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	20a0      	movs	r0, #160	; 0xa0
 8004944:	1839      	adds	r1, r7, r0
 8004946:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	219c      	movs	r1, #156	; 0x9c
 8004950:	1879      	adds	r1, r7, r1
 8004952:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004954:	0011      	movs	r1, r2
 8004956:	18bb      	adds	r3, r7, r2
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a99      	ldr	r2, [pc, #612]	; (8004bc0 <HAL_UART_IRQHandler+0x298>)
 800495c:	4013      	ands	r3, r2
 800495e:	2298      	movs	r2, #152	; 0x98
 8004960:	18bc      	adds	r4, r7, r2
 8004962:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004964:	18bb      	adds	r3, r7, r2
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d114      	bne.n	8004996 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800496c:	187b      	adds	r3, r7, r1
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2220      	movs	r2, #32
 8004972:	4013      	ands	r3, r2
 8004974:	d00f      	beq.n	8004996 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004976:	183b      	adds	r3, r7, r0
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2220      	movs	r2, #32
 800497c:	4013      	ands	r3, r2
 800497e:	d00a      	beq.n	8004996 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004984:	2b00      	cmp	r3, #0
 8004986:	d100      	bne.n	800498a <HAL_UART_IRQHandler+0x62>
 8004988:	e298      	b.n	8004ebc <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	0010      	movs	r0, r2
 8004992:	4798      	blx	r3
      }
      return;
 8004994:	e292      	b.n	8004ebc <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004996:	2398      	movs	r3, #152	; 0x98
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d100      	bne.n	80049a2 <HAL_UART_IRQHandler+0x7a>
 80049a0:	e114      	b.n	8004bcc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049a2:	239c      	movs	r3, #156	; 0x9c
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2201      	movs	r2, #1
 80049aa:	4013      	ands	r3, r2
 80049ac:	d106      	bne.n	80049bc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80049ae:	23a0      	movs	r3, #160	; 0xa0
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a83      	ldr	r2, [pc, #524]	; (8004bc4 <HAL_UART_IRQHandler+0x29c>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	d100      	bne.n	80049bc <HAL_UART_IRQHandler+0x94>
 80049ba:	e107      	b.n	8004bcc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049bc:	23a4      	movs	r3, #164	; 0xa4
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2201      	movs	r2, #1
 80049c4:	4013      	ands	r3, r2
 80049c6:	d012      	beq.n	80049ee <HAL_UART_IRQHandler+0xc6>
 80049c8:	23a0      	movs	r3, #160	; 0xa0
 80049ca:	18fb      	adds	r3, r7, r3
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	2380      	movs	r3, #128	; 0x80
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	4013      	ands	r3, r2
 80049d4:	d00b      	beq.n	80049ee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2201      	movs	r2, #1
 80049dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2280      	movs	r2, #128	; 0x80
 80049e2:	589b      	ldr	r3, [r3, r2]
 80049e4:	2201      	movs	r2, #1
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2180      	movs	r1, #128	; 0x80
 80049ec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ee:	23a4      	movs	r3, #164	; 0xa4
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2202      	movs	r2, #2
 80049f6:	4013      	ands	r3, r2
 80049f8:	d011      	beq.n	8004a1e <HAL_UART_IRQHandler+0xf6>
 80049fa:	239c      	movs	r3, #156	; 0x9c
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2201      	movs	r2, #1
 8004a02:	4013      	ands	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2280      	movs	r2, #128	; 0x80
 8004a12:	589b      	ldr	r3, [r3, r2]
 8004a14:	2204      	movs	r2, #4
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a1e:	23a4      	movs	r3, #164	; 0xa4
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2204      	movs	r2, #4
 8004a26:	4013      	ands	r3, r2
 8004a28:	d011      	beq.n	8004a4e <HAL_UART_IRQHandler+0x126>
 8004a2a:	239c      	movs	r3, #156	; 0x9c
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2201      	movs	r2, #1
 8004a32:	4013      	ands	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2280      	movs	r2, #128	; 0x80
 8004a42:	589b      	ldr	r3, [r3, r2]
 8004a44:	2202      	movs	r2, #2
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a4e:	23a4      	movs	r3, #164	; 0xa4
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2208      	movs	r2, #8
 8004a56:	4013      	ands	r3, r2
 8004a58:	d017      	beq.n	8004a8a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a5a:	23a0      	movs	r3, #160	; 0xa0
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2220      	movs	r2, #32
 8004a62:	4013      	ands	r3, r2
 8004a64:	d105      	bne.n	8004a72 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a66:	239c      	movs	r3, #156	; 0x9c
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a70:	d00b      	beq.n	8004a8a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2208      	movs	r2, #8
 8004a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2280      	movs	r2, #128	; 0x80
 8004a7e:	589b      	ldr	r3, [r3, r2]
 8004a80:	2208      	movs	r2, #8
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a8a:	23a4      	movs	r3, #164	; 0xa4
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2380      	movs	r3, #128	; 0x80
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	4013      	ands	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x198>
 8004a98:	23a0      	movs	r3, #160	; 0xa0
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	2380      	movs	r3, #128	; 0x80
 8004aa0:	04db      	lsls	r3, r3, #19
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d00c      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2280      	movs	r2, #128	; 0x80
 8004aac:	0112      	lsls	r2, r2, #4
 8004aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2280      	movs	r2, #128	; 0x80
 8004ab4:	589b      	ldr	r3, [r3, r2]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2180      	movs	r1, #128	; 0x80
 8004abe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	589b      	ldr	r3, [r3, r2]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d100      	bne.n	8004acc <HAL_UART_IRQHandler+0x1a4>
 8004aca:	e1f9      	b.n	8004ec0 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004acc:	23a4      	movs	r3, #164	; 0xa4
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ad8:	23a0      	movs	r3, #160	; 0xa0
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d008      	beq.n	8004af6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	0010      	movs	r0, r2
 8004af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	589b      	ldr	r3, [r3, r2]
 8004afc:	2194      	movs	r1, #148	; 0x94
 8004afe:	187a      	adds	r2, r7, r1
 8004b00:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2240      	movs	r2, #64	; 0x40
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d004      	beq.n	8004b1a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b10:	187b      	adds	r3, r7, r1
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2228      	movs	r2, #40	; 0x28
 8004b16:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b18:	d047      	beq.n	8004baa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 fe77 	bl	8005810 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2240      	movs	r2, #64	; 0x40
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d137      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b30:	f3ef 8310 	mrs	r3, PRIMASK
 8004b34:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b38:	2090      	movs	r0, #144	; 0x90
 8004b3a:	183a      	adds	r2, r7, r0
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	2301      	movs	r3, #1
 8004b40:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b44:	f383 8810 	msr	PRIMASK, r3
}
 8004b48:	46c0      	nop			; (mov r8, r8)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2140      	movs	r1, #64	; 0x40
 8004b56:	438a      	bics	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]
 8004b5a:	183b      	adds	r3, r7, r0
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b62:	f383 8810 	msr	PRIMASK, r3
}
 8004b66:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d012      	beq.n	8004b96 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <HAL_UART_IRQHandler+0x2a0>)
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7fd fcef 	bl	8002560 <HAL_DMA_Abort_IT>
 8004b82:	1e03      	subs	r3, r0, #0
 8004b84:	d01a      	beq.n	8004bbc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	0018      	movs	r0, r3
 8004b92:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b94:	e012      	b.n	8004bbc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f000 f9a7 	bl	8004eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9e:	e00d      	b.n	8004bbc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 f9a2 	bl	8004eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	e008      	b.n	8004bbc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 f99d 	bl	8004eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2280      	movs	r2, #128	; 0x80
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004bba:	e181      	b.n	8004ec0 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	46c0      	nop			; (mov r8, r8)
    return;
 8004bbe:	e17f      	b.n	8004ec0 <HAL_UART_IRQHandler+0x598>
 8004bc0:	0000080f 	.word	0x0000080f
 8004bc4:	04000120 	.word	0x04000120
 8004bc8:	080058d5 	.word	0x080058d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d000      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x2ae>
 8004bd4:	e133      	b.n	8004e3e <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bd6:	23a4      	movs	r3, #164	; 0xa4
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2210      	movs	r2, #16
 8004bde:	4013      	ands	r3, r2
 8004be0:	d100      	bne.n	8004be4 <HAL_UART_IRQHandler+0x2bc>
 8004be2:	e12c      	b.n	8004e3e <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004be4:	23a0      	movs	r3, #160	; 0xa0
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2210      	movs	r2, #16
 8004bec:	4013      	ands	r3, r2
 8004bee:	d100      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x2ca>
 8004bf0:	e125      	b.n	8004e3e <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2240      	movs	r2, #64	; 0x40
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d000      	beq.n	8004c0a <HAL_UART_IRQHandler+0x2e2>
 8004c08:	e09d      	b.n	8004d46 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	217e      	movs	r1, #126	; 0x7e
 8004c14:	187b      	adds	r3, r7, r1
 8004c16:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004c18:	187b      	adds	r3, r7, r1
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d100      	bne.n	8004c22 <HAL_UART_IRQHandler+0x2fa>
 8004c20:	e150      	b.n	8004ec4 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2258      	movs	r2, #88	; 0x58
 8004c26:	5a9b      	ldrh	r3, [r3, r2]
 8004c28:	187a      	adds	r2, r7, r1
 8004c2a:	8812      	ldrh	r2, [r2, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d300      	bcc.n	8004c32 <HAL_UART_IRQHandler+0x30a>
 8004c30:	e148      	b.n	8004ec4 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	187a      	adds	r2, r7, r1
 8004c36:	215a      	movs	r1, #90	; 0x5a
 8004c38:	8812      	ldrh	r2, [r2, #0]
 8004c3a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2220      	movs	r2, #32
 8004c46:	4013      	ands	r3, r2
 8004c48:	d16e      	bne.n	8004d28 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c52:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c54:	2301      	movs	r3, #1
 8004c56:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5a:	f383 8810 	msr	PRIMASK, r3
}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	499a      	ldr	r1, [pc, #616]	; (8004ed4 <HAL_UART_IRQHandler+0x5ac>)
 8004c6c:	400a      	ands	r2, r1
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c72:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	f383 8810 	msr	PRIMASK, r3
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c84:	677b      	str	r3, [r7, #116]	; 0x74
 8004c86:	2301      	movs	r3, #1
 8004c88:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8c:	f383 8810 	msr	PRIMASK, r3
}
 8004c90:	46c0      	nop			; (mov r8, r8)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	438a      	bics	r2, r1
 8004ca0:	609a      	str	r2, [r3, #8]
 8004ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca8:	f383 8810 	msr	PRIMASK, r3
}
 8004cac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cae:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb6:	673b      	str	r3, [r7, #112]	; 0x70
 8004cb8:	2301      	movs	r3, #1
 8004cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbe:	f383 8810 	msr	PRIMASK, r3
}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2140      	movs	r1, #64	; 0x40
 8004cd0:	438a      	bics	r2, r1
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cd6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cda:	f383 8810 	msr	PRIMASK, r3
}
 8004cde:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cec:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cfc:	f383 8810 	msr	PRIMASK, r3
}
 8004d00:	46c0      	nop			; (mov r8, r8)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2110      	movs	r1, #16
 8004d0e:	438a      	bics	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d14:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d18:	f383 8810 	msr	PRIMASK, r3
}
 8004d1c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7fd fbdc 	bl	80024e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2258      	movs	r2, #88	; 0x58
 8004d2c:	5a9a      	ldrh	r2, [r3, r2]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	215a      	movs	r1, #90	; 0x5a
 8004d32:	5a5b      	ldrh	r3, [r3, r1]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0011      	movs	r1, r2
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f000 f8dc 	bl	8004efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d44:	e0be      	b.n	8004ec4 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2258      	movs	r2, #88	; 0x58
 8004d4a:	5a99      	ldrh	r1, [r3, r2]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	225a      	movs	r2, #90	; 0x5a
 8004d50:	5a9b      	ldrh	r3, [r3, r2]
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	208e      	movs	r0, #142	; 0x8e
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	1a8a      	subs	r2, r1, r2
 8004d5a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	225a      	movs	r2, #90	; 0x5a
 8004d60:	5a9b      	ldrh	r3, [r3, r2]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d100      	bne.n	8004d6a <HAL_UART_IRQHandler+0x442>
 8004d68:	e0ae      	b.n	8004ec8 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8004d6a:	183b      	adds	r3, r7, r0
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d100      	bne.n	8004d74 <HAL_UART_IRQHandler+0x44c>
 8004d72:	e0a9      	b.n	8004ec8 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d74:	f3ef 8310 	mrs	r3, PRIMASK
 8004d78:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7c:	2488      	movs	r4, #136	; 0x88
 8004d7e:	193a      	adds	r2, r7, r4
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	2301      	movs	r3, #1
 8004d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f383 8810 	msr	PRIMASK, r3
}
 8004d8c:	46c0      	nop			; (mov r8, r8)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	494f      	ldr	r1, [pc, #316]	; (8004ed8 <HAL_UART_IRQHandler+0x5b0>)
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	193b      	adds	r3, r7, r4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f383 8810 	msr	PRIMASK, r3
}
 8004daa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dac:	f3ef 8310 	mrs	r3, PRIMASK
 8004db0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004db2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	2484      	movs	r4, #132	; 0x84
 8004db6:	193a      	adds	r2, r7, r4
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	2301      	movs	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f383 8810 	msr	PRIMASK, r3
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	438a      	bics	r2, r1
 8004dd4:	609a      	str	r2, [r3, #8]
 8004dd6:	193b      	adds	r3, r7, r4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	f383 8810 	msr	PRIMASK, r3
}
 8004de2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfe:	2480      	movs	r4, #128	; 0x80
 8004e00:	193a      	adds	r2, r7, r4
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	2301      	movs	r3, #1
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	f383 8810 	msr	PRIMASK, r3
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2110      	movs	r1, #16
 8004e1c:	438a      	bics	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	193b      	adds	r3, r7, r4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	f383 8810 	msr	PRIMASK, r3
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e2e:	183b      	adds	r3, r7, r0
 8004e30:	881a      	ldrh	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	0011      	movs	r1, r2
 8004e36:	0018      	movs	r0, r3
 8004e38:	f000 f860 	bl	8004efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e3c:	e044      	b.n	8004ec8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e3e:	23a4      	movs	r3, #164	; 0xa4
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	035b      	lsls	r3, r3, #13
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d010      	beq.n	8004e6e <HAL_UART_IRQHandler+0x546>
 8004e4c:	239c      	movs	r3, #156	; 0x9c
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	03db      	lsls	r3, r3, #15
 8004e56:	4013      	ands	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2280      	movs	r2, #128	; 0x80
 8004e60:	0352      	lsls	r2, r2, #13
 8004e62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	0018      	movs	r0, r3
 8004e68:	f000 fd76 	bl	8005958 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e6c:	e02f      	b.n	8004ece <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e6e:	23a4      	movs	r3, #164	; 0xa4
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2280      	movs	r2, #128	; 0x80
 8004e76:	4013      	ands	r3, r2
 8004e78:	d00f      	beq.n	8004e9a <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e7a:	23a0      	movs	r3, #160	; 0xa0
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2280      	movs	r2, #128	; 0x80
 8004e82:	4013      	ands	r3, r2
 8004e84:	d009      	beq.n	8004e9a <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01e      	beq.n	8004ecc <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	0010      	movs	r0, r2
 8004e96:	4798      	blx	r3
    }
    return;
 8004e98:	e018      	b.n	8004ecc <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e9a:	23a4      	movs	r3, #164	; 0xa4
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2240      	movs	r2, #64	; 0x40
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d013      	beq.n	8004ece <HAL_UART_IRQHandler+0x5a6>
 8004ea6:	23a0      	movs	r3, #160	; 0xa0
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2240      	movs	r2, #64	; 0x40
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d00d      	beq.n	8004ece <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f000 fd24 	bl	8005902 <UART_EndTransmit_IT>
    return;
 8004eba:	e008      	b.n	8004ece <HAL_UART_IRQHandler+0x5a6>
      return;
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	e006      	b.n	8004ece <HAL_UART_IRQHandler+0x5a6>
    return;
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	e004      	b.n	8004ece <HAL_UART_IRQHandler+0x5a6>
      return;
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	e002      	b.n	8004ece <HAL_UART_IRQHandler+0x5a6>
      return;
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	e000      	b.n	8004ece <HAL_UART_IRQHandler+0x5a6>
    return;
 8004ecc:	46c0      	nop			; (mov r8, r8)
  }

}
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b02b      	add	sp, #172	; 0xac
 8004ed2:	bd90      	pop	{r4, r7, pc}
 8004ed4:	fffffeff 	.word	0xfffffeff
 8004ed8:	fffffedf 	.word	0xfffffedf

08004edc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ee4:	46c0      	nop			; (mov r8, r8)
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b002      	add	sp, #8
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b002      	add	sp, #8
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	000a      	movs	r2, r1
 8004f06:	1cbb      	adds	r3, r7, #2
 8004f08:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b002      	add	sp, #8
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f14:	b5b0      	push	{r4, r5, r7, lr}
 8004f16:	b08e      	sub	sp, #56	; 0x38
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f1c:	231a      	movs	r3, #26
 8004f1e:	2218      	movs	r2, #24
 8004f20:	4694      	mov	ip, r2
 8004f22:	44bc      	add	ip, r7
 8004f24:	4463      	add	r3, ip
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4ab0      	ldr	r2, [pc, #704]	; (800520c <UART_SetConfig+0x2f8>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f54:	430a      	orrs	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	4aac      	ldr	r2, [pc, #688]	; (8005210 <UART_SetConfig+0x2fc>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	0019      	movs	r1, r3
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4aa6      	ldr	r2, [pc, #664]	; (8005214 <UART_SetConfig+0x300>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d004      	beq.n	8004f8a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f86:	4313      	orrs	r3, r2
 8004f88:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	4aa1      	ldr	r2, [pc, #644]	; (8005218 <UART_SetConfig+0x304>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a9d      	ldr	r2, [pc, #628]	; (800521c <UART_SetConfig+0x308>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d136      	bne.n	8005018 <UART_SetConfig+0x104>
 8004faa:	4b9d      	ldr	r3, [pc, #628]	; (8005220 <UART_SetConfig+0x30c>)
 8004fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fae:	2203      	movs	r2, #3
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d020      	beq.n	8004ff8 <UART_SetConfig+0xe4>
 8004fb6:	d827      	bhi.n	8005008 <UART_SetConfig+0xf4>
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d00d      	beq.n	8004fd8 <UART_SetConfig+0xc4>
 8004fbc:	d824      	bhi.n	8005008 <UART_SetConfig+0xf4>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <UART_SetConfig+0xb4>
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d010      	beq.n	8004fe8 <UART_SetConfig+0xd4>
 8004fc6:	e01f      	b.n	8005008 <UART_SetConfig+0xf4>
 8004fc8:	231b      	movs	r3, #27
 8004fca:	2218      	movs	r2, #24
 8004fcc:	4694      	mov	ip, r2
 8004fce:	44bc      	add	ip, r7
 8004fd0:	4463      	add	r3, ip
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	e0c5      	b.n	8005164 <UART_SetConfig+0x250>
 8004fd8:	231b      	movs	r3, #27
 8004fda:	2218      	movs	r2, #24
 8004fdc:	4694      	mov	ip, r2
 8004fde:	44bc      	add	ip, r7
 8004fe0:	4463      	add	r3, ip
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e0bd      	b.n	8005164 <UART_SetConfig+0x250>
 8004fe8:	231b      	movs	r3, #27
 8004fea:	2218      	movs	r2, #24
 8004fec:	4694      	mov	ip, r2
 8004fee:	44bc      	add	ip, r7
 8004ff0:	4463      	add	r3, ip
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	e0b5      	b.n	8005164 <UART_SetConfig+0x250>
 8004ff8:	231b      	movs	r3, #27
 8004ffa:	2218      	movs	r2, #24
 8004ffc:	4694      	mov	ip, r2
 8004ffe:	44bc      	add	ip, r7
 8005000:	4463      	add	r3, ip
 8005002:	2208      	movs	r2, #8
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	e0ad      	b.n	8005164 <UART_SetConfig+0x250>
 8005008:	231b      	movs	r3, #27
 800500a:	2218      	movs	r2, #24
 800500c:	4694      	mov	ip, r2
 800500e:	44bc      	add	ip, r7
 8005010:	4463      	add	r3, ip
 8005012:	2210      	movs	r2, #16
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e0a5      	b.n	8005164 <UART_SetConfig+0x250>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a81      	ldr	r2, [pc, #516]	; (8005224 <UART_SetConfig+0x310>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d136      	bne.n	8005090 <UART_SetConfig+0x17c>
 8005022:	4b7f      	ldr	r3, [pc, #508]	; (8005220 <UART_SetConfig+0x30c>)
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	220c      	movs	r2, #12
 8005028:	4013      	ands	r3, r2
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d020      	beq.n	8005070 <UART_SetConfig+0x15c>
 800502e:	d827      	bhi.n	8005080 <UART_SetConfig+0x16c>
 8005030:	2b08      	cmp	r3, #8
 8005032:	d00d      	beq.n	8005050 <UART_SetConfig+0x13c>
 8005034:	d824      	bhi.n	8005080 <UART_SetConfig+0x16c>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <UART_SetConfig+0x12c>
 800503a:	2b04      	cmp	r3, #4
 800503c:	d010      	beq.n	8005060 <UART_SetConfig+0x14c>
 800503e:	e01f      	b.n	8005080 <UART_SetConfig+0x16c>
 8005040:	231b      	movs	r3, #27
 8005042:	2218      	movs	r2, #24
 8005044:	4694      	mov	ip, r2
 8005046:	44bc      	add	ip, r7
 8005048:	4463      	add	r3, ip
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e089      	b.n	8005164 <UART_SetConfig+0x250>
 8005050:	231b      	movs	r3, #27
 8005052:	2218      	movs	r2, #24
 8005054:	4694      	mov	ip, r2
 8005056:	44bc      	add	ip, r7
 8005058:	4463      	add	r3, ip
 800505a:	2202      	movs	r2, #2
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	e081      	b.n	8005164 <UART_SetConfig+0x250>
 8005060:	231b      	movs	r3, #27
 8005062:	2218      	movs	r2, #24
 8005064:	4694      	mov	ip, r2
 8005066:	44bc      	add	ip, r7
 8005068:	4463      	add	r3, ip
 800506a:	2204      	movs	r2, #4
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	e079      	b.n	8005164 <UART_SetConfig+0x250>
 8005070:	231b      	movs	r3, #27
 8005072:	2218      	movs	r2, #24
 8005074:	4694      	mov	ip, r2
 8005076:	44bc      	add	ip, r7
 8005078:	4463      	add	r3, ip
 800507a:	2208      	movs	r2, #8
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	e071      	b.n	8005164 <UART_SetConfig+0x250>
 8005080:	231b      	movs	r3, #27
 8005082:	2218      	movs	r2, #24
 8005084:	4694      	mov	ip, r2
 8005086:	44bc      	add	ip, r7
 8005088:	4463      	add	r3, ip
 800508a:	2210      	movs	r2, #16
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	e069      	b.n	8005164 <UART_SetConfig+0x250>
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a64      	ldr	r2, [pc, #400]	; (8005228 <UART_SetConfig+0x314>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d107      	bne.n	80050aa <UART_SetConfig+0x196>
 800509a:	231b      	movs	r3, #27
 800509c:	2218      	movs	r2, #24
 800509e:	4694      	mov	ip, r2
 80050a0:	44bc      	add	ip, r7
 80050a2:	4463      	add	r3, ip
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e05c      	b.n	8005164 <UART_SetConfig+0x250>
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a5f      	ldr	r2, [pc, #380]	; (800522c <UART_SetConfig+0x318>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d107      	bne.n	80050c4 <UART_SetConfig+0x1b0>
 80050b4:	231b      	movs	r3, #27
 80050b6:	2218      	movs	r2, #24
 80050b8:	4694      	mov	ip, r2
 80050ba:	44bc      	add	ip, r7
 80050bc:	4463      	add	r3, ip
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	e04f      	b.n	8005164 <UART_SetConfig+0x250>
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a52      	ldr	r2, [pc, #328]	; (8005214 <UART_SetConfig+0x300>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d143      	bne.n	8005156 <UART_SetConfig+0x242>
 80050ce:	4b54      	ldr	r3, [pc, #336]	; (8005220 <UART_SetConfig+0x30c>)
 80050d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050d2:	23c0      	movs	r3, #192	; 0xc0
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	4013      	ands	r3, r2
 80050d8:	22c0      	movs	r2, #192	; 0xc0
 80050da:	0112      	lsls	r2, r2, #4
 80050dc:	4293      	cmp	r3, r2
 80050de:	d02a      	beq.n	8005136 <UART_SetConfig+0x222>
 80050e0:	22c0      	movs	r2, #192	; 0xc0
 80050e2:	0112      	lsls	r2, r2, #4
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d82e      	bhi.n	8005146 <UART_SetConfig+0x232>
 80050e8:	2280      	movs	r2, #128	; 0x80
 80050ea:	0112      	lsls	r2, r2, #4
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d012      	beq.n	8005116 <UART_SetConfig+0x202>
 80050f0:	2280      	movs	r2, #128	; 0x80
 80050f2:	0112      	lsls	r2, r2, #4
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d826      	bhi.n	8005146 <UART_SetConfig+0x232>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <UART_SetConfig+0x1f2>
 80050fc:	2280      	movs	r2, #128	; 0x80
 80050fe:	00d2      	lsls	r2, r2, #3
 8005100:	4293      	cmp	r3, r2
 8005102:	d010      	beq.n	8005126 <UART_SetConfig+0x212>
 8005104:	e01f      	b.n	8005146 <UART_SetConfig+0x232>
 8005106:	231b      	movs	r3, #27
 8005108:	2218      	movs	r2, #24
 800510a:	4694      	mov	ip, r2
 800510c:	44bc      	add	ip, r7
 800510e:	4463      	add	r3, ip
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	e026      	b.n	8005164 <UART_SetConfig+0x250>
 8005116:	231b      	movs	r3, #27
 8005118:	2218      	movs	r2, #24
 800511a:	4694      	mov	ip, r2
 800511c:	44bc      	add	ip, r7
 800511e:	4463      	add	r3, ip
 8005120:	2202      	movs	r2, #2
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	e01e      	b.n	8005164 <UART_SetConfig+0x250>
 8005126:	231b      	movs	r3, #27
 8005128:	2218      	movs	r2, #24
 800512a:	4694      	mov	ip, r2
 800512c:	44bc      	add	ip, r7
 800512e:	4463      	add	r3, ip
 8005130:	2204      	movs	r2, #4
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	e016      	b.n	8005164 <UART_SetConfig+0x250>
 8005136:	231b      	movs	r3, #27
 8005138:	2218      	movs	r2, #24
 800513a:	4694      	mov	ip, r2
 800513c:	44bc      	add	ip, r7
 800513e:	4463      	add	r3, ip
 8005140:	2208      	movs	r2, #8
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	e00e      	b.n	8005164 <UART_SetConfig+0x250>
 8005146:	231b      	movs	r3, #27
 8005148:	2218      	movs	r2, #24
 800514a:	4694      	mov	ip, r2
 800514c:	44bc      	add	ip, r7
 800514e:	4463      	add	r3, ip
 8005150:	2210      	movs	r2, #16
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	e006      	b.n	8005164 <UART_SetConfig+0x250>
 8005156:	231b      	movs	r3, #27
 8005158:	2218      	movs	r2, #24
 800515a:	4694      	mov	ip, r2
 800515c:	44bc      	add	ip, r7
 800515e:	4463      	add	r3, ip
 8005160:	2210      	movs	r2, #16
 8005162:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <UART_SetConfig+0x300>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d000      	beq.n	8005170 <UART_SetConfig+0x25c>
 800516e:	e09e      	b.n	80052ae <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005170:	231b      	movs	r3, #27
 8005172:	2218      	movs	r2, #24
 8005174:	4694      	mov	ip, r2
 8005176:	44bc      	add	ip, r7
 8005178:	4463      	add	r3, ip
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d01d      	beq.n	80051bc <UART_SetConfig+0x2a8>
 8005180:	dc20      	bgt.n	80051c4 <UART_SetConfig+0x2b0>
 8005182:	2b04      	cmp	r3, #4
 8005184:	d015      	beq.n	80051b2 <UART_SetConfig+0x29e>
 8005186:	dc1d      	bgt.n	80051c4 <UART_SetConfig+0x2b0>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <UART_SetConfig+0x27e>
 800518c:	2b02      	cmp	r3, #2
 800518e:	d005      	beq.n	800519c <UART_SetConfig+0x288>
 8005190:	e018      	b.n	80051c4 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005192:	f7fe f995 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 8005196:	0003      	movs	r3, r0
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800519a:	e01d      	b.n	80051d8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800519c:	4b20      	ldr	r3, [pc, #128]	; (8005220 <UART_SetConfig+0x30c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2210      	movs	r2, #16
 80051a2:	4013      	ands	r3, r2
 80051a4:	d002      	beq.n	80051ac <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80051a6:	4b22      	ldr	r3, [pc, #136]	; (8005230 <UART_SetConfig+0x31c>)
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051aa:	e015      	b.n	80051d8 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 80051ac:	4b21      	ldr	r3, [pc, #132]	; (8005234 <UART_SetConfig+0x320>)
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051b0:	e012      	b.n	80051d8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b2:	f7fe f8d5 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 80051b6:	0003      	movs	r3, r0
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051ba:	e00d      	b.n	80051d8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051bc:	2380      	movs	r3, #128	; 0x80
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051c2:	e009      	b.n	80051d8 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80051c8:	231a      	movs	r3, #26
 80051ca:	2218      	movs	r2, #24
 80051cc:	4694      	mov	ip, r2
 80051ce:	44bc      	add	ip, r7
 80051d0:	4463      	add	r3, ip
 80051d2:	2201      	movs	r2, #1
 80051d4:	701a      	strb	r2, [r3, #0]
        break;
 80051d6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d100      	bne.n	80051e0 <UART_SetConfig+0x2cc>
 80051de:	e13c      	b.n	800545a <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	0013      	movs	r3, r2
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	189b      	adds	r3, r3, r2
 80051ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d305      	bcc.n	80051fc <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d91d      	bls.n	8005238 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 80051fc:	231a      	movs	r3, #26
 80051fe:	2218      	movs	r2, #24
 8005200:	4694      	mov	ip, r2
 8005202:	44bc      	add	ip, r7
 8005204:	4463      	add	r3, ip
 8005206:	2201      	movs	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e126      	b.n	800545a <UART_SetConfig+0x546>
 800520c:	efff69f3 	.word	0xefff69f3
 8005210:	ffffcfff 	.word	0xffffcfff
 8005214:	40004800 	.word	0x40004800
 8005218:	fffff4ff 	.word	0xfffff4ff
 800521c:	40013800 	.word	0x40013800
 8005220:	40021000 	.word	0x40021000
 8005224:	40004400 	.word	0x40004400
 8005228:	40004c00 	.word	0x40004c00
 800522c:	40005000 	.word	0x40005000
 8005230:	003d0900 	.word	0x003d0900
 8005234:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	6939      	ldr	r1, [r7, #16]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	000b      	movs	r3, r1
 8005246:	0e1b      	lsrs	r3, r3, #24
 8005248:	0010      	movs	r0, r2
 800524a:	0205      	lsls	r5, r0, #8
 800524c:	431d      	orrs	r5, r3
 800524e:	000b      	movs	r3, r1
 8005250:	021c      	lsls	r4, r3, #8
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	68b8      	ldr	r0, [r7, #8]
 8005260:	68f9      	ldr	r1, [r7, #12]
 8005262:	1900      	adds	r0, r0, r4
 8005264:	4169      	adcs	r1, r5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	2300      	movs	r3, #0
 800526e:	607b      	str	r3, [r7, #4]
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f7fa ffe6 	bl	8000244 <__aeabi_uldivmod>
 8005278:	0002      	movs	r2, r0
 800527a:	000b      	movs	r3, r1
 800527c:	0013      	movs	r3, r2
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005282:	23c0      	movs	r3, #192	; 0xc0
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	429a      	cmp	r2, r3
 8005288:	d309      	bcc.n	800529e <UART_SetConfig+0x38a>
 800528a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	035b      	lsls	r3, r3, #13
 8005290:	429a      	cmp	r2, r3
 8005292:	d204      	bcs.n	800529e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800529a:	60da      	str	r2, [r3, #12]
 800529c:	e0dd      	b.n	800545a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800529e:	231a      	movs	r3, #26
 80052a0:	2218      	movs	r2, #24
 80052a2:	4694      	mov	ip, r2
 80052a4:	44bc      	add	ip, r7
 80052a6:	4463      	add	r3, ip
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e0d5      	b.n	800545a <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	69da      	ldr	r2, [r3, #28]
 80052b2:	2380      	movs	r3, #128	; 0x80
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d000      	beq.n	80052bc <UART_SetConfig+0x3a8>
 80052ba:	e074      	b.n	80053a6 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 80052bc:	231b      	movs	r3, #27
 80052be:	2218      	movs	r2, #24
 80052c0:	4694      	mov	ip, r2
 80052c2:	44bc      	add	ip, r7
 80052c4:	4463      	add	r3, ip
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d822      	bhi.n	8005312 <UART_SetConfig+0x3fe>
 80052cc:	009a      	lsls	r2, r3, #2
 80052ce:	4b6b      	ldr	r3, [pc, #428]	; (800547c <UART_SetConfig+0x568>)
 80052d0:	18d3      	adds	r3, r2, r3
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d6:	f7fe f8f3 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 80052da:	0003      	movs	r3, r0
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052de:	e022      	b.n	8005326 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e0:	f7fe f904 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 80052e4:	0003      	movs	r3, r0
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052e8:	e01d      	b.n	8005326 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052ea:	4b65      	ldr	r3, [pc, #404]	; (8005480 <UART_SetConfig+0x56c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2210      	movs	r2, #16
 80052f0:	4013      	ands	r3, r2
 80052f2:	d002      	beq.n	80052fa <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052f4:	4b63      	ldr	r3, [pc, #396]	; (8005484 <UART_SetConfig+0x570>)
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052f8:	e015      	b.n	8005326 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80052fa:	4b63      	ldr	r3, [pc, #396]	; (8005488 <UART_SetConfig+0x574>)
 80052fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052fe:	e012      	b.n	8005326 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005300:	f7fe f82e 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 8005304:	0003      	movs	r3, r0
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005308:	e00d      	b.n	8005326 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005310:	e009      	b.n	8005326 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005316:	231a      	movs	r3, #26
 8005318:	2218      	movs	r2, #24
 800531a:	4694      	mov	ip, r2
 800531c:	44bc      	add	ip, r7
 800531e:	4463      	add	r3, ip
 8005320:	2201      	movs	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
        break;
 8005324:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d100      	bne.n	800532e <UART_SetConfig+0x41a>
 800532c:	e095      	b.n	800545a <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	005a      	lsls	r2, r3, #1
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	18d2      	adds	r2, r2, r3
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	0019      	movs	r1, r3
 8005340:	0010      	movs	r0, r2
 8005342:	f7fa fef3 	bl	800012c <__udivsi3>
 8005346:	0003      	movs	r3, r0
 8005348:	b29b      	uxth	r3, r3
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	2b0f      	cmp	r3, #15
 8005350:	d921      	bls.n	8005396 <UART_SetConfig+0x482>
 8005352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	025b      	lsls	r3, r3, #9
 8005358:	429a      	cmp	r2, r3
 800535a:	d21c      	bcs.n	8005396 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	b29a      	uxth	r2, r3
 8005360:	200e      	movs	r0, #14
 8005362:	2418      	movs	r4, #24
 8005364:	193b      	adds	r3, r7, r4
 8005366:	181b      	adds	r3, r3, r0
 8005368:	210f      	movs	r1, #15
 800536a:	438a      	bics	r2, r1
 800536c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	b29b      	uxth	r3, r3
 8005374:	2207      	movs	r2, #7
 8005376:	4013      	ands	r3, r2
 8005378:	b299      	uxth	r1, r3
 800537a:	193b      	adds	r3, r7, r4
 800537c:	181b      	adds	r3, r3, r0
 800537e:	193a      	adds	r2, r7, r4
 8005380:	1812      	adds	r2, r2, r0
 8005382:	8812      	ldrh	r2, [r2, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	193a      	adds	r2, r7, r4
 800538e:	1812      	adds	r2, r2, r0
 8005390:	8812      	ldrh	r2, [r2, #0]
 8005392:	60da      	str	r2, [r3, #12]
 8005394:	e061      	b.n	800545a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005396:	231a      	movs	r3, #26
 8005398:	2218      	movs	r2, #24
 800539a:	4694      	mov	ip, r2
 800539c:	44bc      	add	ip, r7
 800539e:	4463      	add	r3, ip
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	e059      	b.n	800545a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053a6:	231b      	movs	r3, #27
 80053a8:	2218      	movs	r2, #24
 80053aa:	4694      	mov	ip, r2
 80053ac:	44bc      	add	ip, r7
 80053ae:	4463      	add	r3, ip
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d822      	bhi.n	80053fc <UART_SetConfig+0x4e8>
 80053b6:	009a      	lsls	r2, r3, #2
 80053b8:	4b34      	ldr	r3, [pc, #208]	; (800548c <UART_SetConfig+0x578>)
 80053ba:	18d3      	adds	r3, r2, r3
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c0:	f7fe f87e 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 80053c4:	0003      	movs	r3, r0
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053c8:	e022      	b.n	8005410 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053ca:	f7fe f88f 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 80053ce:	0003      	movs	r3, r0
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053d2:	e01d      	b.n	8005410 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d4:	4b2a      	ldr	r3, [pc, #168]	; (8005480 <UART_SetConfig+0x56c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2210      	movs	r2, #16
 80053da:	4013      	ands	r3, r2
 80053dc:	d002      	beq.n	80053e4 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053de:	4b29      	ldr	r3, [pc, #164]	; (8005484 <UART_SetConfig+0x570>)
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053e2:	e015      	b.n	8005410 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 80053e4:	4b28      	ldr	r3, [pc, #160]	; (8005488 <UART_SetConfig+0x574>)
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053e8:	e012      	b.n	8005410 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ea:	f7fd ffb9 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 80053ee:	0003      	movs	r3, r0
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053f2:	e00d      	b.n	8005410 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053fa:	e009      	b.n	8005410 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005400:	231a      	movs	r3, #26
 8005402:	2218      	movs	r2, #24
 8005404:	4694      	mov	ip, r2
 8005406:	44bc      	add	ip, r7
 8005408:	4463      	add	r3, ip
 800540a:	2201      	movs	r2, #1
 800540c:	701a      	strb	r2, [r3, #0]
        break;
 800540e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d021      	beq.n	800545a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	085a      	lsrs	r2, r3, #1
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	18d2      	adds	r2, r2, r3
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	0019      	movs	r1, r3
 8005426:	0010      	movs	r0, r2
 8005428:	f7fa fe80 	bl	800012c <__udivsi3>
 800542c:	0003      	movs	r3, r0
 800542e:	b29b      	uxth	r3, r3
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	2b0f      	cmp	r3, #15
 8005436:	d909      	bls.n	800544c <UART_SetConfig+0x538>
 8005438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	025b      	lsls	r3, r3, #9
 800543e:	429a      	cmp	r2, r3
 8005440:	d204      	bcs.n	800544c <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	e006      	b.n	800545a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800544c:	231a      	movs	r3, #26
 800544e:	2218      	movs	r2, #24
 8005450:	4694      	mov	ip, r2
 8005452:	44bc      	add	ip, r7
 8005454:	4463      	add	r3, ip
 8005456:	2201      	movs	r2, #1
 8005458:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	2200      	movs	r2, #0
 800545e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2200      	movs	r2, #0
 8005464:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005466:	231a      	movs	r3, #26
 8005468:	2218      	movs	r2, #24
 800546a:	4694      	mov	ip, r2
 800546c:	44bc      	add	ip, r7
 800546e:	4463      	add	r3, ip
 8005470:	781b      	ldrb	r3, [r3, #0]
}
 8005472:	0018      	movs	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	b00e      	add	sp, #56	; 0x38
 8005478:	bdb0      	pop	{r4, r5, r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	080065d0 	.word	0x080065d0
 8005480:	40021000 	.word	0x40021000
 8005484:	003d0900 	.word	0x003d0900
 8005488:	00f42400 	.word	0x00f42400
 800548c:	080065f4 	.word	0x080065f4

08005490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	2201      	movs	r2, #1
 800549e:	4013      	ands	r3, r2
 80054a0:	d00b      	beq.n	80054ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4a4a      	ldr	r2, [pc, #296]	; (80055d4 <UART_AdvFeatureConfig+0x144>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	0019      	movs	r1, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	2202      	movs	r2, #2
 80054c0:	4013      	ands	r3, r2
 80054c2:	d00b      	beq.n	80054dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	4a43      	ldr	r2, [pc, #268]	; (80055d8 <UART_AdvFeatureConfig+0x148>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	0019      	movs	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2204      	movs	r2, #4
 80054e2:	4013      	ands	r3, r2
 80054e4:	d00b      	beq.n	80054fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4a3b      	ldr	r2, [pc, #236]	; (80055dc <UART_AdvFeatureConfig+0x14c>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	0019      	movs	r1, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	2208      	movs	r2, #8
 8005504:	4013      	ands	r3, r2
 8005506:	d00b      	beq.n	8005520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4a34      	ldr	r2, [pc, #208]	; (80055e0 <UART_AdvFeatureConfig+0x150>)
 8005510:	4013      	ands	r3, r2
 8005512:	0019      	movs	r1, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	2210      	movs	r2, #16
 8005526:	4013      	ands	r3, r2
 8005528:	d00b      	beq.n	8005542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	4a2c      	ldr	r2, [pc, #176]	; (80055e4 <UART_AdvFeatureConfig+0x154>)
 8005532:	4013      	ands	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2220      	movs	r2, #32
 8005548:	4013      	ands	r3, r2
 800554a:	d00b      	beq.n	8005564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <UART_AdvFeatureConfig+0x158>)
 8005554:	4013      	ands	r3, r2
 8005556:	0019      	movs	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2240      	movs	r2, #64	; 0x40
 800556a:	4013      	ands	r3, r2
 800556c:	d01d      	beq.n	80055aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4a1d      	ldr	r2, [pc, #116]	; (80055ec <UART_AdvFeatureConfig+0x15c>)
 8005576:	4013      	ands	r3, r2
 8005578:	0019      	movs	r1, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800558a:	2380      	movs	r3, #128	; 0x80
 800558c:	035b      	lsls	r3, r3, #13
 800558e:	429a      	cmp	r2, r3
 8005590:	d10b      	bne.n	80055aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <UART_AdvFeatureConfig+0x160>)
 800559a:	4013      	ands	r3, r2
 800559c:	0019      	movs	r1, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	4013      	ands	r3, r2
 80055b2:	d00b      	beq.n	80055cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4a0e      	ldr	r2, [pc, #56]	; (80055f4 <UART_AdvFeatureConfig+0x164>)
 80055bc:	4013      	ands	r3, r2
 80055be:	0019      	movs	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }
}
 80055cc:	46c0      	nop			; (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b002      	add	sp, #8
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	fffdffff 	.word	0xfffdffff
 80055d8:	fffeffff 	.word	0xfffeffff
 80055dc:	fffbffff 	.word	0xfffbffff
 80055e0:	ffff7fff 	.word	0xffff7fff
 80055e4:	ffffefff 	.word	0xffffefff
 80055e8:	ffffdfff 	.word	0xffffdfff
 80055ec:	ffefffff 	.word	0xffefffff
 80055f0:	ff9fffff 	.word	0xff9fffff
 80055f4:	fff7ffff 	.word	0xfff7ffff

080055f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2280      	movs	r2, #128	; 0x80
 8005604:	2100      	movs	r1, #0
 8005606:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005608:	f7fc fa1e 	bl	8001a48 <HAL_GetTick>
 800560c:	0003      	movs	r3, r0
 800560e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2208      	movs	r2, #8
 8005618:	4013      	ands	r3, r2
 800561a:	2b08      	cmp	r3, #8
 800561c:	d10c      	bne.n	8005638 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2280      	movs	r2, #128	; 0x80
 8005622:	0391      	lsls	r1, r2, #14
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4a17      	ldr	r2, [pc, #92]	; (8005684 <UART_CheckIdleState+0x8c>)
 8005628:	9200      	str	r2, [sp, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	f000 f82c 	bl	8005688 <UART_WaitOnFlagUntilTimeout>
 8005630:	1e03      	subs	r3, r0, #0
 8005632:	d001      	beq.n	8005638 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e021      	b.n	800567c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2204      	movs	r2, #4
 8005640:	4013      	ands	r3, r2
 8005642:	2b04      	cmp	r3, #4
 8005644:	d10c      	bne.n	8005660 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2280      	movs	r2, #128	; 0x80
 800564a:	03d1      	lsls	r1, r2, #15
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <UART_CheckIdleState+0x8c>)
 8005650:	9200      	str	r2, [sp, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	f000 f818 	bl	8005688 <UART_WaitOnFlagUntilTimeout>
 8005658:	1e03      	subs	r3, r0, #0
 800565a:	d001      	beq.n	8005660 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e00d      	b.n	800567c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2274      	movs	r2, #116	; 0x74
 8005676:	2100      	movs	r1, #0
 8005678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	0018      	movs	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	b004      	add	sp, #16
 8005682:	bd80      	pop	{r7, pc}
 8005684:	01ffffff 	.word	0x01ffffff

08005688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b094      	sub	sp, #80	; 0x50
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	1dfb      	adds	r3, r7, #7
 8005696:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005698:	e0a3      	b.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800569c:	3301      	adds	r3, #1
 800569e:	d100      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80056a0:	e09f      	b.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a2:	f7fc f9d1 	bl	8001a48 <HAL_GetTick>
 80056a6:	0002      	movs	r2, r0
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d302      	bcc.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d13d      	bne.n	8005734 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b8:	f3ef 8310 	mrs	r3, PRIMASK
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056c0:	647b      	str	r3, [r7, #68]	; 0x44
 80056c2:	2301      	movs	r3, #1
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	f383 8810 	msr	PRIMASK, r3
}
 80056cc:	46c0      	nop			; (mov r8, r8)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	494c      	ldr	r1, [pc, #304]	; (800580c <UART_WaitOnFlagUntilTimeout+0x184>)
 80056da:	400a      	ands	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	f383 8810 	msr	PRIMASK, r3
}
 80056e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ea:	f3ef 8310 	mrs	r3, PRIMASK
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f2:	643b      	str	r3, [r7, #64]	; 0x40
 80056f4:	2301      	movs	r3, #1
 80056f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fa:	f383 8810 	msr	PRIMASK, r3
}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2101      	movs	r1, #1
 800570c:	438a      	bics	r2, r1
 800570e:	609a      	str	r2, [r3, #8]
 8005710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	f383 8810 	msr	PRIMASK, r3
}
 800571a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2274      	movs	r2, #116	; 0x74
 800572c:	2100      	movs	r1, #0
 800572e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e067      	b.n	8005804 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2204      	movs	r2, #4
 800573c:	4013      	ands	r3, r2
 800573e:	d050      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	401a      	ands	r2, r3
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	429a      	cmp	r2, r3
 8005752:	d146      	bne.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2280      	movs	r2, #128	; 0x80
 800575a:	0112      	lsls	r2, r2, #4
 800575c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575e:	f3ef 8310 	mrs	r3, PRIMASK
 8005762:	613b      	str	r3, [r7, #16]
  return(result);
 8005764:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005768:	2301      	movs	r3, #1
 800576a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f383 8810 	msr	PRIMASK, r3
}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4923      	ldr	r1, [pc, #140]	; (800580c <UART_WaitOnFlagUntilTimeout+0x184>)
 8005780:	400a      	ands	r2, r1
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005786:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f383 8810 	msr	PRIMASK, r3
}
 800578e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005790:	f3ef 8310 	mrs	r3, PRIMASK
 8005794:	61fb      	str	r3, [r7, #28]
  return(result);
 8005796:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005798:	64bb      	str	r3, [r7, #72]	; 0x48
 800579a:	2301      	movs	r3, #1
 800579c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	f383 8810 	msr	PRIMASK, r3
}
 80057a4:	46c0      	nop			; (mov r8, r8)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2101      	movs	r1, #1
 80057b2:	438a      	bics	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]
 80057b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	f383 8810 	msr	PRIMASK, r3
}
 80057c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	2120      	movs	r1, #32
 80057d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2274      	movs	r2, #116	; 0x74
 80057da:	2100      	movs	r1, #0
 80057dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e010      	b.n	8005804 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	425a      	negs	r2, r3
 80057f2:	4153      	adcs	r3, r2
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	001a      	movs	r2, r3
 80057f8:	1dfb      	adds	r3, r7, #7
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d100      	bne.n	8005802 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005800:	e74b      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	0018      	movs	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	b014      	add	sp, #80	; 0x50
 800580a:	bd80      	pop	{r7, pc}
 800580c:	fffffe5f 	.word	0xfffffe5f

08005810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08e      	sub	sp, #56	; 0x38
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005818:	f3ef 8310 	mrs	r3, PRIMASK
 800581c:	617b      	str	r3, [r7, #20]
  return(result);
 800581e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005820:	637b      	str	r3, [r7, #52]	; 0x34
 8005822:	2301      	movs	r3, #1
 8005824:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f383 8810 	msr	PRIMASK, r3
}
 800582c:	46c0      	nop			; (mov r8, r8)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4925      	ldr	r1, [pc, #148]	; (80058d0 <UART_EndRxTransfer+0xc0>)
 800583a:	400a      	ands	r2, r1
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f383 8810 	msr	PRIMASK, r3
}
 8005848:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800584a:	f3ef 8310 	mrs	r3, PRIMASK
 800584e:	623b      	str	r3, [r7, #32]
  return(result);
 8005850:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005852:	633b      	str	r3, [r7, #48]	; 0x30
 8005854:	2301      	movs	r3, #1
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	f383 8810 	msr	PRIMASK, r3
}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2101      	movs	r1, #1
 800586c:	438a      	bics	r2, r1
 800586e:	609a      	str	r2, [r3, #8]
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	f383 8810 	msr	PRIMASK, r3
}
 800587a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005880:	2b01      	cmp	r3, #1
 8005882:	d118      	bne.n	80058b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005884:	f3ef 8310 	mrs	r3, PRIMASK
 8005888:	60bb      	str	r3, [r7, #8]
  return(result);
 800588a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588e:	2301      	movs	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f383 8810 	msr	PRIMASK, r3
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2110      	movs	r1, #16
 80058a6:	438a      	bics	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f383 8810 	msr	PRIMASK, r3
}
 80058b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2220      	movs	r2, #32
 80058ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058c8:	46c0      	nop			; (mov r8, r8)
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b00e      	add	sp, #56	; 0x38
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	fffffedf 	.word	0xfffffedf

080058d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	225a      	movs	r2, #90	; 0x5a
 80058e6:	2100      	movs	r1, #0
 80058e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2252      	movs	r2, #82	; 0x52
 80058ee:	2100      	movs	r1, #0
 80058f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	0018      	movs	r0, r3
 80058f6:	f7ff faf9 	bl	8004eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	46bd      	mov	sp, r7
 80058fe:	b004      	add	sp, #16
 8005900:	bd80      	pop	{r7, pc}

08005902 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590a:	f3ef 8310 	mrs	r3, PRIMASK
 800590e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005910:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	2301      	movs	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f383 8810 	msr	PRIMASK, r3
}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2140      	movs	r1, #64	; 0x40
 800592c:	438a      	bics	r2, r1
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f383 8810 	msr	PRIMASK, r3
}
 800593a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	0018      	movs	r0, r3
 800594c:	f7ff fac6 	bl	8004edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005950:	46c0      	nop			; (mov r8, r8)
 8005952:	46bd      	mov	sp, r7
 8005954:	b006      	add	sp, #24
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005960:	46c0      	nop			; (mov r8, r8)
 8005962:	46bd      	mov	sp, r7
 8005964:	b002      	add	sp, #8
 8005966:	bd80      	pop	{r7, pc}

08005968 <atoi>:
 8005968:	b510      	push	{r4, lr}
 800596a:	220a      	movs	r2, #10
 800596c:	2100      	movs	r1, #0
 800596e:	f000 f90f 	bl	8005b90 <strtol>
 8005972:	bd10      	pop	{r4, pc}

08005974 <__errno>:
 8005974:	4b01      	ldr	r3, [pc, #4]	; (800597c <__errno+0x8>)
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	4770      	bx	lr
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	2000001c 	.word	0x2000001c

08005980 <__libc_init_array>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	2600      	movs	r6, #0
 8005984:	4d0c      	ldr	r5, [pc, #48]	; (80059b8 <__libc_init_array+0x38>)
 8005986:	4c0d      	ldr	r4, [pc, #52]	; (80059bc <__libc_init_array+0x3c>)
 8005988:	1b64      	subs	r4, r4, r5
 800598a:	10a4      	asrs	r4, r4, #2
 800598c:	42a6      	cmp	r6, r4
 800598e:	d109      	bne.n	80059a4 <__libc_init_array+0x24>
 8005990:	2600      	movs	r6, #0
 8005992:	f000 fd13 	bl	80063bc <_init>
 8005996:	4d0a      	ldr	r5, [pc, #40]	; (80059c0 <__libc_init_array+0x40>)
 8005998:	4c0a      	ldr	r4, [pc, #40]	; (80059c4 <__libc_init_array+0x44>)
 800599a:	1b64      	subs	r4, r4, r5
 800599c:	10a4      	asrs	r4, r4, #2
 800599e:	42a6      	cmp	r6, r4
 80059a0:	d105      	bne.n	80059ae <__libc_init_array+0x2e>
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	00b3      	lsls	r3, r6, #2
 80059a6:	58eb      	ldr	r3, [r5, r3]
 80059a8:	4798      	blx	r3
 80059aa:	3601      	adds	r6, #1
 80059ac:	e7ee      	b.n	800598c <__libc_init_array+0xc>
 80059ae:	00b3      	lsls	r3, r6, #2
 80059b0:	58eb      	ldr	r3, [r5, r3]
 80059b2:	4798      	blx	r3
 80059b4:	3601      	adds	r6, #1
 80059b6:	e7f2      	b.n	800599e <__libc_init_array+0x1e>
 80059b8:	08006754 	.word	0x08006754
 80059bc:	08006754 	.word	0x08006754
 80059c0:	08006754 	.word	0x08006754
 80059c4:	08006758 	.word	0x08006758

080059c8 <memcpy>:
 80059c8:	2300      	movs	r3, #0
 80059ca:	b510      	push	{r4, lr}
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d100      	bne.n	80059d2 <memcpy+0xa>
 80059d0:	bd10      	pop	{r4, pc}
 80059d2:	5ccc      	ldrb	r4, [r1, r3]
 80059d4:	54c4      	strb	r4, [r0, r3]
 80059d6:	3301      	adds	r3, #1
 80059d8:	e7f8      	b.n	80059cc <memcpy+0x4>

080059da <memset>:
 80059da:	0003      	movs	r3, r0
 80059dc:	1882      	adds	r2, r0, r2
 80059de:	4293      	cmp	r3, r2
 80059e0:	d100      	bne.n	80059e4 <memset+0xa>
 80059e2:	4770      	bx	lr
 80059e4:	7019      	strb	r1, [r3, #0]
 80059e6:	3301      	adds	r3, #1
 80059e8:	e7f9      	b.n	80059de <memset+0x4>
	...

080059ec <siprintf>:
 80059ec:	b40e      	push	{r1, r2, r3}
 80059ee:	b500      	push	{lr}
 80059f0:	490b      	ldr	r1, [pc, #44]	; (8005a20 <siprintf+0x34>)
 80059f2:	b09c      	sub	sp, #112	; 0x70
 80059f4:	ab1d      	add	r3, sp, #116	; 0x74
 80059f6:	9002      	str	r0, [sp, #8]
 80059f8:	9006      	str	r0, [sp, #24]
 80059fa:	9107      	str	r1, [sp, #28]
 80059fc:	9104      	str	r1, [sp, #16]
 80059fe:	4809      	ldr	r0, [pc, #36]	; (8005a24 <siprintf+0x38>)
 8005a00:	4909      	ldr	r1, [pc, #36]	; (8005a28 <siprintf+0x3c>)
 8005a02:	cb04      	ldmia	r3!, {r2}
 8005a04:	9105      	str	r1, [sp, #20]
 8005a06:	6800      	ldr	r0, [r0, #0]
 8005a08:	a902      	add	r1, sp, #8
 8005a0a:	9301      	str	r3, [sp, #4]
 8005a0c:	f000 f92e 	bl	8005c6c <_svfiprintf_r>
 8005a10:	2300      	movs	r3, #0
 8005a12:	9a02      	ldr	r2, [sp, #8]
 8005a14:	7013      	strb	r3, [r2, #0]
 8005a16:	b01c      	add	sp, #112	; 0x70
 8005a18:	bc08      	pop	{r3}
 8005a1a:	b003      	add	sp, #12
 8005a1c:	4718      	bx	r3
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	7fffffff 	.word	0x7fffffff
 8005a24:	2000001c 	.word	0x2000001c
 8005a28:	ffff0208 	.word	0xffff0208

08005a2c <strncmp>:
 8005a2c:	b530      	push	{r4, r5, lr}
 8005a2e:	0005      	movs	r5, r0
 8005a30:	1e10      	subs	r0, r2, #0
 8005a32:	d00b      	beq.n	8005a4c <strncmp+0x20>
 8005a34:	2400      	movs	r4, #0
 8005a36:	3a01      	subs	r2, #1
 8005a38:	5d2b      	ldrb	r3, [r5, r4]
 8005a3a:	5d08      	ldrb	r0, [r1, r4]
 8005a3c:	4283      	cmp	r3, r0
 8005a3e:	d104      	bne.n	8005a4a <strncmp+0x1e>
 8005a40:	4294      	cmp	r4, r2
 8005a42:	d002      	beq.n	8005a4a <strncmp+0x1e>
 8005a44:	3401      	adds	r4, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f6      	bne.n	8005a38 <strncmp+0xc>
 8005a4a:	1a18      	subs	r0, r3, r0
 8005a4c:	bd30      	pop	{r4, r5, pc}

08005a4e <strrchr>:
 8005a4e:	b570      	push	{r4, r5, r6, lr}
 8005a50:	2400      	movs	r4, #0
 8005a52:	000d      	movs	r5, r1
 8005a54:	42a1      	cmp	r1, r4
 8005a56:	d106      	bne.n	8005a66 <strrchr+0x18>
 8005a58:	0021      	movs	r1, r4
 8005a5a:	f000 fb89 	bl	8006170 <strchr>
 8005a5e:	0004      	movs	r4, r0
 8005a60:	e006      	b.n	8005a70 <strrchr+0x22>
 8005a62:	001c      	movs	r4, r3
 8005a64:	1c58      	adds	r0, r3, #1
 8005a66:	0029      	movs	r1, r5
 8005a68:	f000 fb82 	bl	8006170 <strchr>
 8005a6c:	1e03      	subs	r3, r0, #0
 8005a6e:	d1f8      	bne.n	8005a62 <strrchr+0x14>
 8005a70:	0020      	movs	r0, r4
 8005a72:	bd70      	pop	{r4, r5, r6, pc}

08005a74 <_strtol_l.isra.0>:
 8005a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a76:	b087      	sub	sp, #28
 8005a78:	001e      	movs	r6, r3
 8005a7a:	9005      	str	r0, [sp, #20]
 8005a7c:	9101      	str	r1, [sp, #4]
 8005a7e:	9202      	str	r2, [sp, #8]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d045      	beq.n	8005b10 <_strtol_l.isra.0+0x9c>
 8005a84:	0008      	movs	r0, r1
 8005a86:	2b24      	cmp	r3, #36	; 0x24
 8005a88:	d842      	bhi.n	8005b10 <_strtol_l.isra.0+0x9c>
 8005a8a:	4b3f      	ldr	r3, [pc, #252]	; (8005b88 <_strtol_l.isra.0+0x114>)
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	469c      	mov	ip, r3
 8005a90:	0003      	movs	r3, r0
 8005a92:	4661      	mov	r1, ip
 8005a94:	781c      	ldrb	r4, [r3, #0]
 8005a96:	1c45      	adds	r5, r0, #1
 8005a98:	5d09      	ldrb	r1, [r1, r4]
 8005a9a:	0028      	movs	r0, r5
 8005a9c:	000f      	movs	r7, r1
 8005a9e:	4017      	ands	r7, r2
 8005aa0:	4211      	tst	r1, r2
 8005aa2:	d1f5      	bne.n	8005a90 <_strtol_l.isra.0+0x1c>
 8005aa4:	2c2d      	cmp	r4, #45	; 0x2d
 8005aa6:	d13a      	bne.n	8005b1e <_strtol_l.isra.0+0xaa>
 8005aa8:	2701      	movs	r7, #1
 8005aaa:	782c      	ldrb	r4, [r5, #0]
 8005aac:	1c9d      	adds	r5, r3, #2
 8005aae:	2e00      	cmp	r6, #0
 8005ab0:	d065      	beq.n	8005b7e <_strtol_l.isra.0+0x10a>
 8005ab2:	2e10      	cmp	r6, #16
 8005ab4:	d109      	bne.n	8005aca <_strtol_l.isra.0+0x56>
 8005ab6:	2c30      	cmp	r4, #48	; 0x30
 8005ab8:	d107      	bne.n	8005aca <_strtol_l.isra.0+0x56>
 8005aba:	2220      	movs	r2, #32
 8005abc:	782b      	ldrb	r3, [r5, #0]
 8005abe:	4393      	bics	r3, r2
 8005ac0:	2b58      	cmp	r3, #88	; 0x58
 8005ac2:	d157      	bne.n	8005b74 <_strtol_l.isra.0+0x100>
 8005ac4:	2610      	movs	r6, #16
 8005ac6:	786c      	ldrb	r4, [r5, #1]
 8005ac8:	3502      	adds	r5, #2
 8005aca:	4b30      	ldr	r3, [pc, #192]	; (8005b8c <_strtol_l.isra.0+0x118>)
 8005acc:	0031      	movs	r1, r6
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	9303      	str	r3, [sp, #12]
 8005ad4:	f7fa fbb0 	bl	8000238 <__aeabi_uidivmod>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2201      	movs	r2, #1
 8005adc:	4684      	mov	ip, r0
 8005ade:	0018      	movs	r0, r3
 8005ae0:	9104      	str	r1, [sp, #16]
 8005ae2:	4252      	negs	r2, r2
 8005ae4:	0021      	movs	r1, r4
 8005ae6:	3930      	subs	r1, #48	; 0x30
 8005ae8:	2909      	cmp	r1, #9
 8005aea:	d81d      	bhi.n	8005b28 <_strtol_l.isra.0+0xb4>
 8005aec:	000c      	movs	r4, r1
 8005aee:	42a6      	cmp	r6, r4
 8005af0:	dd28      	ble.n	8005b44 <_strtol_l.isra.0+0xd0>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	db24      	blt.n	8005b40 <_strtol_l.isra.0+0xcc>
 8005af6:	0013      	movs	r3, r2
 8005af8:	4584      	cmp	ip, r0
 8005afa:	d306      	bcc.n	8005b0a <_strtol_l.isra.0+0x96>
 8005afc:	d102      	bne.n	8005b04 <_strtol_l.isra.0+0x90>
 8005afe:	9904      	ldr	r1, [sp, #16]
 8005b00:	42a1      	cmp	r1, r4
 8005b02:	db02      	blt.n	8005b0a <_strtol_l.isra.0+0x96>
 8005b04:	2301      	movs	r3, #1
 8005b06:	4370      	muls	r0, r6
 8005b08:	1820      	adds	r0, r4, r0
 8005b0a:	782c      	ldrb	r4, [r5, #0]
 8005b0c:	3501      	adds	r5, #1
 8005b0e:	e7e9      	b.n	8005ae4 <_strtol_l.isra.0+0x70>
 8005b10:	f7ff ff30 	bl	8005974 <__errno>
 8005b14:	2316      	movs	r3, #22
 8005b16:	6003      	str	r3, [r0, #0]
 8005b18:	2000      	movs	r0, #0
 8005b1a:	b007      	add	sp, #28
 8005b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b1e:	2c2b      	cmp	r4, #43	; 0x2b
 8005b20:	d1c5      	bne.n	8005aae <_strtol_l.isra.0+0x3a>
 8005b22:	782c      	ldrb	r4, [r5, #0]
 8005b24:	1c9d      	adds	r5, r3, #2
 8005b26:	e7c2      	b.n	8005aae <_strtol_l.isra.0+0x3a>
 8005b28:	0021      	movs	r1, r4
 8005b2a:	3941      	subs	r1, #65	; 0x41
 8005b2c:	2919      	cmp	r1, #25
 8005b2e:	d801      	bhi.n	8005b34 <_strtol_l.isra.0+0xc0>
 8005b30:	3c37      	subs	r4, #55	; 0x37
 8005b32:	e7dc      	b.n	8005aee <_strtol_l.isra.0+0x7a>
 8005b34:	0021      	movs	r1, r4
 8005b36:	3961      	subs	r1, #97	; 0x61
 8005b38:	2919      	cmp	r1, #25
 8005b3a:	d803      	bhi.n	8005b44 <_strtol_l.isra.0+0xd0>
 8005b3c:	3c57      	subs	r4, #87	; 0x57
 8005b3e:	e7d6      	b.n	8005aee <_strtol_l.isra.0+0x7a>
 8005b40:	0013      	movs	r3, r2
 8005b42:	e7e2      	b.n	8005b0a <_strtol_l.isra.0+0x96>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da09      	bge.n	8005b5c <_strtol_l.isra.0+0xe8>
 8005b48:	2322      	movs	r3, #34	; 0x22
 8005b4a:	9a05      	ldr	r2, [sp, #20]
 8005b4c:	9803      	ldr	r0, [sp, #12]
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	9b02      	ldr	r3, [sp, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0e1      	beq.n	8005b1a <_strtol_l.isra.0+0xa6>
 8005b56:	1e6b      	subs	r3, r5, #1
 8005b58:	9301      	str	r3, [sp, #4]
 8005b5a:	e007      	b.n	8005b6c <_strtol_l.isra.0+0xf8>
 8005b5c:	2f00      	cmp	r7, #0
 8005b5e:	d000      	beq.n	8005b62 <_strtol_l.isra.0+0xee>
 8005b60:	4240      	negs	r0, r0
 8005b62:	9a02      	ldr	r2, [sp, #8]
 8005b64:	2a00      	cmp	r2, #0
 8005b66:	d0d8      	beq.n	8005b1a <_strtol_l.isra.0+0xa6>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f4      	bne.n	8005b56 <_strtol_l.isra.0+0xe2>
 8005b6c:	9b02      	ldr	r3, [sp, #8]
 8005b6e:	9a01      	ldr	r2, [sp, #4]
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e7d2      	b.n	8005b1a <_strtol_l.isra.0+0xa6>
 8005b74:	2430      	movs	r4, #48	; 0x30
 8005b76:	2e00      	cmp	r6, #0
 8005b78:	d1a7      	bne.n	8005aca <_strtol_l.isra.0+0x56>
 8005b7a:	3608      	adds	r6, #8
 8005b7c:	e7a5      	b.n	8005aca <_strtol_l.isra.0+0x56>
 8005b7e:	2c30      	cmp	r4, #48	; 0x30
 8005b80:	d09b      	beq.n	8005aba <_strtol_l.isra.0+0x46>
 8005b82:	260a      	movs	r6, #10
 8005b84:	e7a1      	b.n	8005aca <_strtol_l.isra.0+0x56>
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	08006619 	.word	0x08006619
 8005b8c:	7fffffff 	.word	0x7fffffff

08005b90 <strtol>:
 8005b90:	b510      	push	{r4, lr}
 8005b92:	0013      	movs	r3, r2
 8005b94:	000a      	movs	r2, r1
 8005b96:	0001      	movs	r1, r0
 8005b98:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <strtol+0x14>)
 8005b9a:	6800      	ldr	r0, [r0, #0]
 8005b9c:	f7ff ff6a 	bl	8005a74 <_strtol_l.isra.0>
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	2000001c 	.word	0x2000001c

08005ba8 <__ssputs_r>:
 8005ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005baa:	688e      	ldr	r6, [r1, #8]
 8005bac:	b085      	sub	sp, #20
 8005bae:	0007      	movs	r7, r0
 8005bb0:	000c      	movs	r4, r1
 8005bb2:	9203      	str	r2, [sp, #12]
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	429e      	cmp	r6, r3
 8005bb8:	d83c      	bhi.n	8005c34 <__ssputs_r+0x8c>
 8005bba:	2390      	movs	r3, #144	; 0x90
 8005bbc:	898a      	ldrh	r2, [r1, #12]
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	421a      	tst	r2, r3
 8005bc2:	d034      	beq.n	8005c2e <__ssputs_r+0x86>
 8005bc4:	2503      	movs	r5, #3
 8005bc6:	6909      	ldr	r1, [r1, #16]
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	1a5b      	subs	r3, r3, r1
 8005bcc:	9302      	str	r3, [sp, #8]
 8005bce:	6963      	ldr	r3, [r4, #20]
 8005bd0:	9802      	ldr	r0, [sp, #8]
 8005bd2:	435d      	muls	r5, r3
 8005bd4:	0feb      	lsrs	r3, r5, #31
 8005bd6:	195d      	adds	r5, r3, r5
 8005bd8:	9b01      	ldr	r3, [sp, #4]
 8005bda:	106d      	asrs	r5, r5, #1
 8005bdc:	3301      	adds	r3, #1
 8005bde:	181b      	adds	r3, r3, r0
 8005be0:	42ab      	cmp	r3, r5
 8005be2:	d900      	bls.n	8005be6 <__ssputs_r+0x3e>
 8005be4:	001d      	movs	r5, r3
 8005be6:	0553      	lsls	r3, r2, #21
 8005be8:	d532      	bpl.n	8005c50 <__ssputs_r+0xa8>
 8005bea:	0029      	movs	r1, r5
 8005bec:	0038      	movs	r0, r7
 8005bee:	f000 fb35 	bl	800625c <_malloc_r>
 8005bf2:	1e06      	subs	r6, r0, #0
 8005bf4:	d109      	bne.n	8005c0a <__ssputs_r+0x62>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	2340      	movs	r3, #64	; 0x40
 8005bfc:	2001      	movs	r0, #1
 8005bfe:	89a2      	ldrh	r2, [r4, #12]
 8005c00:	4240      	negs	r0, r0
 8005c02:	4313      	orrs	r3, r2
 8005c04:	81a3      	strh	r3, [r4, #12]
 8005c06:	b005      	add	sp, #20
 8005c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c0a:	9a02      	ldr	r2, [sp, #8]
 8005c0c:	6921      	ldr	r1, [r4, #16]
 8005c0e:	f7ff fedb 	bl	80059c8 <memcpy>
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	4a14      	ldr	r2, [pc, #80]	; (8005c68 <__ssputs_r+0xc0>)
 8005c16:	401a      	ands	r2, r3
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	81a3      	strh	r3, [r4, #12]
 8005c1e:	9b02      	ldr	r3, [sp, #8]
 8005c20:	6126      	str	r6, [r4, #16]
 8005c22:	18f6      	adds	r6, r6, r3
 8005c24:	6026      	str	r6, [r4, #0]
 8005c26:	6165      	str	r5, [r4, #20]
 8005c28:	9e01      	ldr	r6, [sp, #4]
 8005c2a:	1aed      	subs	r5, r5, r3
 8005c2c:	60a5      	str	r5, [r4, #8]
 8005c2e:	9b01      	ldr	r3, [sp, #4]
 8005c30:	429e      	cmp	r6, r3
 8005c32:	d900      	bls.n	8005c36 <__ssputs_r+0x8e>
 8005c34:	9e01      	ldr	r6, [sp, #4]
 8005c36:	0032      	movs	r2, r6
 8005c38:	9903      	ldr	r1, [sp, #12]
 8005c3a:	6820      	ldr	r0, [r4, #0]
 8005c3c:	f000 fab1 	bl	80061a2 <memmove>
 8005c40:	68a3      	ldr	r3, [r4, #8]
 8005c42:	2000      	movs	r0, #0
 8005c44:	1b9b      	subs	r3, r3, r6
 8005c46:	60a3      	str	r3, [r4, #8]
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	199e      	adds	r6, r3, r6
 8005c4c:	6026      	str	r6, [r4, #0]
 8005c4e:	e7da      	b.n	8005c06 <__ssputs_r+0x5e>
 8005c50:	002a      	movs	r2, r5
 8005c52:	0038      	movs	r0, r7
 8005c54:	f000 fb60 	bl	8006318 <_realloc_r>
 8005c58:	1e06      	subs	r6, r0, #0
 8005c5a:	d1e0      	bne.n	8005c1e <__ssputs_r+0x76>
 8005c5c:	0038      	movs	r0, r7
 8005c5e:	6921      	ldr	r1, [r4, #16]
 8005c60:	f000 fab2 	bl	80061c8 <_free_r>
 8005c64:	e7c7      	b.n	8005bf6 <__ssputs_r+0x4e>
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	fffffb7f 	.word	0xfffffb7f

08005c6c <_svfiprintf_r>:
 8005c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6e:	b0a1      	sub	sp, #132	; 0x84
 8005c70:	9003      	str	r0, [sp, #12]
 8005c72:	001d      	movs	r5, r3
 8005c74:	898b      	ldrh	r3, [r1, #12]
 8005c76:	000f      	movs	r7, r1
 8005c78:	0016      	movs	r6, r2
 8005c7a:	061b      	lsls	r3, r3, #24
 8005c7c:	d511      	bpl.n	8005ca2 <_svfiprintf_r+0x36>
 8005c7e:	690b      	ldr	r3, [r1, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10e      	bne.n	8005ca2 <_svfiprintf_r+0x36>
 8005c84:	2140      	movs	r1, #64	; 0x40
 8005c86:	f000 fae9 	bl	800625c <_malloc_r>
 8005c8a:	6038      	str	r0, [r7, #0]
 8005c8c:	6138      	str	r0, [r7, #16]
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d105      	bne.n	8005c9e <_svfiprintf_r+0x32>
 8005c92:	230c      	movs	r3, #12
 8005c94:	9a03      	ldr	r2, [sp, #12]
 8005c96:	3801      	subs	r0, #1
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	b021      	add	sp, #132	; 0x84
 8005c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9e:	2340      	movs	r3, #64	; 0x40
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	ac08      	add	r4, sp, #32
 8005ca6:	6163      	str	r3, [r4, #20]
 8005ca8:	3320      	adds	r3, #32
 8005caa:	7663      	strb	r3, [r4, #25]
 8005cac:	3310      	adds	r3, #16
 8005cae:	76a3      	strb	r3, [r4, #26]
 8005cb0:	9507      	str	r5, [sp, #28]
 8005cb2:	0035      	movs	r5, r6
 8005cb4:	782b      	ldrb	r3, [r5, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <_svfiprintf_r+0x52>
 8005cba:	2b25      	cmp	r3, #37	; 0x25
 8005cbc:	d147      	bne.n	8005d4e <_svfiprintf_r+0xe2>
 8005cbe:	1bab      	subs	r3, r5, r6
 8005cc0:	9305      	str	r3, [sp, #20]
 8005cc2:	42b5      	cmp	r5, r6
 8005cc4:	d00c      	beq.n	8005ce0 <_svfiprintf_r+0x74>
 8005cc6:	0032      	movs	r2, r6
 8005cc8:	0039      	movs	r1, r7
 8005cca:	9803      	ldr	r0, [sp, #12]
 8005ccc:	f7ff ff6c 	bl	8005ba8 <__ssputs_r>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d100      	bne.n	8005cd6 <_svfiprintf_r+0x6a>
 8005cd4:	e0ae      	b.n	8005e34 <_svfiprintf_r+0x1c8>
 8005cd6:	6962      	ldr	r2, [r4, #20]
 8005cd8:	9b05      	ldr	r3, [sp, #20]
 8005cda:	4694      	mov	ip, r2
 8005cdc:	4463      	add	r3, ip
 8005cde:	6163      	str	r3, [r4, #20]
 8005ce0:	782b      	ldrb	r3, [r5, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d100      	bne.n	8005ce8 <_svfiprintf_r+0x7c>
 8005ce6:	e0a5      	b.n	8005e34 <_svfiprintf_r+0x1c8>
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2300      	movs	r3, #0
 8005cec:	4252      	negs	r2, r2
 8005cee:	6062      	str	r2, [r4, #4]
 8005cf0:	a904      	add	r1, sp, #16
 8005cf2:	3254      	adds	r2, #84	; 0x54
 8005cf4:	1852      	adds	r2, r2, r1
 8005cf6:	1c6e      	adds	r6, r5, #1
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	60e3      	str	r3, [r4, #12]
 8005cfc:	60a3      	str	r3, [r4, #8]
 8005cfe:	7013      	strb	r3, [r2, #0]
 8005d00:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d02:	2205      	movs	r2, #5
 8005d04:	7831      	ldrb	r1, [r6, #0]
 8005d06:	4854      	ldr	r0, [pc, #336]	; (8005e58 <_svfiprintf_r+0x1ec>)
 8005d08:	f000 fa40 	bl	800618c <memchr>
 8005d0c:	1c75      	adds	r5, r6, #1
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d11f      	bne.n	8005d52 <_svfiprintf_r+0xe6>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	06d3      	lsls	r3, r2, #27
 8005d16:	d504      	bpl.n	8005d22 <_svfiprintf_r+0xb6>
 8005d18:	2353      	movs	r3, #83	; 0x53
 8005d1a:	a904      	add	r1, sp, #16
 8005d1c:	185b      	adds	r3, r3, r1
 8005d1e:	2120      	movs	r1, #32
 8005d20:	7019      	strb	r1, [r3, #0]
 8005d22:	0713      	lsls	r3, r2, #28
 8005d24:	d504      	bpl.n	8005d30 <_svfiprintf_r+0xc4>
 8005d26:	2353      	movs	r3, #83	; 0x53
 8005d28:	a904      	add	r1, sp, #16
 8005d2a:	185b      	adds	r3, r3, r1
 8005d2c:	212b      	movs	r1, #43	; 0x2b
 8005d2e:	7019      	strb	r1, [r3, #0]
 8005d30:	7833      	ldrb	r3, [r6, #0]
 8005d32:	2b2a      	cmp	r3, #42	; 0x2a
 8005d34:	d016      	beq.n	8005d64 <_svfiprintf_r+0xf8>
 8005d36:	0035      	movs	r5, r6
 8005d38:	2100      	movs	r1, #0
 8005d3a:	200a      	movs	r0, #10
 8005d3c:	68e3      	ldr	r3, [r4, #12]
 8005d3e:	782a      	ldrb	r2, [r5, #0]
 8005d40:	1c6e      	adds	r6, r5, #1
 8005d42:	3a30      	subs	r2, #48	; 0x30
 8005d44:	2a09      	cmp	r2, #9
 8005d46:	d94e      	bls.n	8005de6 <_svfiprintf_r+0x17a>
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	d111      	bne.n	8005d70 <_svfiprintf_r+0x104>
 8005d4c:	e017      	b.n	8005d7e <_svfiprintf_r+0x112>
 8005d4e:	3501      	adds	r5, #1
 8005d50:	e7b0      	b.n	8005cb4 <_svfiprintf_r+0x48>
 8005d52:	4b41      	ldr	r3, [pc, #260]	; (8005e58 <_svfiprintf_r+0x1ec>)
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	1ac0      	subs	r0, r0, r3
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4083      	lsls	r3, r0
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	002e      	movs	r6, r5
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	e7ce      	b.n	8005d02 <_svfiprintf_r+0x96>
 8005d64:	9b07      	ldr	r3, [sp, #28]
 8005d66:	1d19      	adds	r1, r3, #4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	9107      	str	r1, [sp, #28]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	db01      	blt.n	8005d74 <_svfiprintf_r+0x108>
 8005d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d72:	e004      	b.n	8005d7e <_svfiprintf_r+0x112>
 8005d74:	425b      	negs	r3, r3
 8005d76:	60e3      	str	r3, [r4, #12]
 8005d78:	2302      	movs	r3, #2
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	782b      	ldrb	r3, [r5, #0]
 8005d80:	2b2e      	cmp	r3, #46	; 0x2e
 8005d82:	d10a      	bne.n	8005d9a <_svfiprintf_r+0x12e>
 8005d84:	786b      	ldrb	r3, [r5, #1]
 8005d86:	2b2a      	cmp	r3, #42	; 0x2a
 8005d88:	d135      	bne.n	8005df6 <_svfiprintf_r+0x18a>
 8005d8a:	9b07      	ldr	r3, [sp, #28]
 8005d8c:	3502      	adds	r5, #2
 8005d8e:	1d1a      	adds	r2, r3, #4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	9207      	str	r2, [sp, #28]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	db2b      	blt.n	8005df0 <_svfiprintf_r+0x184>
 8005d98:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9a:	4e30      	ldr	r6, [pc, #192]	; (8005e5c <_svfiprintf_r+0x1f0>)
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	0030      	movs	r0, r6
 8005da0:	7829      	ldrb	r1, [r5, #0]
 8005da2:	f000 f9f3 	bl	800618c <memchr>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d006      	beq.n	8005db8 <_svfiprintf_r+0x14c>
 8005daa:	2340      	movs	r3, #64	; 0x40
 8005dac:	1b80      	subs	r0, r0, r6
 8005dae:	4083      	lsls	r3, r0
 8005db0:	6822      	ldr	r2, [r4, #0]
 8005db2:	3501      	adds	r5, #1
 8005db4:	4313      	orrs	r3, r2
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	7829      	ldrb	r1, [r5, #0]
 8005dba:	2206      	movs	r2, #6
 8005dbc:	4828      	ldr	r0, [pc, #160]	; (8005e60 <_svfiprintf_r+0x1f4>)
 8005dbe:	1c6e      	adds	r6, r5, #1
 8005dc0:	7621      	strb	r1, [r4, #24]
 8005dc2:	f000 f9e3 	bl	800618c <memchr>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d03c      	beq.n	8005e44 <_svfiprintf_r+0x1d8>
 8005dca:	4b26      	ldr	r3, [pc, #152]	; (8005e64 <_svfiprintf_r+0x1f8>)
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d125      	bne.n	8005e1c <_svfiprintf_r+0x1b0>
 8005dd0:	2207      	movs	r2, #7
 8005dd2:	9b07      	ldr	r3, [sp, #28]
 8005dd4:	3307      	adds	r3, #7
 8005dd6:	4393      	bics	r3, r2
 8005dd8:	3308      	adds	r3, #8
 8005dda:	9307      	str	r3, [sp, #28]
 8005ddc:	6963      	ldr	r3, [r4, #20]
 8005dde:	9a04      	ldr	r2, [sp, #16]
 8005de0:	189b      	adds	r3, r3, r2
 8005de2:	6163      	str	r3, [r4, #20]
 8005de4:	e765      	b.n	8005cb2 <_svfiprintf_r+0x46>
 8005de6:	4343      	muls	r3, r0
 8005de8:	0035      	movs	r5, r6
 8005dea:	2101      	movs	r1, #1
 8005dec:	189b      	adds	r3, r3, r2
 8005dee:	e7a6      	b.n	8005d3e <_svfiprintf_r+0xd2>
 8005df0:	2301      	movs	r3, #1
 8005df2:	425b      	negs	r3, r3
 8005df4:	e7d0      	b.n	8005d98 <_svfiprintf_r+0x12c>
 8005df6:	2300      	movs	r3, #0
 8005df8:	200a      	movs	r0, #10
 8005dfa:	001a      	movs	r2, r3
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	6063      	str	r3, [r4, #4]
 8005e00:	7829      	ldrb	r1, [r5, #0]
 8005e02:	1c6e      	adds	r6, r5, #1
 8005e04:	3930      	subs	r1, #48	; 0x30
 8005e06:	2909      	cmp	r1, #9
 8005e08:	d903      	bls.n	8005e12 <_svfiprintf_r+0x1a6>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0c5      	beq.n	8005d9a <_svfiprintf_r+0x12e>
 8005e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e10:	e7c3      	b.n	8005d9a <_svfiprintf_r+0x12e>
 8005e12:	4342      	muls	r2, r0
 8005e14:	0035      	movs	r5, r6
 8005e16:	2301      	movs	r3, #1
 8005e18:	1852      	adds	r2, r2, r1
 8005e1a:	e7f1      	b.n	8005e00 <_svfiprintf_r+0x194>
 8005e1c:	ab07      	add	r3, sp, #28
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	003a      	movs	r2, r7
 8005e22:	0021      	movs	r1, r4
 8005e24:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <_svfiprintf_r+0x1fc>)
 8005e26:	9803      	ldr	r0, [sp, #12]
 8005e28:	e000      	b.n	8005e2c <_svfiprintf_r+0x1c0>
 8005e2a:	bf00      	nop
 8005e2c:	9004      	str	r0, [sp, #16]
 8005e2e:	9b04      	ldr	r3, [sp, #16]
 8005e30:	3301      	adds	r3, #1
 8005e32:	d1d3      	bne.n	8005ddc <_svfiprintf_r+0x170>
 8005e34:	89bb      	ldrh	r3, [r7, #12]
 8005e36:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e38:	065b      	lsls	r3, r3, #25
 8005e3a:	d400      	bmi.n	8005e3e <_svfiprintf_r+0x1d2>
 8005e3c:	e72d      	b.n	8005c9a <_svfiprintf_r+0x2e>
 8005e3e:	2001      	movs	r0, #1
 8005e40:	4240      	negs	r0, r0
 8005e42:	e72a      	b.n	8005c9a <_svfiprintf_r+0x2e>
 8005e44:	ab07      	add	r3, sp, #28
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	003a      	movs	r2, r7
 8005e4a:	0021      	movs	r1, r4
 8005e4c:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <_svfiprintf_r+0x1fc>)
 8005e4e:	9803      	ldr	r0, [sp, #12]
 8005e50:	f000 f87c 	bl	8005f4c <_printf_i>
 8005e54:	e7ea      	b.n	8005e2c <_svfiprintf_r+0x1c0>
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	08006719 	.word	0x08006719
 8005e5c:	0800671f 	.word	0x0800671f
 8005e60:	08006723 	.word	0x08006723
 8005e64:	00000000 	.word	0x00000000
 8005e68:	08005ba9 	.word	0x08005ba9

08005e6c <_printf_common>:
 8005e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e6e:	0015      	movs	r5, r2
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	688a      	ldr	r2, [r1, #8]
 8005e74:	690b      	ldr	r3, [r1, #16]
 8005e76:	000c      	movs	r4, r1
 8005e78:	9000      	str	r0, [sp, #0]
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	da00      	bge.n	8005e80 <_printf_common+0x14>
 8005e7e:	0013      	movs	r3, r2
 8005e80:	0022      	movs	r2, r4
 8005e82:	602b      	str	r3, [r5, #0]
 8005e84:	3243      	adds	r2, #67	; 0x43
 8005e86:	7812      	ldrb	r2, [r2, #0]
 8005e88:	2a00      	cmp	r2, #0
 8005e8a:	d001      	beq.n	8005e90 <_printf_common+0x24>
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	602b      	str	r3, [r5, #0]
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	069b      	lsls	r3, r3, #26
 8005e94:	d502      	bpl.n	8005e9c <_printf_common+0x30>
 8005e96:	682b      	ldr	r3, [r5, #0]
 8005e98:	3302      	adds	r3, #2
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	6822      	ldr	r2, [r4, #0]
 8005e9e:	2306      	movs	r3, #6
 8005ea0:	0017      	movs	r7, r2
 8005ea2:	401f      	ands	r7, r3
 8005ea4:	421a      	tst	r2, r3
 8005ea6:	d027      	beq.n	8005ef8 <_printf_common+0x8c>
 8005ea8:	0023      	movs	r3, r4
 8005eaa:	3343      	adds	r3, #67	; 0x43
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	1e5a      	subs	r2, r3, #1
 8005eb0:	4193      	sbcs	r3, r2
 8005eb2:	6822      	ldr	r2, [r4, #0]
 8005eb4:	0692      	lsls	r2, r2, #26
 8005eb6:	d430      	bmi.n	8005f1a <_printf_common+0xae>
 8005eb8:	0022      	movs	r2, r4
 8005eba:	9901      	ldr	r1, [sp, #4]
 8005ebc:	9800      	ldr	r0, [sp, #0]
 8005ebe:	9e08      	ldr	r6, [sp, #32]
 8005ec0:	3243      	adds	r2, #67	; 0x43
 8005ec2:	47b0      	blx	r6
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d025      	beq.n	8005f14 <_printf_common+0xa8>
 8005ec8:	2306      	movs	r3, #6
 8005eca:	6820      	ldr	r0, [r4, #0]
 8005ecc:	682a      	ldr	r2, [r5, #0]
 8005ece:	68e1      	ldr	r1, [r4, #12]
 8005ed0:	2500      	movs	r5, #0
 8005ed2:	4003      	ands	r3, r0
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d103      	bne.n	8005ee0 <_printf_common+0x74>
 8005ed8:	1a8d      	subs	r5, r1, r2
 8005eda:	43eb      	mvns	r3, r5
 8005edc:	17db      	asrs	r3, r3, #31
 8005ede:	401d      	ands	r5, r3
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	6922      	ldr	r2, [r4, #16]
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	dd01      	ble.n	8005eec <_printf_common+0x80>
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	18ed      	adds	r5, r5, r3
 8005eec:	2700      	movs	r7, #0
 8005eee:	42bd      	cmp	r5, r7
 8005ef0:	d120      	bne.n	8005f34 <_printf_common+0xc8>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	e010      	b.n	8005f18 <_printf_common+0xac>
 8005ef6:	3701      	adds	r7, #1
 8005ef8:	68e3      	ldr	r3, [r4, #12]
 8005efa:	682a      	ldr	r2, [r5, #0]
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	42bb      	cmp	r3, r7
 8005f00:	ddd2      	ble.n	8005ea8 <_printf_common+0x3c>
 8005f02:	0022      	movs	r2, r4
 8005f04:	2301      	movs	r3, #1
 8005f06:	9901      	ldr	r1, [sp, #4]
 8005f08:	9800      	ldr	r0, [sp, #0]
 8005f0a:	9e08      	ldr	r6, [sp, #32]
 8005f0c:	3219      	adds	r2, #25
 8005f0e:	47b0      	blx	r6
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d1f0      	bne.n	8005ef6 <_printf_common+0x8a>
 8005f14:	2001      	movs	r0, #1
 8005f16:	4240      	negs	r0, r0
 8005f18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f1a:	2030      	movs	r0, #48	; 0x30
 8005f1c:	18e1      	adds	r1, r4, r3
 8005f1e:	3143      	adds	r1, #67	; 0x43
 8005f20:	7008      	strb	r0, [r1, #0]
 8005f22:	0021      	movs	r1, r4
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	3145      	adds	r1, #69	; 0x45
 8005f28:	7809      	ldrb	r1, [r1, #0]
 8005f2a:	18a2      	adds	r2, r4, r2
 8005f2c:	3243      	adds	r2, #67	; 0x43
 8005f2e:	3302      	adds	r3, #2
 8005f30:	7011      	strb	r1, [r2, #0]
 8005f32:	e7c1      	b.n	8005eb8 <_printf_common+0x4c>
 8005f34:	0022      	movs	r2, r4
 8005f36:	2301      	movs	r3, #1
 8005f38:	9901      	ldr	r1, [sp, #4]
 8005f3a:	9800      	ldr	r0, [sp, #0]
 8005f3c:	9e08      	ldr	r6, [sp, #32]
 8005f3e:	321a      	adds	r2, #26
 8005f40:	47b0      	blx	r6
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	d0e6      	beq.n	8005f14 <_printf_common+0xa8>
 8005f46:	3701      	adds	r7, #1
 8005f48:	e7d1      	b.n	8005eee <_printf_common+0x82>
	...

08005f4c <_printf_i>:
 8005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4e:	b08b      	sub	sp, #44	; 0x2c
 8005f50:	9206      	str	r2, [sp, #24]
 8005f52:	000a      	movs	r2, r1
 8005f54:	3243      	adds	r2, #67	; 0x43
 8005f56:	9307      	str	r3, [sp, #28]
 8005f58:	9005      	str	r0, [sp, #20]
 8005f5a:	9204      	str	r2, [sp, #16]
 8005f5c:	7e0a      	ldrb	r2, [r1, #24]
 8005f5e:	000c      	movs	r4, r1
 8005f60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f62:	2a78      	cmp	r2, #120	; 0x78
 8005f64:	d806      	bhi.n	8005f74 <_printf_i+0x28>
 8005f66:	2a62      	cmp	r2, #98	; 0x62
 8005f68:	d808      	bhi.n	8005f7c <_printf_i+0x30>
 8005f6a:	2a00      	cmp	r2, #0
 8005f6c:	d100      	bne.n	8005f70 <_printf_i+0x24>
 8005f6e:	e0c0      	b.n	80060f2 <_printf_i+0x1a6>
 8005f70:	2a58      	cmp	r2, #88	; 0x58
 8005f72:	d052      	beq.n	800601a <_printf_i+0xce>
 8005f74:	0026      	movs	r6, r4
 8005f76:	3642      	adds	r6, #66	; 0x42
 8005f78:	7032      	strb	r2, [r6, #0]
 8005f7a:	e022      	b.n	8005fc2 <_printf_i+0x76>
 8005f7c:	0010      	movs	r0, r2
 8005f7e:	3863      	subs	r0, #99	; 0x63
 8005f80:	2815      	cmp	r0, #21
 8005f82:	d8f7      	bhi.n	8005f74 <_printf_i+0x28>
 8005f84:	f7fa f8c8 	bl	8000118 <__gnu_thumb1_case_shi>
 8005f88:	001f0016 	.word	0x001f0016
 8005f8c:	fff6fff6 	.word	0xfff6fff6
 8005f90:	fff6fff6 	.word	0xfff6fff6
 8005f94:	fff6001f 	.word	0xfff6001f
 8005f98:	fff6fff6 	.word	0xfff6fff6
 8005f9c:	00a8fff6 	.word	0x00a8fff6
 8005fa0:	009a0036 	.word	0x009a0036
 8005fa4:	fff6fff6 	.word	0xfff6fff6
 8005fa8:	fff600b9 	.word	0xfff600b9
 8005fac:	fff60036 	.word	0xfff60036
 8005fb0:	009efff6 	.word	0x009efff6
 8005fb4:	0026      	movs	r6, r4
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	3642      	adds	r6, #66	; 0x42
 8005fba:	1d11      	adds	r1, r2, #4
 8005fbc:	6019      	str	r1, [r3, #0]
 8005fbe:	6813      	ldr	r3, [r2, #0]
 8005fc0:	7033      	strb	r3, [r6, #0]
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e0a7      	b.n	8006116 <_printf_i+0x1ca>
 8005fc6:	6808      	ldr	r0, [r1, #0]
 8005fc8:	6819      	ldr	r1, [r3, #0]
 8005fca:	1d0a      	adds	r2, r1, #4
 8005fcc:	0605      	lsls	r5, r0, #24
 8005fce:	d50b      	bpl.n	8005fe8 <_printf_i+0x9c>
 8005fd0:	680d      	ldr	r5, [r1, #0]
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	2d00      	cmp	r5, #0
 8005fd6:	da03      	bge.n	8005fe0 <_printf_i+0x94>
 8005fd8:	232d      	movs	r3, #45	; 0x2d
 8005fda:	9a04      	ldr	r2, [sp, #16]
 8005fdc:	426d      	negs	r5, r5
 8005fde:	7013      	strb	r3, [r2, #0]
 8005fe0:	4b61      	ldr	r3, [pc, #388]	; (8006168 <_printf_i+0x21c>)
 8005fe2:	270a      	movs	r7, #10
 8005fe4:	9303      	str	r3, [sp, #12]
 8005fe6:	e032      	b.n	800604e <_printf_i+0x102>
 8005fe8:	680d      	ldr	r5, [r1, #0]
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	0641      	lsls	r1, r0, #25
 8005fee:	d5f1      	bpl.n	8005fd4 <_printf_i+0x88>
 8005ff0:	b22d      	sxth	r5, r5
 8005ff2:	e7ef      	b.n	8005fd4 <_printf_i+0x88>
 8005ff4:	680d      	ldr	r5, [r1, #0]
 8005ff6:	6819      	ldr	r1, [r3, #0]
 8005ff8:	1d08      	adds	r0, r1, #4
 8005ffa:	6018      	str	r0, [r3, #0]
 8005ffc:	062e      	lsls	r6, r5, #24
 8005ffe:	d501      	bpl.n	8006004 <_printf_i+0xb8>
 8006000:	680d      	ldr	r5, [r1, #0]
 8006002:	e003      	b.n	800600c <_printf_i+0xc0>
 8006004:	066d      	lsls	r5, r5, #25
 8006006:	d5fb      	bpl.n	8006000 <_printf_i+0xb4>
 8006008:	680d      	ldr	r5, [r1, #0]
 800600a:	b2ad      	uxth	r5, r5
 800600c:	4b56      	ldr	r3, [pc, #344]	; (8006168 <_printf_i+0x21c>)
 800600e:	270a      	movs	r7, #10
 8006010:	9303      	str	r3, [sp, #12]
 8006012:	2a6f      	cmp	r2, #111	; 0x6f
 8006014:	d117      	bne.n	8006046 <_printf_i+0xfa>
 8006016:	2708      	movs	r7, #8
 8006018:	e015      	b.n	8006046 <_printf_i+0xfa>
 800601a:	3145      	adds	r1, #69	; 0x45
 800601c:	700a      	strb	r2, [r1, #0]
 800601e:	4a52      	ldr	r2, [pc, #328]	; (8006168 <_printf_i+0x21c>)
 8006020:	9203      	str	r2, [sp, #12]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	6821      	ldr	r1, [r4, #0]
 8006026:	ca20      	ldmia	r2!, {r5}
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	0608      	lsls	r0, r1, #24
 800602c:	d550      	bpl.n	80060d0 <_printf_i+0x184>
 800602e:	07cb      	lsls	r3, r1, #31
 8006030:	d502      	bpl.n	8006038 <_printf_i+0xec>
 8006032:	2320      	movs	r3, #32
 8006034:	4319      	orrs	r1, r3
 8006036:	6021      	str	r1, [r4, #0]
 8006038:	2710      	movs	r7, #16
 800603a:	2d00      	cmp	r5, #0
 800603c:	d103      	bne.n	8006046 <_printf_i+0xfa>
 800603e:	2320      	movs	r3, #32
 8006040:	6822      	ldr	r2, [r4, #0]
 8006042:	439a      	bics	r2, r3
 8006044:	6022      	str	r2, [r4, #0]
 8006046:	0023      	movs	r3, r4
 8006048:	2200      	movs	r2, #0
 800604a:	3343      	adds	r3, #67	; 0x43
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	6863      	ldr	r3, [r4, #4]
 8006050:	60a3      	str	r3, [r4, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	db03      	blt.n	800605e <_printf_i+0x112>
 8006056:	2204      	movs	r2, #4
 8006058:	6821      	ldr	r1, [r4, #0]
 800605a:	4391      	bics	r1, r2
 800605c:	6021      	str	r1, [r4, #0]
 800605e:	2d00      	cmp	r5, #0
 8006060:	d102      	bne.n	8006068 <_printf_i+0x11c>
 8006062:	9e04      	ldr	r6, [sp, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00c      	beq.n	8006082 <_printf_i+0x136>
 8006068:	9e04      	ldr	r6, [sp, #16]
 800606a:	0028      	movs	r0, r5
 800606c:	0039      	movs	r1, r7
 800606e:	f7fa f8e3 	bl	8000238 <__aeabi_uidivmod>
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	3e01      	subs	r6, #1
 8006076:	5c5b      	ldrb	r3, [r3, r1]
 8006078:	7033      	strb	r3, [r6, #0]
 800607a:	002b      	movs	r3, r5
 800607c:	0005      	movs	r5, r0
 800607e:	429f      	cmp	r7, r3
 8006080:	d9f3      	bls.n	800606a <_printf_i+0x11e>
 8006082:	2f08      	cmp	r7, #8
 8006084:	d109      	bne.n	800609a <_printf_i+0x14e>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	07db      	lsls	r3, r3, #31
 800608a:	d506      	bpl.n	800609a <_printf_i+0x14e>
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	6922      	ldr	r2, [r4, #16]
 8006090:	4293      	cmp	r3, r2
 8006092:	dc02      	bgt.n	800609a <_printf_i+0x14e>
 8006094:	2330      	movs	r3, #48	; 0x30
 8006096:	3e01      	subs	r6, #1
 8006098:	7033      	strb	r3, [r6, #0]
 800609a:	9b04      	ldr	r3, [sp, #16]
 800609c:	1b9b      	subs	r3, r3, r6
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	9b07      	ldr	r3, [sp, #28]
 80060a2:	0021      	movs	r1, r4
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	9805      	ldr	r0, [sp, #20]
 80060a8:	9b06      	ldr	r3, [sp, #24]
 80060aa:	aa09      	add	r2, sp, #36	; 0x24
 80060ac:	f7ff fede 	bl	8005e6c <_printf_common>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d135      	bne.n	8006120 <_printf_i+0x1d4>
 80060b4:	2001      	movs	r0, #1
 80060b6:	4240      	negs	r0, r0
 80060b8:	b00b      	add	sp, #44	; 0x2c
 80060ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060bc:	2220      	movs	r2, #32
 80060be:	6809      	ldr	r1, [r1, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	6022      	str	r2, [r4, #0]
 80060c4:	0022      	movs	r2, r4
 80060c6:	2178      	movs	r1, #120	; 0x78
 80060c8:	3245      	adds	r2, #69	; 0x45
 80060ca:	7011      	strb	r1, [r2, #0]
 80060cc:	4a27      	ldr	r2, [pc, #156]	; (800616c <_printf_i+0x220>)
 80060ce:	e7a7      	b.n	8006020 <_printf_i+0xd4>
 80060d0:	0648      	lsls	r0, r1, #25
 80060d2:	d5ac      	bpl.n	800602e <_printf_i+0xe2>
 80060d4:	b2ad      	uxth	r5, r5
 80060d6:	e7aa      	b.n	800602e <_printf_i+0xe2>
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	680d      	ldr	r5, [r1, #0]
 80060dc:	1d10      	adds	r0, r2, #4
 80060de:	6949      	ldr	r1, [r1, #20]
 80060e0:	6018      	str	r0, [r3, #0]
 80060e2:	6813      	ldr	r3, [r2, #0]
 80060e4:	062e      	lsls	r6, r5, #24
 80060e6:	d501      	bpl.n	80060ec <_printf_i+0x1a0>
 80060e8:	6019      	str	r1, [r3, #0]
 80060ea:	e002      	b.n	80060f2 <_printf_i+0x1a6>
 80060ec:	066d      	lsls	r5, r5, #25
 80060ee:	d5fb      	bpl.n	80060e8 <_printf_i+0x19c>
 80060f0:	8019      	strh	r1, [r3, #0]
 80060f2:	2300      	movs	r3, #0
 80060f4:	9e04      	ldr	r6, [sp, #16]
 80060f6:	6123      	str	r3, [r4, #16]
 80060f8:	e7d2      	b.n	80060a0 <_printf_i+0x154>
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	1d11      	adds	r1, r2, #4
 80060fe:	6019      	str	r1, [r3, #0]
 8006100:	6816      	ldr	r6, [r2, #0]
 8006102:	2100      	movs	r1, #0
 8006104:	0030      	movs	r0, r6
 8006106:	6862      	ldr	r2, [r4, #4]
 8006108:	f000 f840 	bl	800618c <memchr>
 800610c:	2800      	cmp	r0, #0
 800610e:	d001      	beq.n	8006114 <_printf_i+0x1c8>
 8006110:	1b80      	subs	r0, r0, r6
 8006112:	6060      	str	r0, [r4, #4]
 8006114:	6863      	ldr	r3, [r4, #4]
 8006116:	6123      	str	r3, [r4, #16]
 8006118:	2300      	movs	r3, #0
 800611a:	9a04      	ldr	r2, [sp, #16]
 800611c:	7013      	strb	r3, [r2, #0]
 800611e:	e7bf      	b.n	80060a0 <_printf_i+0x154>
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	0032      	movs	r2, r6
 8006124:	9906      	ldr	r1, [sp, #24]
 8006126:	9805      	ldr	r0, [sp, #20]
 8006128:	9d07      	ldr	r5, [sp, #28]
 800612a:	47a8      	blx	r5
 800612c:	1c43      	adds	r3, r0, #1
 800612e:	d0c1      	beq.n	80060b4 <_printf_i+0x168>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	079b      	lsls	r3, r3, #30
 8006134:	d415      	bmi.n	8006162 <_printf_i+0x216>
 8006136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006138:	68e0      	ldr	r0, [r4, #12]
 800613a:	4298      	cmp	r0, r3
 800613c:	dabc      	bge.n	80060b8 <_printf_i+0x16c>
 800613e:	0018      	movs	r0, r3
 8006140:	e7ba      	b.n	80060b8 <_printf_i+0x16c>
 8006142:	0022      	movs	r2, r4
 8006144:	2301      	movs	r3, #1
 8006146:	9906      	ldr	r1, [sp, #24]
 8006148:	9805      	ldr	r0, [sp, #20]
 800614a:	9e07      	ldr	r6, [sp, #28]
 800614c:	3219      	adds	r2, #25
 800614e:	47b0      	blx	r6
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d0af      	beq.n	80060b4 <_printf_i+0x168>
 8006154:	3501      	adds	r5, #1
 8006156:	68e3      	ldr	r3, [r4, #12]
 8006158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800615a:	1a9b      	subs	r3, r3, r2
 800615c:	42ab      	cmp	r3, r5
 800615e:	dcf0      	bgt.n	8006142 <_printf_i+0x1f6>
 8006160:	e7e9      	b.n	8006136 <_printf_i+0x1ea>
 8006162:	2500      	movs	r5, #0
 8006164:	e7f7      	b.n	8006156 <_printf_i+0x20a>
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	0800672a 	.word	0x0800672a
 800616c:	0800673b 	.word	0x0800673b

08006170 <strchr>:
 8006170:	b2c9      	uxtb	r1, r1
 8006172:	7803      	ldrb	r3, [r0, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <strchr+0x12>
 8006178:	428b      	cmp	r3, r1
 800617a:	d100      	bne.n	800617e <strchr+0xe>
 800617c:	4770      	bx	lr
 800617e:	3001      	adds	r0, #1
 8006180:	e7f7      	b.n	8006172 <strchr+0x2>
 8006182:	424b      	negs	r3, r1
 8006184:	4159      	adcs	r1, r3
 8006186:	4249      	negs	r1, r1
 8006188:	4008      	ands	r0, r1
 800618a:	e7f7      	b.n	800617c <strchr+0xc>

0800618c <memchr>:
 800618c:	b2c9      	uxtb	r1, r1
 800618e:	1882      	adds	r2, r0, r2
 8006190:	4290      	cmp	r0, r2
 8006192:	d101      	bne.n	8006198 <memchr+0xc>
 8006194:	2000      	movs	r0, #0
 8006196:	4770      	bx	lr
 8006198:	7803      	ldrb	r3, [r0, #0]
 800619a:	428b      	cmp	r3, r1
 800619c:	d0fb      	beq.n	8006196 <memchr+0xa>
 800619e:	3001      	adds	r0, #1
 80061a0:	e7f6      	b.n	8006190 <memchr+0x4>

080061a2 <memmove>:
 80061a2:	b510      	push	{r4, lr}
 80061a4:	4288      	cmp	r0, r1
 80061a6:	d902      	bls.n	80061ae <memmove+0xc>
 80061a8:	188b      	adds	r3, r1, r2
 80061aa:	4298      	cmp	r0, r3
 80061ac:	d303      	bcc.n	80061b6 <memmove+0x14>
 80061ae:	2300      	movs	r3, #0
 80061b0:	e007      	b.n	80061c2 <memmove+0x20>
 80061b2:	5c8b      	ldrb	r3, [r1, r2]
 80061b4:	5483      	strb	r3, [r0, r2]
 80061b6:	3a01      	subs	r2, #1
 80061b8:	d2fb      	bcs.n	80061b2 <memmove+0x10>
 80061ba:	bd10      	pop	{r4, pc}
 80061bc:	5ccc      	ldrb	r4, [r1, r3]
 80061be:	54c4      	strb	r4, [r0, r3]
 80061c0:	3301      	adds	r3, #1
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d1fa      	bne.n	80061bc <memmove+0x1a>
 80061c6:	e7f8      	b.n	80061ba <memmove+0x18>

080061c8 <_free_r>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	0005      	movs	r5, r0
 80061cc:	2900      	cmp	r1, #0
 80061ce:	d010      	beq.n	80061f2 <_free_r+0x2a>
 80061d0:	1f0c      	subs	r4, r1, #4
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	da00      	bge.n	80061da <_free_r+0x12>
 80061d8:	18e4      	adds	r4, r4, r3
 80061da:	0028      	movs	r0, r5
 80061dc:	f000 f8d4 	bl	8006388 <__malloc_lock>
 80061e0:	4a1d      	ldr	r2, [pc, #116]	; (8006258 <_free_r+0x90>)
 80061e2:	6813      	ldr	r3, [r2, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d105      	bne.n	80061f4 <_free_r+0x2c>
 80061e8:	6063      	str	r3, [r4, #4]
 80061ea:	6014      	str	r4, [r2, #0]
 80061ec:	0028      	movs	r0, r5
 80061ee:	f000 f8d3 	bl	8006398 <__malloc_unlock>
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	d908      	bls.n	800620a <_free_r+0x42>
 80061f8:	6821      	ldr	r1, [r4, #0]
 80061fa:	1860      	adds	r0, r4, r1
 80061fc:	4283      	cmp	r3, r0
 80061fe:	d1f3      	bne.n	80061e8 <_free_r+0x20>
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	1841      	adds	r1, r0, r1
 8006206:	6021      	str	r1, [r4, #0]
 8006208:	e7ee      	b.n	80061e8 <_free_r+0x20>
 800620a:	001a      	movs	r2, r3
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <_free_r+0x4e>
 8006212:	42a3      	cmp	r3, r4
 8006214:	d9f9      	bls.n	800620a <_free_r+0x42>
 8006216:	6811      	ldr	r1, [r2, #0]
 8006218:	1850      	adds	r0, r2, r1
 800621a:	42a0      	cmp	r0, r4
 800621c:	d10b      	bne.n	8006236 <_free_r+0x6e>
 800621e:	6820      	ldr	r0, [r4, #0]
 8006220:	1809      	adds	r1, r1, r0
 8006222:	1850      	adds	r0, r2, r1
 8006224:	6011      	str	r1, [r2, #0]
 8006226:	4283      	cmp	r3, r0
 8006228:	d1e0      	bne.n	80061ec <_free_r+0x24>
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	1841      	adds	r1, r0, r1
 8006230:	6011      	str	r1, [r2, #0]
 8006232:	6053      	str	r3, [r2, #4]
 8006234:	e7da      	b.n	80061ec <_free_r+0x24>
 8006236:	42a0      	cmp	r0, r4
 8006238:	d902      	bls.n	8006240 <_free_r+0x78>
 800623a:	230c      	movs	r3, #12
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	e7d5      	b.n	80061ec <_free_r+0x24>
 8006240:	6821      	ldr	r1, [r4, #0]
 8006242:	1860      	adds	r0, r4, r1
 8006244:	4283      	cmp	r3, r0
 8006246:	d103      	bne.n	8006250 <_free_r+0x88>
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	1841      	adds	r1, r0, r1
 800624e:	6021      	str	r1, [r4, #0]
 8006250:	6063      	str	r3, [r4, #4]
 8006252:	6054      	str	r4, [r2, #4]
 8006254:	e7ca      	b.n	80061ec <_free_r+0x24>
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	200000b0 	.word	0x200000b0

0800625c <_malloc_r>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	2303      	movs	r3, #3
 8006260:	1ccd      	adds	r5, r1, #3
 8006262:	439d      	bics	r5, r3
 8006264:	3508      	adds	r5, #8
 8006266:	0006      	movs	r6, r0
 8006268:	2d0c      	cmp	r5, #12
 800626a:	d21f      	bcs.n	80062ac <_malloc_r+0x50>
 800626c:	250c      	movs	r5, #12
 800626e:	42a9      	cmp	r1, r5
 8006270:	d81e      	bhi.n	80062b0 <_malloc_r+0x54>
 8006272:	0030      	movs	r0, r6
 8006274:	f000 f888 	bl	8006388 <__malloc_lock>
 8006278:	4925      	ldr	r1, [pc, #148]	; (8006310 <_malloc_r+0xb4>)
 800627a:	680a      	ldr	r2, [r1, #0]
 800627c:	0014      	movs	r4, r2
 800627e:	2c00      	cmp	r4, #0
 8006280:	d11a      	bne.n	80062b8 <_malloc_r+0x5c>
 8006282:	4f24      	ldr	r7, [pc, #144]	; (8006314 <_malloc_r+0xb8>)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d104      	bne.n	8006294 <_malloc_r+0x38>
 800628a:	0021      	movs	r1, r4
 800628c:	0030      	movs	r0, r6
 800628e:	f000 f869 	bl	8006364 <_sbrk_r>
 8006292:	6038      	str	r0, [r7, #0]
 8006294:	0029      	movs	r1, r5
 8006296:	0030      	movs	r0, r6
 8006298:	f000 f864 	bl	8006364 <_sbrk_r>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	d12b      	bne.n	80062f8 <_malloc_r+0x9c>
 80062a0:	230c      	movs	r3, #12
 80062a2:	0030      	movs	r0, r6
 80062a4:	6033      	str	r3, [r6, #0]
 80062a6:	f000 f877 	bl	8006398 <__malloc_unlock>
 80062aa:	e003      	b.n	80062b4 <_malloc_r+0x58>
 80062ac:	2d00      	cmp	r5, #0
 80062ae:	dade      	bge.n	800626e <_malloc_r+0x12>
 80062b0:	230c      	movs	r3, #12
 80062b2:	6033      	str	r3, [r6, #0]
 80062b4:	2000      	movs	r0, #0
 80062b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	1b5b      	subs	r3, r3, r5
 80062bc:	d419      	bmi.n	80062f2 <_malloc_r+0x96>
 80062be:	2b0b      	cmp	r3, #11
 80062c0:	d903      	bls.n	80062ca <_malloc_r+0x6e>
 80062c2:	6023      	str	r3, [r4, #0]
 80062c4:	18e4      	adds	r4, r4, r3
 80062c6:	6025      	str	r5, [r4, #0]
 80062c8:	e003      	b.n	80062d2 <_malloc_r+0x76>
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	42a2      	cmp	r2, r4
 80062ce:	d10e      	bne.n	80062ee <_malloc_r+0x92>
 80062d0:	600b      	str	r3, [r1, #0]
 80062d2:	0030      	movs	r0, r6
 80062d4:	f000 f860 	bl	8006398 <__malloc_unlock>
 80062d8:	0020      	movs	r0, r4
 80062da:	2207      	movs	r2, #7
 80062dc:	300b      	adds	r0, #11
 80062de:	1d23      	adds	r3, r4, #4
 80062e0:	4390      	bics	r0, r2
 80062e2:	1ac2      	subs	r2, r0, r3
 80062e4:	4298      	cmp	r0, r3
 80062e6:	d0e6      	beq.n	80062b6 <_malloc_r+0x5a>
 80062e8:	1a1b      	subs	r3, r3, r0
 80062ea:	50a3      	str	r3, [r4, r2]
 80062ec:	e7e3      	b.n	80062b6 <_malloc_r+0x5a>
 80062ee:	6053      	str	r3, [r2, #4]
 80062f0:	e7ef      	b.n	80062d2 <_malloc_r+0x76>
 80062f2:	0022      	movs	r2, r4
 80062f4:	6864      	ldr	r4, [r4, #4]
 80062f6:	e7c2      	b.n	800627e <_malloc_r+0x22>
 80062f8:	2303      	movs	r3, #3
 80062fa:	1cc4      	adds	r4, r0, #3
 80062fc:	439c      	bics	r4, r3
 80062fe:	42a0      	cmp	r0, r4
 8006300:	d0e1      	beq.n	80062c6 <_malloc_r+0x6a>
 8006302:	1a21      	subs	r1, r4, r0
 8006304:	0030      	movs	r0, r6
 8006306:	f000 f82d 	bl	8006364 <_sbrk_r>
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	d1db      	bne.n	80062c6 <_malloc_r+0x6a>
 800630e:	e7c7      	b.n	80062a0 <_malloc_r+0x44>
 8006310:	200000b0 	.word	0x200000b0
 8006314:	200000b4 	.word	0x200000b4

08006318 <_realloc_r>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	0007      	movs	r7, r0
 800631c:	000d      	movs	r5, r1
 800631e:	0016      	movs	r6, r2
 8006320:	2900      	cmp	r1, #0
 8006322:	d105      	bne.n	8006330 <_realloc_r+0x18>
 8006324:	0011      	movs	r1, r2
 8006326:	f7ff ff99 	bl	800625c <_malloc_r>
 800632a:	0004      	movs	r4, r0
 800632c:	0020      	movs	r0, r4
 800632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006330:	2a00      	cmp	r2, #0
 8006332:	d103      	bne.n	800633c <_realloc_r+0x24>
 8006334:	f7ff ff48 	bl	80061c8 <_free_r>
 8006338:	0034      	movs	r4, r6
 800633a:	e7f7      	b.n	800632c <_realloc_r+0x14>
 800633c:	f000 f834 	bl	80063a8 <_malloc_usable_size_r>
 8006340:	002c      	movs	r4, r5
 8006342:	42b0      	cmp	r0, r6
 8006344:	d2f2      	bcs.n	800632c <_realloc_r+0x14>
 8006346:	0031      	movs	r1, r6
 8006348:	0038      	movs	r0, r7
 800634a:	f7ff ff87 	bl	800625c <_malloc_r>
 800634e:	1e04      	subs	r4, r0, #0
 8006350:	d0ec      	beq.n	800632c <_realloc_r+0x14>
 8006352:	0029      	movs	r1, r5
 8006354:	0032      	movs	r2, r6
 8006356:	f7ff fb37 	bl	80059c8 <memcpy>
 800635a:	0029      	movs	r1, r5
 800635c:	0038      	movs	r0, r7
 800635e:	f7ff ff33 	bl	80061c8 <_free_r>
 8006362:	e7e3      	b.n	800632c <_realloc_r+0x14>

08006364 <_sbrk_r>:
 8006364:	2300      	movs	r3, #0
 8006366:	b570      	push	{r4, r5, r6, lr}
 8006368:	4d06      	ldr	r5, [pc, #24]	; (8006384 <_sbrk_r+0x20>)
 800636a:	0004      	movs	r4, r0
 800636c:	0008      	movs	r0, r1
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	f7fa ffca 	bl	8001308 <_sbrk>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d103      	bne.n	8006380 <_sbrk_r+0x1c>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d000      	beq.n	8006380 <_sbrk_r+0x1c>
 800637e:	6023      	str	r3, [r4, #0]
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	20000388 	.word	0x20000388

08006388 <__malloc_lock>:
 8006388:	b510      	push	{r4, lr}
 800638a:	4802      	ldr	r0, [pc, #8]	; (8006394 <__malloc_lock+0xc>)
 800638c:	f000 f814 	bl	80063b8 <__retarget_lock_acquire_recursive>
 8006390:	bd10      	pop	{r4, pc}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	20000390 	.word	0x20000390

08006398 <__malloc_unlock>:
 8006398:	b510      	push	{r4, lr}
 800639a:	4802      	ldr	r0, [pc, #8]	; (80063a4 <__malloc_unlock+0xc>)
 800639c:	f000 f80d 	bl	80063ba <__retarget_lock_release_recursive>
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	20000390 	.word	0x20000390

080063a8 <_malloc_usable_size_r>:
 80063a8:	1f0b      	subs	r3, r1, #4
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	1f18      	subs	r0, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	da01      	bge.n	80063b6 <_malloc_usable_size_r+0xe>
 80063b2:	580b      	ldr	r3, [r1, r0]
 80063b4:	18c0      	adds	r0, r0, r3
 80063b6:	4770      	bx	lr

080063b8 <__retarget_lock_acquire_recursive>:
 80063b8:	4770      	bx	lr

080063ba <__retarget_lock_release_recursive>:
 80063ba:	4770      	bx	lr

080063bc <_init>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr

080063c8 <_fini>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr
